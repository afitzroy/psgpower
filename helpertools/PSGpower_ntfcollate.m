function PSGpower_ntfcollate()

%{

This is a partial/scratch script designed to collate Power (newtimef) module 
output across participants. A more full-featured TFR viewing/analyzing script
is working for SNL-internal analyses and WIP for external use, and is
available upon request (ahren.fitzroy@gmail.com). - ABF 2022-05-30

%}

%Get list of data to process
[~,tffp] = uigetfile('*TFoutput.mat', 'Select a *TFoutput.mat file from the folder containing all *TFoutput.mats you want to process');
cd(tffp);
tffns = dir([tffp '*TFoutput.mat']);
tffns = {tffns.name};
outmat = cell(length(tffns), 1 + 3*2);
header{1} = 'PID';

for p = 1:length(tffns)
    pid = strsplit(tffns{p}, '_');
    pid = pid{1};
    
    disp(['Processing ' pid ', participant ' num2str(p) ' of ' num2str(length(tffns)) '...']);
    %IMPORTFILE(FILETOREAD1)
    %  Imports data from the specified file
    %  FILETOREAD1:  file to read
    
    %  Auto-generated by MATLAB on 08-May-2017 13:37:27
    
    % Import the file
    tfo = load('-mat', [tffp tffns{p}]);
    tfo = tfo.tfo;
    
%     % Create new variables in the base workspace from those fields.
%     vars = fieldnames(newData1);
%     for i = 1:length(vars)
%         assignin('caller', vars{i}, newData1.(vars{i}));
%     end
%     clear newData1 vars i;
    
    outmat{p,1} = pid;
    
    for b = 1:length(tfo) %Frequency bands
        if ~isempty(tfo(b).bandfreqs)
            band = strsplit(tfo(b).bandfreqs, ' ');
            band = band{1};
        else
            continue %Skip forward if no data for current pid/band
        end
        for ch = 1:size(tfo(b).ersp,2) %F4 (ipsi ref) = 5, C4 (ipsi ref) = 15, F3 (ipsi ref) = 3, C3 (ipsi ref) = 13
            chan = tfo(b).chlabels(ch);
            thisch = 0; curch = ''; %Only process certain channels for now
            if strcmp(band, 'delta') || strcmp(band, 'theta')
                if ~isempty(cell2mat(regexpi(chan, 'F4')))
                    thisch = 1;
                    curch = 'F4';
                end
            elseif strcmp(band, 'sigma')
                if ~isempty(cell2mat(regexpi(chan, 'C4')))
                    thisch = 1;
                    curch = 'C4';
                end
            end %chooser (band)
            
            if thisch == 1
                numdv = 8;
                colc = ((b-1)*numdv); %constant allowing columns to be arranged {'band1dv1' 'band1dv2', ..., 'band1dvn', 'band2dv1', ..., 'bandndvn'}
                
                env = mean(tfo(b).ersp{ch}, 1);
                enviqr = iqr(env);
                envsum = sum(env);
                envdur = tfo(b).epochpntsar{ch} / tfo(b).epochsrate;
                origenvdur = tfo(b).epochpnts / tfo(b).epochsrate;
                
                for dv = 1:numdv
                    col = 1+colc+dv;
                    if dv == 1 %electrode
                        outmat{p,col} = curch;
                        header{col} = [band '_elec'];
                    elseif dv == 2 %sum over time
                        outmat{p,col} = envsum;
                        header{col} = [band '_envint'];
                    elseif dv == 3 %time
                        outmat{p,col} = envdur;
                        header{col} = [band '_envdur'];
                    elseif dv == 4 %sum / time
                        outmat{p,col} = envsum / envdur;
                        header{col} = [band '_envintdivdur_sec'];
                    elseif dv == 5 %mean over both dims
                        outmat{p,col} = mean(env);
                        header{col} = [band '_envsampmean'];
                    elseif dv == 6 %original (pre-artifact rejection) duration
                        outmat{p,col} = origenvdur;
                        header{col} = [band '_origdur'];
                    elseif dv == 7 %percent artifact
                        outmat{p,col} = (1-(envdur/origenvdur))*100;
                        header{col} = [band '_percentartifact'];
                    elseif dv == 8 %percent artifact
                        outmat{p,col} = enviqr;
                        header{col} = [band '_iqr'];
                    end %DV conditional
                    
                end %DV loop
            end %Process channel conditional
        end %Channel loop
    end %Frequency bands loop
end %Participant loop

%Write out csv with data
[outfn outfp] = uiputfile([tffp 'TFcollate_' datestr(now, 'YYYY-mm-dd') '.csv'], 'Where to save collated *TFoutput .csv file?');
outfid = fopen([outfp outfn], 'w+');
fprintf(outfid, [repmat('%s,',1,size(outmat,2)-1) '%s\n'], header{:});
for r = 1:size(outmat,1)
    fprintf(outfid, ['%s,' '%s,%f,%f,%f,%f,%f,%f,%f,' '%s,%f,%f,%f,%f,%f,%f,%f,' '%s,%f,%f,%f,%f,%f,%f,%f' '\n'], outmat{r,:});
end
fclose(outfid);

end %Function