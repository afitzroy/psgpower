<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef PSGpower_GUI < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        PSGpowerLabel                   matlab.ui.control.Label
        PSGpowerVersionLabel            matlab.ui.control.Label
        Step1SelectfiledirectoryPanel   matlab.ui.container.Panel
        FileSelectListbox               matlab.ui.control.ListBox
        AddDirectoryforAnalysisButton   matlab.ui.control.Button
        IncludesubdirectoriesCheckBox   matlab.ui.control.CheckBox
        SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel  matlab.ui.control.Label
        ChooseSubsetButton              matlab.ui.control.StateButton
        SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel  matlab.ui.control.Label
        SessioninfocsvfoundUsetodeterminemontageandscoringSwitch  matlab.ui.control.Switch
        UpdateFileListButton            matlab.ui.control.Button
        DirectoryConfirmationLabel      matlab.ui.control.Label
        WhatsoftwarewasusedforsleepstagenotationDropDownLabel  matlab.ui.control.Label
        WhatsoftwarewasusedforsleepstagenotationDropDown  matlab.ui.control.DropDown
        EEGSamplingFrequencyHzEditFieldLabel  matlab.ui.control.Label
        EEGSamplingFrequencyHzEditField  matlab.ui.control.EditField
        Step2SelectsignalprocessingapproachPanel  matlab.ui.container.Panel
        TabGroup                        matlab.ui.container.TabGroup
        HypnogramTab                    matlab.ui.container.Tab
        HypnogramRasterPlotCheckbox     matlab.ui.control.CheckBox
        SpectraEEGLABTab                matlab.ui.container.Tab
        Apply60HznotchfilterbeforegeneratingspectraCheckBox  matlab.ui.control.CheckBox
        FrequencyrangeofinterestHzLabel_2  matlab.ui.control.Label
        PlotFreqROIHzMinimumEditField   matlab.ui.control.NumericEditField
        toEditFieldLabel                matlab.ui.control.Label
        PlotFreqROIHzMaximumEditField   matlab.ui.control.NumericEditField
        TimeintervalforspectraButtonGroup  matlab.ui.container.ButtonGroup
        UsealldatainselectedstagesButton  matlab.ui.control.RadioButton
        CustomtimerangeminStartButton   matlab.ui.control.RadioButton
        CustomTimeIntervalStart         matlab.ui.control.NumericEditField
        CustomTimeIntervalEnd           matlab.ui.control.NumericEditField
        EndLabel                        matlab.ui.control.Label
        Label_6                         matlab.ui.control.Label
        SpectraFieldTripTab             matlab.ui.container.Tab
        SpectraplotunitsDropDownLabel   matlab.ui.control.Label
        SpectraplotunitsDropDown        matlab.ui.control.DropDown
        TimeintervalforspectraButtonGroup_FT  matlab.ui.container.ButtonGroup
        UsealldatainselectedstagesButton_FT  matlab.ui.control.RadioButton
        CustomtimerangeminStartButton_FT  matlab.ui.control.RadioButton
        CustomTimeIntervalStart_FT      matlab.ui.control.NumericEditField
        CustomTimeIntervalEnd_FT        matlab.ui.control.NumericEditField
        EndLabel_FT                     matlab.ui.control.Label
        FrequencyrangeofinterestHzLabel  matlab.ui.control.Label
        PlotFreqROIMinimumEditField_FT  matlab.ui.control.NumericEditField
        toEditField_2Label_2            matlab.ui.control.Label
        PlotFreqROIMaximumEditField_FT  matlab.ui.control.NumericEditField
        Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT  matlab.ui.control.CheckBox
        WindowlengthsecEditFieldLabel   matlab.ui.control.Label
        WindowlengthsecEditField_FT     matlab.ui.control.NumericEditField
        WindowoverlapproportionEditFieldLabel_2  matlab.ui.control.Label
        WindowoverlapproportionEditField_FT  matlab.ui.control.NumericEditField
        NoteLabelSpectra_FT             matlab.ui.control.Label
        SpectranewtimefTab              matlab.ui.container.Tab
        TimeintervalforspectraButtonGroup_ntf  matlab.ui.container.ButtonGroup
        UsealldatainselectedstagesButton_ntf  matlab.ui.control.RadioButton
        CustomtimerangeminStartButton_ntf  matlab.ui.control.RadioButton
        CustomTimeIntervalStart_ntf     matlab.ui.control.NumericEditField
        CustomTimeIntervalEnd_ntf       matlab.ui.control.NumericEditField
        EndLabel_ntf                    matlab.ui.control.Label
        toEditField_2Label_ntf          matlab.ui.control.Label
        PlotFreqROIMaximumEditField_ntf  matlab.ui.control.NumericEditField
        Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf  matlab.ui.control.CheckBox
        NoteLabelSpectra_ntf            matlab.ui.control.Label
        FrequencyrangeofinterestHzLabel_3  matlab.ui.control.Label
        PlotFreqROIMinimumEditField_ntf  matlab.ui.control.NumericEditField
        PowerHilbertTab                 matlab.ui.container.Tab
        FiniteImpulseResponseFIRorderButtonGroup  matlab.ui.container.ButtonGroup
        HardcodedDefaultButton          matlab.ui.control.RadioButton
        CohensAlgorithmButton           matlab.ui.control.RadioButton
        ThetaFilterModeDropDownLabel    matlab.ui.control.Label
        ThetaFilterModeDropDown         matlab.ui.control.DropDown
        HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel  matlab.ui.control.Label
        HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown  matlab.ui.control.DropDown
        HilbertEnvelopesButtonGroup     matlab.ui.container.ButtonGroup
        CreatenewenvelopefilesButton    matlab.ui.control.RadioButton
        LoadexistingenvelopefilesButton  matlab.ui.control.RadioButton
        PowernewtimefTab                matlab.ui.container.Tab
        RejectartifactsfirstCheckBox    matlab.ui.control.CheckBox
        ofFrequencies5shortrecommended50mid999longEditFieldLabel  matlab.ui.control.Label
        ofFrequencies5shortrecommended50mid999longEditField  matlab.ui.control.NumericEditField
        WhatsizetemporalwindowshouldbeusedfornewtimefsecEditFieldLabel  matlab.ui.control.Label
        WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField  matlab.ui.control.NumericEditField
        SpindleDetectionFerrarelliTab   matlab.ui.container.Tab
        Resampleto128HzCheckBox         matlab.ui.control.CheckBox
        Lowpasssigmaenvelopeat2HzCheckBox  matlab.ui.control.CheckBox
        DrawstagesofwaveformabstractionforFerrarellimethodCheckBox  matlab.ui.control.CheckBox
        WhatlowerupperthresholdratiostouseLowerThresholdLabel  matlab.ui.control.Label
        FerrarelliThresholdLow          matlab.ui.control.NumericEditField
        UpperThresholdLabel             matlab.ui.control.Label
        FerrarelliThresholdHigh         matlab.ui.control.NumericEditField
        NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label  matlab.ui.control.Label
        Label_2                         matlab.ui.control.Label
        Label_3                         matlab.ui.control.Label
        Label_4                         matlab.ui.control.Label
        EnvelopeViewerTab               matlab.ui.container.Tab
        BaselineRemovalChoiceCheckBox   matlab.ui.control.CheckBox
        GlobalBaslineRemovalChoiceCheckBox  matlab.ui.control.CheckBox
        ArtifactNaNChoiceCheckBox       matlab.ui.control.CheckBox
        HowlongofawindowshouldbeusedforlocalbaselinesecLabel  matlab.ui.control.Label
        BaselineRemovalWindowLengthNumericEditField  matlab.ui.control.NumericEditField
        WhatartifacthandlingmethodshouldbeusedLabel  matlab.ui.control.Label
        ArtifactChoiceDropdown          matlab.ui.control.DropDown
        MedianSmoothWindowNumericEditFieldLabel  matlab.ui.control.Label
        MedianSmoothWindowNumericEditField  matlab.ui.control.NumericEditField
        QuantifyenvelopesButtonGroup    matlab.ui.container.ButtonGroup
        ByHourButton                    matlab.ui.control.RadioButton
        ByStageButton                   matlab.ui.control.RadioButton
        AverageenvelopesacrossButtonGroup  matlab.ui.container.ButtonGroup
        chansButton                     matlab.ui.control.RadioButton
        timeButton                      matlab.ui.control.RadioButton
        WhatenvelopetypeButtonGroup     matlab.ui.container.ButtonGroup
        amplitudeButton                 matlab.ui.control.RadioButton
        powerButton                     matlab.ui.control.RadioButton
        CollateorloadenvelopesButtonGroup  matlab.ui.container.ButtonGroup
        CollateButton                   matlab.ui.control.RadioButton
        LoadButton                      matlab.ui.control.RadioButton
        EnvViewerTempROILowNumericEditFieldLabel  matlab.ui.control.Label
        EnvViewerTempROILowNumericEditField  matlab.ui.control.NumericEditField
        EnvViewerTempROIHighNumericEditFieldLabel  matlab.ui.control.Label
        EnvViewerTempROIHighNumericEditField  matlab.ui.control.NumericEditField
        OmitEmptyEnvelopesCheckBox      matlab.ui.control.CheckBox
        ThetaFilterModeDropDown_EnvViewerLabel  matlab.ui.control.Label
        ThetaFilterModeDropDown_EnvViewer  matlab.ui.control.DropDown
        PACMuehlrothTab                 matlab.ui.container.Tab
        WIPLabel                        matlab.ui.control.Label
        TMRtistryWIPTab                 matlab.ui.container.Tab
        TMRtistrySettingsButton         matlab.ui.control.Button
        TMRtistrySettingsLampLabel      matlab.ui.control.Label
        TMRtistrySettingsLamp           matlab.ui.control.Lamp
        TMRtistryScriptImportButton     matlab.ui.control.Button
        TMRtistryCustomScriptLampLabel  matlab.ui.control.Label
        TMRtistryCustomScriptLamp       matlab.ui.control.Lamp
        SpectrogramViewerTab            matlab.ui.container.Tab
        UnderconstructionGaugeLabel     matlab.ui.control.Label
        UnderconstructionGauge          matlab.ui.control.LinearGauge
        HowmanyfrequenciesLabel         matlab.ui.control.Label
        HowmanyfrequenciesEditField     matlab.ui.control.EditField
        WhatelectrodeLabel              matlab.ui.control.Label
        WhatelectrodeEditField          matlab.ui.control.EditField
        SavetifsCheckBox                matlab.ui.control.CheckBox
        SavetifmetasCheckBox            matlab.ui.control.CheckBox
        ModulespecificParametersLabel   matlab.ui.control.Label
        AnalysisModuleselectoneDropDownLabel  matlab.ui.control.Label
        AnalysisModuleselectoneDropDown  matlab.ui.control.DropDown
        Step3InitializeFrequencyBandsPanel  matlab.ui.container.Panel
        SubdeltaCheckBox                matlab.ui.control.CheckBox
        DeltaCheckBox                   matlab.ui.control.CheckBox
        ThetaCheckBox                   matlab.ui.control.CheckBox
        AlphaCheckBox                   matlab.ui.control.CheckBox
        SigmaCheckBox                   matlab.ui.control.CheckBox
        BetaCheckBox                    matlab.ui.control.CheckBox
        GammalowCheckBox                matlab.ui.control.CheckBox
        FullbandCheckBox                matlab.ui.control.CheckBox
        EEGBandsLabel                   matlab.ui.control.Label
        FrequencyBandwidthLabel         matlab.ui.control.Label
        SleepStagesLabel                matlab.ui.control.Label
        SubdeltaLowLimFreq              matlab.ui.control.NumericEditField
        DeltaLowLimFreq                 matlab.ui.control.NumericEditField
        ThetaLowLimFreq                 matlab.ui.control.NumericEditField
        AlphaLowLimFreq                 matlab.ui.control.NumericEditField
        SigmaLowLimFreq                 matlab.ui.control.NumericEditField
        BetaLowLimFreq                  matlab.ui.control.NumericEditField
        GammalowLowLimFreq              matlab.ui.control.NumericEditField
        FullbandLowLimFreq              matlab.ui.control.NumericEditField
        SubdeltatoLabel                 matlab.ui.control.Label
        DeltatoLabel_2                  matlab.ui.control.Label
        ThetatoLabel_3                  matlab.ui.control.Label
        AlphatoLabel_4                  matlab.ui.control.Label
        SigmatoLabel_5                  matlab.ui.control.Label
        BetatoLabel_6                   matlab.ui.control.Label
        GammalowtoLabel_7               matlab.ui.control.Label
        FullbandtoLabel                 matlab.ui.control.Label
        SubdeltaHighLimFreq             matlab.ui.control.NumericEditField
        DeltaHighLimFreq                matlab.ui.control.NumericEditField
        ThetaHighLimFreq                matlab.ui.control.NumericEditField
        AlphaHighLimFreq                matlab.ui.control.NumericEditField
        SigmaHighLimFreq                matlab.ui.control.NumericEditField
        BetaHighLimFreq                 matlab.ui.control.NumericEditField
        GammalowHighLimFreq             matlab.ui.control.NumericEditField
        FullbandHighLimFreq             matlab.ui.control.NumericEditField
        HzLabel                         matlab.ui.control.Label
        HzLabel_2                       matlab.ui.control.Label
        HzLabel_3                       matlab.ui.control.Label
        HzLabel_4                       matlab.ui.control.Label
        HzLabel_5                       matlab.ui.control.Label
        HzLabel_6                       matlab.ui.control.Label
        HzLabel_7                       matlab.ui.control.Label
        HzLabel_9                       matlab.ui.control.Label
        SubdeltaN1                      matlab.ui.control.CheckBox
        DeltaN1                         matlab.ui.control.CheckBox
        ThetaN1                         matlab.ui.control.CheckBox
        AlphaN1                         matlab.ui.control.CheckBox
        SigmaN1                         matlab.ui.control.CheckBox
        BetaN1                          matlab.ui.control.CheckBox
        GammalowN1                      matlab.ui.control.CheckBox
        FullbandN1                      matlab.ui.control.CheckBox
        N1Label                         matlab.ui.control.Label
        SubdeltaN2                      matlab.ui.control.CheckBox
        DeltaN2                         matlab.ui.control.CheckBox
        ThetaN2                         matlab.ui.control.CheckBox
        AlphaN2                         matlab.ui.control.CheckBox
        SigmaN2                         matlab.ui.control.CheckBox
        BetaN2                          matlab.ui.control.CheckBox
        GammalowN2                      matlab.ui.control.CheckBox
        FullbandN2                      matlab.ui.control.CheckBox
        N2Label                         matlab.ui.control.Label
        SubdeltaN3                      matlab.ui.control.CheckBox
        DeltaN3                         matlab.ui.control.CheckBox
        ThetaN3                         matlab.ui.control.CheckBox
        AlphaN3                         matlab.ui.control.CheckBox
        SigmaN3                         matlab.ui.control.CheckBox
        BetaN3                          matlab.ui.control.CheckBox
        GammalowN3                      matlab.ui.control.CheckBox
        FullbandN3                      matlab.ui.control.CheckBox
        N3Label                         matlab.ui.control.Label
        SubdeltaR                       matlab.ui.control.CheckBox
        DeltaR                          matlab.ui.control.CheckBox
        ThetaR                          matlab.ui.control.CheckBox
        AlphaR                          matlab.ui.control.CheckBox
        SigmaR                          matlab.ui.control.CheckBox
        BetaR                           matlab.ui.control.CheckBox
        GammalowR                       matlab.ui.control.CheckBox
        FullbandR                       matlab.ui.control.CheckBox
        RLabel                          matlab.ui.control.Label
        SubdeltaW                       matlab.ui.control.CheckBox
        DeltaW                          matlab.ui.control.CheckBox
        ThetaW                          matlab.ui.control.CheckBox
        AlphaW                          matlab.ui.control.CheckBox
        SigmaW                          matlab.ui.control.CheckBox
        BetaW                           matlab.ui.control.CheckBox
        GammalowW                       matlab.ui.control.CheckBox
        FullbandW                       matlab.ui.control.CheckBox
        WLabel                          matlab.ui.control.Label
        SubdeltaN4                      matlab.ui.control.CheckBox
        DeltaN4                         matlab.ui.control.CheckBox
        ThetaN4                         matlab.ui.control.CheckBox
        AlphaN4                         matlab.ui.control.CheckBox
        SigmaN4                         matlab.ui.control.CheckBox
        BetaN4                          matlab.ui.control.CheckBox
        GammalowN4                      matlab.ui.control.CheckBox
        FullbandN4                      matlab.ui.control.CheckBox
        N4Label                         matlab.ui.control.Label
        ArtifactThresholdLabel          matlab.ui.control.Label
        SubdeltaArtifact                matlab.ui.control.NumericEditField
        DeltaArtifact                   matlab.ui.control.NumericEditField
        ThetaArtifact                   matlab.ui.control.NumericEditField
        AlphaArtifact                   matlab.ui.control.NumericEditField
        SigmaArtifact                   matlab.ui.control.NumericEditField
        BetaArtifact                    matlab.ui.control.NumericEditField
        GammalowArtifact                matlab.ui.control.NumericEditField
        FullbandArtifact                matlab.ui.control.NumericEditField
        SleepbandCheckBox               matlab.ui.control.CheckBox
        SleepbandLowLimFreq             matlab.ui.control.NumericEditField
        SleepbandtoLabel                matlab.ui.control.Label
        SleepbandHighLimFreq            matlab.ui.control.NumericEditField
        HzLabel_10                      matlab.ui.control.Label
        SleepbandN1                     matlab.ui.control.CheckBox
        SleepbandN2                     matlab.ui.control.CheckBox
        SleepbandN3                     matlab.ui.control.CheckBox
        SleepbandR                      matlab.ui.control.CheckBox
        SleepbandW                      matlab.ui.control.CheckBox
        SleepbandN4                     matlab.ui.control.CheckBox
        SleepbandArtifact               matlab.ui.control.NumericEditField
        AllStagesButton                 matlab.ui.control.Button
        AllBandsButton                  matlab.ui.control.Button
        Step4OptionalSettingsPanel      matlab.ui.container.Panel
        ForcerecreationofEEGLABsetfilesCheckBox  matlab.ui.control.CheckBox
        DownsampletoHzCheckBox          matlab.ui.control.CheckBox
        SampRateisHighLabel             matlab.ui.control.Label
        RereferenceEEGDatatoButtonGroup  matlab.ui.container.ButtonGroup
        AvgMastButton                   matlab.ui.control.RadioButton
        ContraMastButton                matlab.ui.control.RadioButton
        CustomRerefButton               matlab.ui.control.RadioButton
        CustomRerefEditField            matlab.ui.control.EditField
        RunandsaveICAdecompositionsCheckBox  matlab.ui.control.CheckBox
        InterpolatemanuallyidentifiedbadchannelsCheckBox  matlab.ui.control.CheckBox
        DownsampledFrequencyNumericEditField  matlab.ui.control.NumericEditField
        ARBCISettingsLampLabel          matlab.ui.control.Label
        ARBCISettingsLamp               matlab.ui.control.Lamp
        ARBCISettingsButton             matlab.ui.control.Button
        PreprocessingSettingsButton     matlab.ui.control.Button
        PreProcessingSettingsLampLabel  matlab.ui.control.Label
        PreProcessingSettingsLamp       matlab.ui.control.Lamp
        InterpolateextrathetabadchannelsMRISRTonlyCheckBox  matlab.ui.control.CheckBox
        ImageModeButtonGroup            matlab.ui.container.ButtonGroup
        AutocloseButton                 matlab.ui.control.RadioButton
        PauseButton                     matlab.ui.control.RadioButton
        AnalyzeButton                   matlab.ui.control.Button
        ImportPSGpowerParametersButton  matlab.ui.control.Button
        ExportPSGpowerParametersButton  matlab.ui.control.Button
        ExperimentnameDropDownLabel     matlab.ui.control.Label
        ExperimentnameDropDown          matlab.ui.control.DropDown
    end

    
    properties (Access = public)
        % Variables coming from Step 1: Select Files for analysis
        eegfiles                % EEG file names
        eegrootfolder           % Primary EEG files directory
        subdirlist              % Subdirectory
        cursubdir               % Current subdirectory
        vhdrfiles               % .vhdr file names
        stagefp                 % staging filepaths
        stgfiles                % staging files
        txtfiles                % .txt file names
        matfiles                % .mat file names
        edffiles                % .edf file names
        EDFfiles                % .EDF file names
        arbci_settings          % ARBCI settings from .txt file
        preproc_settings        % Experiment-specific preprocessing settings
        tmrtistry_settings      % TMRtistry settings from .txt file
        tmrtistry_script        % Script to run TMRtistry from .txt file
        arthresh                % Structure to hold artifact thresholds for current experiment
        
        psgpowersettings_backup % PSGpower GUI state for printing in the diary log
        
    end
    
    methods (Access = private)
        
        function app = refreshGUI(app)
            %%%Set GUI element default states
            app.eegfiles = '';
            app.FileSelectListbox.Items = {};
            app.arbci_settings = '';
            app.preproc_settings = '';
            app.tmrtistry_settings = '';
            app.tmrtistry_script = '';
            
            %% Reset Step 1 component states
            app.IncludesubdirectoriesCheckBox.Enable = 'off';
            app.IncludesubdirectoriesCheckBox.Value = 0;
            app.EEGSamplingFrequencyHzEditField.Value = num2str(0);
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Visible = 'off';
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Value = 'No';
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel.Visible = 'off';
            app.DirectoryConfirmationLabel.Visible = 'off';
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.Visible = 'off';
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.Value = ' ';
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.Visible = 'off';
            app.EEGSamplingFrequencyHzEditField.Visible = 'off';
            app.EEGSamplingFrequencyHzEditFieldLabel.Visible = 'off';
            app.ChooseSubsetButton.Visible = 'off';
            app.UpdateFileListButton.Visible = 'off';
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Visible = 'off';
            app.FileSelectListbox.Visible = 'off';
            
            %% Reset Step 2 component states
            app.Step2SelectsignalprocessingapproachPanel.Visible = 'off';
            app.AnalysisModuleselectoneDropDown.Value = ' ';
            app.TabGroup.Visible = 'off';

            %Step2-Hilbert
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Visible = 'off'; %?
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.Visible = 'off'; %?
            %Step2-Envelope Viewer
            app.OmitEmptyEnvelopesCheckBox.Visible = 'off';
            app.BaselineRemovalWindowLengthNumericEditField.Visible = 'off';
            app.BaselineRemovalWindowLengthNumericEditField.Value = 0;
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.Visible = 'off';
            app.ThetaFilterModeDropDown_EnvViewer.Visible = 'off';
            app.ThetaFilterModeDropDown_EnvViewer.Value = 'none';
            app.ThetaFilterModeDropDown_EnvViewerLabel.Visible = 'off';
            app.MedianSmoothWindowNumericEditField.Visible = 'off';
            app.MedianSmoothWindowNumericEditField.Value = 90;
            app.MedianSmoothWindowNumericEditFieldLabel.Visible = 'off';
            app.EnvViewerTempROILowNumericEditField.Visible = 'off';
            app.EnvViewerTempROILowNumericEditField.Value = 0;
            app.EnvViewerTempROILowNumericEditFieldLabel.Visible = 'off';
            app.EnvViewerTempROIHighNumericEditField.Visible = 'off';
            app.EnvViewerTempROIHighNumericEditField.Value = 60;
            app.EnvViewerTempROIHighNumericEditFieldLabel.Visible = 'off';
            
            %% Reset Step 3 component states
            app.Step3InitializeFrequencyBandsPanel.Visible = 'off';
            
            %% Reset Step 4 component states
            app.Step4OptionalSettingsPanel.Visible = 'off';
            app.DownsampletoHzCheckBox.Visible = 'off';
            app.SampRateisHighLabel.Visible = 'off';
            app.DownsampledFrequencyNumericEditField.Visible = 'off';
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Visible = 'off';
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Value = 0;
            
            % Analyze button disabled at startup
            app.AnalyzeButton.Enable = 'off';
        end
        
        function app = setStageFreqDefaults(app, value)
            app.SubdeltaLowLimFreq.Value = 0.1;
            app.SubdeltaHighLimFreq.Value = 0.5;
            app.DeltaLowLimFreq.Value = 0.5;
            app.DeltaHighLimFreq.Value = 4;
            app.ThetaLowLimFreq.Value = 4;
            app.ThetaHighLimFreq.Value = 8;
            app.AlphaLowLimFreq.Value = 8;
            app.AlphaHighLimFreq.Value = 12;
            app.SigmaLowLimFreq.Value = 12;
            app.SigmaHighLimFreq.Value = 16;
            app.BetaLowLimFreq.Value = 16;
            app.BetaHighLimFreq.Value = 30;
            app.GammalowLowLimFreq.Value = 30;
            app.GammalowHighLimFreq.Value = 50;
            app.FullbandLowLimFreq.Value = 0;
            app.FullbandHighLimFreq.Value = 80;
            app.SleepbandLowLimFreq.Value = 0.5;
            app.SleepbandHighLimFreq.Value = 20;
        end
        
        function app = setARthreshDefaults(app, value)
            app.arthresh.subdelta = 250;
            app.arthresh.delta = 250;
            app.arthresh.theta = 150;
            app.arthresh.alpha = 100;
            app.arthresh.sigma = 75;
            app.arthresh.beta = 75;
            app.arthresh.gammalow = 75;
            app.arthresh.fullband = 250;
            app.arthresh.sleepband = 250;
        end
        
        function app = moduleGUIsetup(app, value)
            
            switch value
                case 'Hypnogram'
                    app.AnalysisModuleselectoneDropDown.Value = 'Hypnogram';
                    app.TabGroup.SelectedTab = app.HypnogramTab;
                    app = setStep3Bands(app, {'fullband'}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Enable custom fullband parameters
                    app.FullbandLowLimFreq.Enable = 'off';
                    app.FullbandLowLimFreq.Value = 0;
                    app.FullbandHighLimFreq.Enable = 'off';
                    app.FullbandHighLimFreq.Value = 0;
                    app.FullbandArtifact.Enable = 'off';
                    
                case 'Spectra (EEGLAB)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Spectra (EEGLAB)';
                    app.TabGroup.SelectedTab = app.SpectraEEGLABTab;
                    app = setStep3Bands(app, {'fullband'}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Enable custom Fullband parameters
                    app.FullbandArtifact.Enable = 'off';
                    
                case 'Spectra (FieldTrip)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Spectra (FieldTrip)';
                    app.TabGroup.SelectedTab = app.SpectraFieldTripTab;
                    app = setStep3Bands(app, {'fullband'}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Enable custom Fullband parameters
                    app.FullbandArtifact.Enable = 'off';
                    
                case 'Spectra (newtimef)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Spectra (newtimef)';
                    app.TabGroup.SelectedTab = app.SpectranewtimefTab;
                    app = setStep3Bands(app, {'fullband'}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Enable custom Fullband parameters
                    app.FullbandArtifact.Enable = 'off';
                    
                case 'Power (Hilbert)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Power (Hilbert)';
                    app.TabGroup.SelectedTab = app.PowerHilbertTab;
                    HilbertEnvelopesButtonGroupSelectionChanged(app);
                    %app = setStep3Bands(app, {'subdelta', 'delta', 'theta', 'sigma'}, 'othersOn', 1, 1, 1, 1, 1, 1);
                    %ThetaFilterModeDropDownValueChanged(app);
                    
                case 'Power (newtimef)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Power (newtimef)';
                    app.TabGroup.SelectedTab = app.PowernewtimefTab;
                    app = setStep3Bands(app, {'subdelta', 'delta', 'theta', 'sigma'}, 'othersOn', 1, 1, 1, 1, 1, 1);
                    
                case 'Spindle Detection (Ferrarelli)'
                    app.AnalysisModuleselectoneDropDown.Value = 'Spindle Detection (Ferrarelli)';
                    app.TabGroup.SelectedTab = app.SpindleDetectionFerrarelliTab;
                    app = setStep3Bands(app, {'sigma'}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Enable custom Sigmaband parameters
                    app.SigmaCheckBox.Enable = 'off';
                    app.SigmaLowLimFreq.Enable = 'off';
                    app.SigmaLowLimFreq.Value = 11;
                    app.SigmaHighLimFreq.Enable = 'off';
                    app.SigmaHighLimFreq.Value = 15;
                    app.SigmaN1.Enable = 'off';
                    app.SigmaN2.Enable = 'off';
                    app.SigmaN3.Enable = 'off';
                    app.SigmaN4.Enable = 'off';
                    app.SigmaR.Enable = 'off';
                    app.SigmaW.Enable = 'off';
                    app.SigmaArtifact.Enable = 'off';
                    
                case 'PAC (Muehlroth)'
                    app.AnalysisModuleselectoneDropDown.Value = 'PAC (Muehlroth)';
                    app.TabGroup.SelectedTab = app.PACMuehlrothTab;
                    app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    % Maybe pull GUI Deltaband and Sigmaband bandpass etc for use in SO and SPN detection algorithms? - ABF 2022-02-23
                    
                case 'TMRtistry (WIP)'
                    app.AnalysisModuleselectoneDropDown.Value = 'TMRtistry (WIP)';
                    app.TabGroup.SelectedTab = app.TMRtistryWIPTab;
                    app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                case 'Envelope Viewer'
                    app.AnalysisModuleselectoneDropDown.Value = 'Envelope Viewer';
                    app.TabGroup.SelectedTab = app.EnvelopeViewerTab;
                    %app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                    CollateorloadenvelopesButtonGroupSelectionChanged(app, '')
                    
                case 'Spectrogram Viewer'
                    app.AnalysisModuleselectoneDropDown.Value = 'Spectrogram Viewer';
                    app.TabGroup.SelectedTab = app.SpectrogramViewerTab;
                    app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
                otherwise
                    app.TabGroup.Visible = 'off';
                    app.Step3InitializeFrequencyBandsPanel.Visible = 'off';
                    app.Step4OptionalSettingsPanel.Visible = 'off';
                    app.AnalyzeButton.Enable = 'off';
                    app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                    
            end
        end
        
        function app = setStep3Bands(app, enableList, disableOthers, resetParams, resetStages, enableCheckbox, enableFreqs, enableStages, enableAR)
            %General Step 3 setup
            if strcmp(disableOthers, 'othersOff')
                othersSetting = 'off';
            elseif strcmp(disableOthers, 'othersOn')
                othersSetting = 'on';
            end
            app.AllBandsButton.Enable = othersSetting;
            app.AllStagesButton.Enable = 'on';
            
            %Reset Step 3 settings that are altered by some module choices
            if resetParams == 1
                app = setStageFreqDefaults(app);
                
                app.SubdeltaArtifact.Value = app.arthresh.subdelta;
                app.DeltaArtifact.Value = app.arthresh.delta;
                app.ThetaArtifact.Value = app.arthresh.theta;
                app.AlphaArtifact.Value = app.arthresh.alpha;
                app.SigmaArtifact.Value = app.arthresh.sigma;
                app.BetaArtifact.Value = app.arthresh.beta;
                app.GammalowArtifact.Value = app.arthresh.gammalow;
                app.FullbandArtifact.Value = app.arthresh.fullband;
                app.SleepbandArtifact.Value = app.arthresh.sleepband;
            end
            
            %Disable all bands and stages
            allguibands = {'Subdelta', 'Delta', 'Theta', 'Sigma', 'Alpha', 'Beta', 'Gammalow', 'Fullband', 'Sleepband'};
            for bndidx = 1:length(allguibands)
                curband = allguibands{bndidx};
                eval(['app.' curband 'CheckBox.Value = 0;'])
                eval(['app.' curband 'CheckBox.Enable = ''' othersSetting ''';'])
                eval(['app.' curband 'LowLimFreq.Enable = ''off'';'])
                eval(['app.' curband 'HighLimFreq.Enable = ''off'';'])
                eval(['app.' curband 'N1.Enable = ''off'';'])
                eval(['app.' curband 'N2.Enable = ''off'';'])
                eval(['app.' curband 'N3.Enable = ''off'';'])
                eval(['app.' curband 'N4.Enable = ''off'';'])
                eval(['app.' curband 'R.Enable = ''off'';'])
                eval(['app.' curband 'W.Enable = ''off'';'])
                eval(['app.' curband 'Artifact.Enable = ''off'';'])
                if resetStages > 0
                    eval(['app.' curband 'N1.Value = 0;'])
                    eval(['app.' curband 'N2.Value = 0;'])
                    eval(['app.' curband 'N4.Value = 0;'])
                    eval(['app.' curband 'R.Value = 0;'])
                    eval(['app.' curband 'N3.Value = 0;'])
                    eval(['app.' curband 'W.Value = 0;'])
                end
                
            end
            
            %Enable requested bands
            if ~iscell(enableList) && strcmp(enableList, 'all')
                enableList = allguibands;
            end
            
            for bndidx = 1:length(enableList)
                curband = enableList{bndidx};
                if ~isempty(curband)
                    curband = [upper(curband(1)) lower(curband(2:end))];
                    if enableCheckbox == 1
                        eval(['app.' curband 'CheckBox.Value = 1;'])
                        eval(['app.' curband 'CheckBox.Enable = ''on'';'])
                    end
                    if enableFreqs == 1
                        eval(['app.' curband 'LowLimFreq.Enable = ''on'';'])
                        eval(['app.' curband 'HighLimFreq.Enable = ''on'';'])
                    end
                    if enableStages == 1
                        eval(['app.' curband 'N1.Enable = ''on'';'])
                        eval(['app.' curband 'N2.Enable = ''on'';'])
                        eval(['app.' curband 'N3.Enable = ''on'';'])
                        eval(['app.' curband 'N4.Enable = ''on'';'])
                        eval(['app.' curband 'R.Enable = ''on'';'])
                        eval(['app.' curband 'W.Enable = ''on'';'])
                        if resetStages == 1
                            eval(['app.' curband 'N1.Value = 1;'])
                            eval(['app.' curband 'N2.Value = 1;'])
                            eval(['app.' curband 'N3.Value = 1;'])
                            eval(['app.' curband 'N4.Value = 1;'])
                            eval(['app.' curband 'R.Value = 1;'])
                            eval(['app.' curband 'W.Value = 1;'])
                        end
                    end
                    if enableAR == 1
                        eval(['app.' curband 'Artifact.Enable = ''on'';'])
                    end
                end
            end
        end
        
        function app = bandCheckboxChanged(app, whichband, value)
            whichband = [upper(whichband(1)) lower(whichband(2:end))];
            
            if value == 1
                enablesetting = 'on';
                %valuesetting = num2str(1);
            else
                enablesetting = 'off';
                valuesetting = num2str(0);
                
                %if strcmp(resetstages, 'yes')
                eval(['app.' whichband 'N1.Value = ' valuesetting ';'])
                eval(['app.' whichband 'N2.Value = ' valuesetting ';'])
                eval(['app.' whichband 'N3.Value = ' valuesetting ';'])
                eval(['app.' whichband 'N4.Value = ' valuesetting ';'])
                eval(['app.' whichband 'R.Value = ' valuesetting ';'])
                eval(['app.' whichband 'W.Value = ' valuesetting ';'])
                %end
            end
            
            % Set default operation modes
            enablefreqsar = 'yes';
            enablestages = 'yes';
            %resetstages = 'no';
            
            % Account for Envelope Viewer (and other) GUI idiosyncrasies
            if strcmp(app.TabGroup.SelectedTab.Title, 'Envelope Viewer')
                if strcmp(app.AverageenvelopesacrossButtonGroup.SelectedObject.Text, 'chans')
                    enablefreqsar = 'no';
                    enablestages = 'no';
                    %resetstages = 'no';
                elseif strcmp(app.AverageenvelopesacrossButtonGroup.SelectedObject.Text, 'time')
                    enablefreqsar = 'no';
                    enablestages = 'yes';
                    %resetstages = 'no';
                end
                % Enable the Omit Empties setting if only one band is selected
                if ((app.SubdeltaCheckBox.Value + app.DeltaCheckBox.Value + app.ThetaCheckBox.Value + app.AlphaCheckBox.Value + app.SigmaCheckBox.Value + app.BetaCheckBox.Value + app.GammalowCheckBox.Value + app.FullbandCheckBox.Value + app.SleepbandCheckBox.Value)==1)
                    app.OmitEmptyEnvelopesCheckBox.Visible = 'on';
                else
                    app.OmitEmptyEnvelopesCheckBox.Visible = 'off';
                end
            elseif strcmp(app.TabGroup.SelectedTab.Title, 'Power (Hilbert)')
                if app.HilbertEnvelopesButtonGroup.SelectedObject == app.LoadexistingenvelopefilesButton
                    enablestages = 'no';
                end
            end
            
            % Update GUI settings
            if strcmp(enablefreqsar, 'yes')
                eval(['app.' whichband 'LowLimFreq.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'HighLimFreq.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'Artifact.Enable = ''' enablesetting ''';'])
            end
            if strcmp(enablestages, 'yes')
                eval(['app.' whichband 'N1.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'N2.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'N3.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'N4.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'R.Enable = ''' enablesetting ''';'])
                eval(['app.' whichband 'W.Enable = ''' enablesetting ''';'])
            end
            
            
            figure(app.UIFigure);
        end
        
        function app = ReportPSGpowerGUISettings(app, value)
            disp(' ');
            disp(['*****PSGpower version: ' app.PSGpowerVersionLabel.Text '*****']);
            disp(' ');
            disp('*****Step 1 settings*****');
            disp(['Chosen experiment: ' app.ExperimentnameDropDown.Value]);
            disp(['EEG folder: ' app.eegrootfolder]);
            disp(['Using subfolders: ' num2str(app.IncludesubdirectoriesCheckBox.Value)]);
            disp(['EEG file list: ' strjoin([{' '}, app.eegfiles], '\n     ')]);
            disp(['EEG sampling frequency (GUI): ' app.EEGSamplingFrequencyHzEditField.Value]);
            disp(['Sleep stage notation format: ' app.WhatsoftwarewasusedforsleepstagenotationDropDown.Value]);
            disp(['Sleep stage notation folder: ' app.stagefp]);
            disp(['Sleep stage notation files: ' strjoin([{' '}, app.stgfiles], '\n     ')]);
            disp(['Using montage key: ' app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Value]);
            disp(' ');
            
            disp('*****Step 2 settings*****');
            disp(['Chosen analysis method: ' app.AnalysisModuleselectoneDropDown.Value]);
            tabtoselect = regexprep([app.AnalysisModuleselectoneDropDown.Value 'Tab'], ' |\(|\)', '');
            eval(['curtab_children = app.' tabtoselect '.Children;']);
            disp('Analysis method settings: ');
            for childidx = 1:length(curtab_children)
                if strcmp(class(curtab_children(childidx)), 'matlab.ui.control.Label')
                    if iscell(curtab_children(childidx).Text)
                        disp(['     Label text: ' strjoin(curtab_children(childidx).Text, '\n     Label text: ')]);
                    else
                        disp(['     Label text: ' curtab_children(childidx).Text]);
                    end
                elseif isprop(curtab_children(childidx), 'Value')
                    if isprop(curtab_children(childidx), 'Text')
                        if iscell(curtab_children(childidx).Text)
                            disp(['     Component text: ' strjoin(curtab_children(childidx).Text, '\n     Component text: ')]);
                        else
                            disp(['     Component text: ' curtab_children(childidx).Text]);
                        end
                    end
                    if isnumeric(curtab_children(childidx).Value) || islogical(curtab_children(childidx).Value)
                        disp(['     Component value: ' num2str(curtab_children(childidx).Value)]);
                    else
                        disp(['     Component value: ' curtab_children(childidx).Value]);
                    end
                end
            end
            switch app.AnalysisModuleselectoneDropDown.Value
                case 'TMRtistry (WIP)'
                    disp(['TMRtistry settings: ' app.tmrtistry_settings]);
                    disp(['TMRtistry script: ' app.tmrtistry_script]);
            end
            disp(' ');
            
            disp('*****Step 3 settings*****');
            allguibands = {'Subdelta', 'Delta', 'Theta', 'Sigma', 'Alpha', 'Beta', 'Gammalow', 'Fullband', 'Sleepband'};
            for bndidx = 1:length(allguibands)
                curband = allguibands{bndidx};
                eval(['curbandon = num2str(app.' curband 'CheckBox.Value);'])
                eval(['curbandlowfreq = num2str(app.' curband 'LowLimFreq.Value);'])
                eval(['curbandhighfreq = num2str(app.' curband 'HighLimFreq.Value);'])
                eval(['curbandarthresh = num2str(app.' curband 'Artifact.Value);'])
                eval(['curbandn1on = num2str(app.' curband 'N1.Value);'])
                eval(['curbandn2on = num2str(app.' curband 'N2.Value);'])
                eval(['curbandn3on = num2str(app.' curband 'N3.Value);'])
                eval(['curbandn4on = num2str(app.' curband 'N4.Value);'])
                eval(['curbandRon = num2str(app.' curband 'R.Value);'])
                eval(['curbandWon = num2str(app.' curband 'W.Value);'])
                disp([curband ': On = ' curbandon '; Frequency range = ' curbandlowfreq '-' curbandhighfreq ' Hz; Artifact threshold = ' curbandarthresh ' uV; N1-N2-N3-N4-R-W on = ' curbandn1on '-' curbandn2on '-' curbandn3on '-' curbandn4on '-' curbandRon '-' curbandWon]);
            end
            disp(' ');
            
            disp('*****Step 4 settings*****');
            disp(['Referencing choice: ' app.RereferenceEEGDatatoButtonGroup.SelectedObject.Text]);
            if strcmp(app.RereferenceEEGDatatoButtonGroup.SelectedObject.Text, 'Custom')
                disp(['Custom rereferencing choice: ' app.CustomRerefEditField.Value]);
            end
            disp(['Force .set file recreation: ' num2str(app.ForcerecreationofEEGLABsetfilesCheckBox.Value)]);
            disp(['Run ICA decompositions: ' num2str(app.RunandsaveICAdecompositionsCheckBox.Value)]);
            disp(['Interpolate (manually identified) bad channels: ' num2str(app.InterpolatemanuallyidentifiedbadchannelsCheckBox.Value)]);
            if strcmp(app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Enable, 'on')
                disp(['Interpolate extra theta bad channels (MRI-SRT only): ' num2str(app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Value)]);
            end
            disp(['Downsample data choice: ' num2str(app.DownsampletoHzCheckBox.Value)]);
            disp(['Downsample data value (only applied if choice == 1): ' num2str(app.DownsampledFrequencyNumericEditField.Value)]);
            disp(['ARBCI settings: ' app.arbci_settings]);
            disp(['Preprocessing settings: ' app.preproc_settings]);
            disp(' ');
            
            disp(['*****Analyze procedure started at ' datestr(now) '*****']);
        end
        
        
    end
    

    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            
            %Initialize GUI state
            app = refreshGUI(app);
            app = setARthreshDefaults(app);
            
            %%%Check for recommended dependency versions
            
            % Check whether repo is up to date (very experimental)
            % PSGpower_checkforupdates();
            
            %EEGLAB
            receeglabver = '13_6_5b';
            if exist('eeglab') ~= 2
                curerrorstr = ['EEGLAB is not found on your MATLAB path. This program requires EEGLAB v' receeglabver ' to run, so it will exit now. Add EEGLAB v' receeglabver ' to your MATLAB path (download EEGLAB from https://sccn.ucsd.edu/eeglab/ if needed), then relaunch PSGpower.'];
                msgbox(curerrorstr, 'EEGLAB not found');
                error(['ERROR: ' curerrorstr ' Exiting...']);
                closereq;
            elseif isempty(regexp(which('eeglab'), receeglabver))
                qeeglabwrong = questdlg(['WARNING: EEGLAB was found on your path, but it is not the recommended version (v' receeglabver '). Do you wish to continue at your own risk? Or exit?'], 'Incompatible EEGLAB', 'Continue', 'Exit', 'Exit');
                if strcmp(qeeglabwrong, 'Exit')
                    error(['ERROR: Incompatible EEGLAB found. Download EEGLAB v' receeglabver ' from https://sccn.ucsd.edu/eeglab/, extract it, and add it to the MATLAB path after removing other EEGLAB versions from the path. Exiting...']);
                    closereq;
                end
            end
            eeglab; %Init EEGLAB
            figure(app.UIFigure); % Refocus GUI as main window
            
            %ERPLAB
            recerplabver = '6.1.4';
            if exist('erplab') ~= 2
                msgbox('ERPLAB is not found on your MATLAB path. This script requires ERPLAB to run, so it will exit now. If you need to download ERPLAB it can be found at https://erpinfo.org/erplab/', 'ERPLAB not found');
                error('ERROR: ERPLAB not found. Add it to the MATLAB path or download it from https://erpinfo.org/erplab/. Exiting...');
                closereq;
            elseif isempty(regexp(which('erplab'), recerplabver))
                qerplabwrong = questdlg(['WARNING: ERPLAB was found on your path, but it is not the recommended version (v' recerplabver '). Do you wish to continue at your own risk? Or exit?'], 'Incompatible ERPLAB', 'Continue', 'Exit', 'Exit');
                if strcmp(qeeglabwrong, 'Exit')
                    error(['ERROR: Incompatible ERPLAB found. Download ERPLAB v' recerplabver ' from https://erpinfo.org/erplab/ and extract it to the EEGLAB plugins directory after removing other ERPLAB versions from the plugins directory. Exiting...']);
                    closereq;
                end
            end
            
            %%%Initialize global variables
            global isanalyze;
            global logdir;
            isanalyze = 0;
            logdir = '';
        end

        % Value changed function: ExperimentnameDropDown
        function ExperimentnameDropDownValueChanged(app, event)
            value = app.ExperimentnameDropDown.Value;
            
            %Refresh GUI state
            app = refreshGUI(app);
            app = setARthreshDefaults(app);
            
            switch value
                case 'Custom'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(0);
                case 'EMO-MRI'
                    app.IncludesubdirectoriesCheckBox.Enable = 'on';
                    app.IncludesubdirectoriesCheckBox.Value = 1;
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(5000);
                case 'Emo_Storybook'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
                case 'EmoPreschool'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(200);                
                case 'ITNS'
                    app.IncludesubdirectoriesCheckBox.Enable = 'on';
                    app.IncludesubdirectoriesCheckBox.Value = 0;
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
                case 'Maryland'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
                case 'Mirror'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
                case 'MRI-SRT'
                    app.IncludesubdirectoriesCheckBox.Enable = 'on';
                    app.IncludesubdirectoriesCheckBox.Value = 1;
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
                    app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Visible = 'on';
                case 'SRTOT'
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);                
                case 'Storybook'
                    app.IncludesubdirectoriesCheckBox.Enable = 'on';
                    app.IncludesubdirectoriesCheckBox.Value = 1;
                    app.EEGSamplingFrequencyHzEditField.Value = num2str(500);
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: AddDirectoryforAnalysisButton
        function AddDirectoryforAnalysisButtonPushed(app, event)
            
            dlgstr = 'Select the directory containing all .edf or .vhdr files you want to process:';
            
            [app.eegrootfolder] = uigetdir('*.*', dlgstr);
            clear dlgstr;
            
            if app.eegrootfolder == 0
                % user selected cancel, don't do anything
            elseif length(app.eegrootfolder) > 0
                
                app.eegrootfolder = [strrep(app.eegrootfolder, '\', '/'), '/'];
                cd(app.eegrootfolder);
                
                if ~exist('app.eegfiles') || ~exist('app.stgfiles')
                    app.subdirlist = dir(app.eegrootfolder);
                    app.subdirlist = {app.subdirlist([app.subdirlist.isdir] == 1).name};
                    
                    app.subdirlist = app.subdirlist(~strcmp(app.subdirlist, '.'));
                    app.subdirlist = app.subdirlist(~strcmp(app.subdirlist, '..'));
                    
                    if length(app.subdirlist) > 0
                        subsearch = app.IncludesubdirectoriesCheckBox.Value;
                        if subsearch == 1
                            if any(regexp(app.eegrootfolder, 'MRI-SRT|EMO-MRI'))
                                whichdirs = listdlg('ListString', app.subdirlist, 'SelectionMode', 'multiple', 'Name', 'Dirs?', 'PromptString', 'Which folders to search for EEG files?');
                                app.subdirlist = app.subdirlist(whichdirs);
                                app.eegfiles = [];
                                for d = 1:length(app.subdirlist)
                                    app.cursubdir = [app.eegrootfolder app.subdirlist{d} '/psg/'];
                                    app.vhdrfiles = dir([app.cursubdir '*.vhdr']);
                                    app.eegfiles = [app.eegfiles strcat(app.cursubdir, {app.vhdrfiles.name})];
                                end
                                app.eegfiles = app.eegfiles(cellfun(@isempty, regexp(app.eegfiles, 'endimp')));
                                
                                app.stagefp = [app.eegrootfolder 'Analysis/Sleep_Scoring/'];
                                waitfor(msgbox(['Pulling stage notation files from ' app.stagefp ' (so make sure the notation files you want to use are loaded there)...']));
                                app.stgfiles = dir([app.stagefp '*.mat']);
                                app.stgfiles = {app.stgfiles.name};
                                app.stgfiles = strcat(app.stagefp, app.stgfiles(cellfun(@isempty, regexp(app.stgfiles, 'stageStats'))));
                                
                                scaneegrootonly = 0;
                            elseif any(regexp(app.eegrootfolder, 'Storybook|ITNS'))
                                whichdirs = listdlg('ListString', app.subdirlist, 'SelectionMode', 'multiple', 'Name', 'Dirs?', 'PromptString', 'Which folders to search for EEG files?');
                                app.subdirlist = app.subdirlist(whichdirs);
                                app.eegfiles = [];
                                app.stgfiles = [];
                                for d = 1:length(app.subdirlist)
                                    app.cursubdir = [app.eegrootfolder app.subdirlist{d} '/'];
                                    app.vhdrfiles = dir([app.cursubdir '*.vhdr']);
                                    app.txtfiles = dir([app.cursubdir '*.txt']);
                                    app.matfiles = dir([app.cursubdir '*.mat']);
                                    app.eegfiles = [app.eegfiles strcat(app.cursubdir, {app.vhdrfiles.name})];
                                    app.stgfiles = [app.stgfiles strcat(app.cursubdir, unique([{app.txtfiles.name} {app.matfiles.name}]))];
                                end
                                scaneegrootonly = 0;
                            else
                                msgbox('This program cannot handle subdirectory structures for experiments other than {MRI-SRT, EMO-MRI, Storybook, ITNS} right now- see Ahren to implement this for your experiment, or move all of your EEG and stage files to a single directory. This program will now continue as if your data directory had no subdirectories.');
                                scaneegrootonly = 1;
                                %Started to write a flexible version, realized it would be crazy to
                                %account for all edge cases. Leaving this here in case it is
                                %desired to be finished in the future - ABF 2019-03-27
                                
                                %             for d = 1:length(app.subdirlist)
                                %                 subsubdirlist = dir([eegfp '/' app.subdirlist{1} '/*.']);
                                %                 subsubdirlist = {subsubdirlist.name};
                                %                 if d == 1 && length(subsubdirlist) > 2
                                %                     msgbox('Your subdirectories have subdirectories! Navigate to the proper sub-sub-etc directory for searching (this assumes your directory substructure is consistent across PID folders).', 'Recursive madness');
                                %                     [subsubsubdir] = uigetdir([eegfp '/' dirlist{1}], 'Choose sub-sub-etc directory that actually contains data');
                                %                 end
                                %             end
                            end
                        else %if subsearch ~= 1
                            scaneegrootonly = 1;
                        end
                    else %if no subdirectories exist
                        scaneegrootonly = 1;
                    end
                    
                    if scaneegrootonly == 1
                        app.edffiles = dir([app.eegrootfolder '*.edf']);
                        app.EDFfiles = dir([app.eegrootfolder '*.EDF']);
                        app.vhdrfiles = dir([app.eegrootfolder '*.vhdr']);
                        app.eegfiles = unique([{app.edffiles.name} {app.EDFfiles.name} {app.vhdrfiles.name}]);
                        
                        app.txtfiles = dir([app.eegrootfolder '*.txt']);
                        app.matfiles = dir([app.eegrootfolder '*.mat']);
                        app.stgfiles = unique([{app.txtfiles.name} {app.matfiles.name}]);
                    end
                end
                
                % Update GUI files list based on user selections
                app.FileSelectListbox.Items = app.eegfiles;
                
                if length(app.FileSelectListbox.Items) > 0
                    app.DirectoryConfirmationLabel.Visible = 'on';
                    app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.Visible = 'on';
                    app.WhatsoftwarewasusedforsleepstagenotationDropDown.Visible = 'on';
                end
            end
            
            % GUI Modifications based on montage key presence
            if exist([app.eegrootfolder 'PID_Condition_Montage_Key.csv'])
                app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Visible = 'on';
                app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Value = 'Yes';
                app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel.Visible = 'on';
            end
            
            figure(app.UIFigure);
        end

        % Value changed function: 
        % WhatsoftwarewasusedforsleepstagenotationDropDown
        function WhatsoftwarewasusedforsleepstagenotationDropDownValueChanged(app, event)
            value = app.WhatsoftwarewasusedforsleepstagenotationDropDown.Value;
            
            if strcmp(value, ' ')
                app.EEGSamplingFrequencyHzEditField.Visible = 'off';
                app.EEGSamplingFrequencyHzEditFieldLabel.Visible = 'off';
                app.ChooseSubsetButton.Visible = 'off';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'off';
                app.Step3InitializeFrequencyBandsPanel.Visible = 'off';
                app.Step4OptionalSettingsPanel.Visible = 'off';
                app.AnalyzeButton.Enable = 'off';
            else
                app.EEGSamplingFrequencyHzEditField.Visible = 'on';
                app.EEGSamplingFrequencyHzEditFieldLabel.Visible = 'on';
                
                EEGSamplingFrequencyHzEditFieldValueChanged(app);
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: EEGSamplingFrequencyHzEditField
        function EEGSamplingFrequencyHzEditFieldValueChanged(app, event)
            value = str2num(app.EEGSamplingFrequencyHzEditField.Value);
            
            if value == 0
                app.ChooseSubsetButton.Visible = 'off';
                app.FileSelectListbox.Visible = 'off';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'off';
                app.Step3InitializeFrequencyBandsPanel.Visible = 'off';
                app.Step4OptionalSettingsPanel.Visible = 'off';
                app.AnalyzeButton.Enable = 'off';
            else
                app.ChooseSubsetButton.Visible = 'on';
                app.FileSelectListbox.Visible = 'on';
                if length(app.FileSelectListbox.Items) > 0
                    app.Step2SelectsignalprocessingapproachPanel.Visible = 'on';
                end
                
                if (value > 500)% && (app.ForcerecreationofEEGLABsetfilesCheckBox.Value == 1)
                    app.SampRateisHighLabel.Visible = 'on';
                    app.DownsampletoHzCheckBox.Value = 1;
                    app.DownsampletoHzCheckBox.Visible = 'on';
                    app.DownsampledFrequencyNumericEditField.Visible = 'on';
                    app.DownsampledFrequencyNumericEditField.Value = 500;
                else
                    app.SampRateisHighLabel.Visible = 'off';
                    app.DownsampletoHzCheckBox.Value = 0;
                    app.DownsampletoHzCheckBox.Visible = 'off';
                    app.DownsampledFrequencyNumericEditField.Visible = 'off';
                end
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: ChooseSubsetButton
        function ChooseSubsetButtonValueChanged(app, event)
            value = app.ChooseSubsetButton.Value;
            
            if value == 1
                app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Visible = 'on';
                app.FileSelectListbox.Enable = 'on';
                app.UpdateFileListButton.Visible = 'on';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'off';
            else
                app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Visible = 'off';
                app.FileSelectListbox.Enable = 'off';
                app.UpdateFileListButton.Visible = 'off';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'on';
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: UpdateFileListButton
        function UpdateFileListButtonPushed(app, event)
            [~,idx] = ismember(app.FileSelectListbox.Value,app.FileSelectListbox.Items);
            
            app.FileSelectListbox.Items = app.FileSelectListbox.Items(idx);
            app.eegfiles = app.FileSelectListbox.Items;
            
            % Fix the GUI components that were disabled to make the user
            % update their file list
            if length(app.FileSelectListbox.Items) > 0
                app.DirectoryConfirmationLabel.Visible = 'on';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'on';
                
            else
                app.DirectoryConfirmationLabel.Visible = 'off';
                app.Step2SelectsignalprocessingapproachPanel.Visible = 'off';
                
            end
            
            app.ChooseSubsetButton.Value = 0;
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Visible = 'off';
            app.FileSelectListbox.Enable = 'off';
            app.UpdateFileListButton.Visible = 'off';
            
            figure(app.UIFigure); % Refocus GUI as main window
            
        end

        % Value changed function: AnalysisModuleselectoneDropDown
        function AnalysisModuleselectoneDropDownValueChanged(app, event)
            value = app.AnalysisModuleselectoneDropDown.Value;
            
            if strcmp(value, ' ')
                app.TabGroup.Visible = 'off';
                app.Step3InitializeFrequencyBandsPanel.Visible = 'off';
                app.Step4OptionalSettingsPanel.Visible = 'off';
                app.AnalyzeButton.Enable = 'off';
            else
                app.TabGroup.Visible = 'on';
                app.Step3InitializeFrequencyBandsPanel.Visible = 'on';
                app.Step4OptionalSettingsPanel.Visible = 'on';
                app.AnalyzeButton.Enable = 'on';
                
                app = moduleGUIsetup(app, value);
                
            end
            
            figure(app.UIFigure);
            
        end

        % Selection change function: TabGroup
        function TabGroupSelectionChanged(app, event)
            
            app = moduleGUIsetup(app, app.TabGroup.SelectedTab.Title);
            
            figure(app.UIFigure);
            
        end

        % Callback function: Step3InitializeFrequencyBandsPanel, 
        % SubdeltaCheckBox
        function SubdeltaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'subdelta', app.SubdeltaCheckBox.Value);
            
        end

        % Value changed function: DeltaCheckBox
        function DeltaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'delta', app.DeltaCheckBox.Value);
            
        end

        % Value changed function: ThetaCheckBox
        function ThetaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'theta', app.ThetaCheckBox.Value);
            
            %For Power (Hilbert)
            if app.ThetaCheckBox.Value == 1 && app.HilbertEnvelopesButtonGroup.SelectedObject == app.CreatenewenvelopefilesButton
                app.ThetaFilterModeDropDownLabel.Visible = 'on';
                app.ThetaFilterModeDropDown.Visible = 'on';
                app.ThetaFilterModeDropDown.Value = 'cheby2';
                
            else
                app.ThetaFilterModeDropDownLabel.Visible = 'off';
                app.ThetaFilterModeDropDown.Visible = 'off';
                app.ThetaFilterModeDropDown.Value = 'none';
                
            end
            ThetaFilterModeDropDownValueChanged(app);
            
            %For Envelope Viewer
            if strcmp(app.CollateorloadenvelopesButtonGroup.SelectedObject.Text, 'Collate') && app.ThetaCheckBox.Value == 1
                app.ThetaFilterModeDropDown_EnvViewer.Visible = 'on';
                app.ThetaFilterModeDropDown_EnvViewerLabel.Visible = 'on';
                
            else
                app.ThetaFilterModeDropDown_EnvViewer.Visible = 'off';
                app.ThetaFilterModeDropDown_EnvViewer.Value = 'none';
                app.ThetaFilterModeDropDown_EnvViewerLabel.Visible = 'off';
                
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: AlphaCheckBox
        function AlphaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'alpha', app.AlphaCheckBox.Value);
            
        end

        % Value changed function: SigmaArtifact, SigmaCheckBox
        function SigmaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'sigma', app.SigmaCheckBox.Value);
            
        end

        % Value changed function: BetaCheckBox
        function BetaCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'beta', app.BetaCheckBox.Value);
            
        end

        % Value changed function: GammalowCheckBox
        function GammalowCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'gammalow', app.GammalowCheckBox.Value);
            
        end

        % Value changed function: FullbandCheckBox
        function FullbandCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'fullband', app.FullbandCheckBox.Value);
            
        end

        % Value changed function: SleepbandCheckBox
        function SleepbandCheckBoxValueChanged(app, event)
            
            app = bandCheckboxChanged(app, 'sleepband', app.SleepbandCheckBox.Value);
            
        end

        % Value changed function: CustomRerefEditField, 
        % ForcerecreationofEEGLABsetfilesCheckBox
        function ForcerecreationofEEGLABsetfilesCheckBoxValueChanged(app, event)
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Selection changed function: RereferenceEEGDatatoButtonGroup
        function RereferenceEEGDatatoButtonGroupSelectionChanged(app, event)
            selectedButton = app.RereferenceEEGDatatoButtonGroup.SelectedObject;
            
            if selectedButton == app.CustomRerefButton
                app.CustomRerefEditField.Enable = 'on';
            else
                app.CustomRerefEditField.Enable = 'off';
            end
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: AllBandsButton
        function AllBandsButtonPushed(app, event)
            app.SubdeltaCheckBox.Value = 1;
            app.DeltaCheckBox.Value = 1;
            app.ThetaCheckBox.Value = 1;
            app.AlphaCheckBox.Value = 1;
            app.SigmaCheckBox.Value = 1;
            app.BetaCheckBox.Value = 1;
            app.GammalowCheckBox.Value = 1;
            app.FullbandCheckBox.Value = 1;
            app.SleepbandCheckBox.Value = 1;
            
            app = bandCheckboxChanged(app, 'subdelta', app.SubdeltaCheckBox.Value);
            app = bandCheckboxChanged(app, 'delta', app.DeltaCheckBox.Value);
            app = bandCheckboxChanged(app, 'theta', app.ThetaCheckBox.Value);
            app = bandCheckboxChanged(app, 'alpha', app.AlphaCheckBox.Value);
            app = bandCheckboxChanged(app, 'sigma', app.SigmaCheckBox.Value);
            app = bandCheckboxChanged(app, 'beta', app.BetaCheckBox.Value);
            app = bandCheckboxChanged(app, 'gammalow', app.GammalowCheckBox.Value);
            app = bandCheckboxChanged(app, 'fullband', app.FullbandCheckBox.Value);
            app = bandCheckboxChanged(app, 'sleepband', app.SleepbandCheckBox.Value);
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: AllStagesButton
        function AllStagesButtonPushed(app, event)
            allguibands = {'Subdelta', 'Delta', 'Theta', 'Sigma', 'Alpha', 'Beta', 'Gammalow', 'Fullband', 'Sleepband'};
            allguistages = {'N1', 'N2', 'N3', 'N4', 'R', 'W'};
            
            for bndidx = 1:length(allguibands)
                curband = allguibands{bndidx};
                curbandison = eval(['app.' curband 'CheckBox.Value == 1;']);
                
                if curbandison == 1
                    for stgidx = 1:length(allguistages)
                        curstage = allguistages{stgidx};
                        curstageison = eval(['app.' curband curstage '.Enable;']);
                        
                        if strcmp(curstageison, 'on')
                            eval(['app.' curband curstage '.Value = 1;'])
                        end
                    end
                end
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: 
        % InterpolatemanuallyidentifiedbadchannelsCheckBox
        function InterpolatemanuallyidentifiedbadchannelsCheckBoxValueChanged(app, event)
            value = app.InterpolatemanuallyidentifiedbadchannelsCheckBox.Value;
            
            if value == 1 && strcmp(app.ExperimentnameDropDown.Value, 'MRI-SRT')
                app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Value = 1;
                app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Visible = 'on';
            else
                app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Value = 0;
                app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Visible = 'off';
            end
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: ThetaFilterModeDropDown
        function ThetaFilterModeDropDownValueChanged(app, event)
            value = app.ThetaFilterModeDropDown.Value;
            
            if strcmp(value, 'FIR')
                app.ThetaArtifact.Value = 250;
            elseif strcmp(value, 'cheby1')
                app.ThetaArtifact.Value = 75;
            elseif strcmp(value, 'cheby2')
                app.ThetaArtifact.Value = 75;
            else
                app.ThetaArtifact.Value = 150;
            end
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Selection changed function: HilbertEnvelopesButtonGroup
        function HilbertEnvelopesButtonGroupSelectionChanged(app, event)
            selectedButton = app.HilbertEnvelopesButtonGroup.SelectedObject;
            
            if selectedButton == app.CreatenewenvelopefilesButton
                app = setStep3Bands(app, {'delta', 'theta', 'sigma'}, 'othersOn', 1, 1, 1, 1, 1, 1);
                app.FiniteImpulseResponseFIRorderButtonGroup.Visible = 'on';
                app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.Visible = 'on';
                app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Visible = 'on';
                ThetaCheckBoxValueChanged(app);
                
            elseif selectedButton == app.LoadexistingenvelopefilesButton
                app = setStep3Bands(app, {'delta', 'theta', 'sigma'}, 'othersOn', 1, 1, 1, 0, 0, 0);
                app.FiniteImpulseResponseFIRorderButtonGroup.Visible = 'off';
                app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.Visible = 'off';
                app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Visible = 'off';
                app.ThetaFilterModeDropDown.Visible = 'off';
                ThetaCheckBoxValueChanged(app);
                
            end
            
            ThetaFilterModeDropDownValueChanged(app);
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: ImportPSGpowerParametersButton
        function ImportPSGpowerParameterSettingsMenuSelected(app, event)
            if ismac == 0
                [filename, path] = uigetfile('title', 'Select file containing exported PSGpower settings','PSGpower Parameter Export');
            else
                [filename, path] = uigetfile('PSGpower Parameter Export.*', 'Select file containing exported PSGpower settings','PSGpower Parameter Export');
            end
            
            if  filename ~= 0
                load(strcat(path, filename));
                
                if exist('psgpowersettings')
                    %Maybe add a legacy load option if no version string is detected?
                    %If so, call an external script containing RTM's original solution
                elseif exist('PSGpower_settings')
                    if isfield(PSGpower_settings, 'CreatedByVersion')
                        %Check version string here, report error dialog if mismatch. Allow attempted loading anyway if desired.
                        if strcmp(PSGpower_settings.CreatedByVersion, app.PSGpowerVersionLabel.Text)
                            disp(['Current version of PSGpower (' app.PSGpowerVersionLabel.Text ') is the same as that used to export parameters (' PSGpower_settings.CreatedByVersion '), importing previously saved GUI settings...']);
                        else
                            mismatchchoice = questdlg(['The version of PSGpower used to export the chosen parameters (' PSGpower_settings.CreatedByVersion ') does not match the version of PSGpower currently in use (' app.PSGpowerVersionLabel.Text '). Attempting to import these GUI parameters could cause errors. Would you like to try anyway? If so, make sure to check your GUI carefully afterwards!'], 'PSGpower Version mismatch');
                            if ~strcmp(mismatchchoice, 'Yes')
                                return
                            end
                        end
                    end
                    
                    setprops = fields(PSGpower_settings);
                    appprops = properties(app);
                    
                    for p = 2:length(setprops) %Hack to skip CreatedByVersion. Should make this explicit.
                        eval(['curprop = PSGpower_settings.' setprops{p} ';']);
                        if isstruct(curprop)
                            curpropprops = fields(curprop);
                            try
                                if any(strcmp(curpropprops, 'Enable'))
                                    eval(['app.' setprops{p} '.Enable = curprop.Enable;']);
                                end
                                if any(strcmp(curpropprops, 'Visible'))
                                    eval(['app.' setprops{p} '.Visible = curprop.Visible;']);
                                end
                                if ~isempty(strfind(setprops{p}, 'Listbox'))
                                    if any(strcmp(curpropprops, 'Items'))
                                        eval(['app.' setprops{p} '.Items = curprop.Items{1};']);
                                    end
                                end
                                if ~isempty(strfind(setprops{p}, 'TabGroup'))
                                    if any(strcmp(curpropprops, 'SelectedTab'))
                                        tabtoselect = regexprep([curprop.SelectedTab.Title 'Tab'], ' |\(|\)', '');
                                        eval(['app.' setprops{p} '.SelectedTab = app.' tabtoselect ';']);
                                    end
                                end
                                if ~isempty(strfind(setprops{p}, 'ButtonGroup'))
                                    eval(['curappprop = app.' setprops{p} ';']);
                                    if all(strcmp({curappprop.Buttons.Text}, curprop.Buttons.Text))
                                        for rad = 1:length(curprop.Buttons.Value)
                                            eval(['app.' setprops{p} '.Buttons(rad).Value = curprop.Buttons.Value(rad);']);
                                        end
                                    else
                                        uiwait(msgbox(['WARNING! The ' setprops{p} ' radio button choices in the imported parameters file do not match those in the current GUI. This setting will not be loaded, please check it and set it manually.'], 'Parameter mismatch'));
                                    end
                                end
                                if any(strcmp(curpropprops, 'Value'))
                                    eval(['app.' setprops{p} '.Value = curprop.Value;']);
                                end
                            catch
                                disp(['ERROR: Could not import setting ' setprops{p} '. Moving on to next saved setting...']);
                            end
                        else
                            eval(['app.' setprops{p} ' = curprop;']);
                        end
                    end
                end
                
                cd(app.eegrootfolder);
                
                %Update lamp colors. Could instead add saving 'Color' subproperty to the export function. - ABF 2022-04-06
                if ~isempty(app.arbci_settings)
                    app.ARBCISettingsLamp.Color = 'g';
                else
                    app.ARBCISettingsLamp.Color = 'r';
                end
                if ~isempty(app.preproc_settings)
                    app.PreProcessingSettingsLamp.Color = 'g';
                else
                    app.PreProcessingSettingsLamp.Color = 'r';
                end
                if ~isempty(app.tmrtistry_settings)
                    app.TMRtistrySettingsLamp.Color = 'g';
                else
                    app.TMRtistrySettingsLamp.Color = 'r';
                end
                if ~isempty(app.tmrtistry_script)
                    app.TMRtistryCustomScriptLamp.Color = 'g';
                else
                    app.TMRtistryCustomScriptLamp.Color = 'r';
                end
                
                disp('GUI parameter import complete!');
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: ExportPSGpowerParametersButton
        function ExportPSGpowerParameterSettingsMenuSelected(app, event)
            global isanalyze;
            global logdir;
            
            if isanalyze == 0
                path = uigetdir('title', 'Select where to save the current PSGpower settings');
            else
                path = logdir;
            end
            
            if path ~= 0
                props = properties(app);
                PSGpower_settings = [];
                PSGpower_settings.CreatedByVersion = app.PSGpowerVersionLabel.Text;
                
                for p = 1:length(props)
                    eval(['curprop = app.' props{p} ';']);
                    curpropprops = properties(curprop);
                    
                    if any(strcmp(curpropprops, 'Value'))
                        eval(['PSGpower_settings.' props{p} '.Value = curprop.Value;']);
                    end
                    if any(strcmp(curpropprops, 'Enable'))
                        eval(['PSGpower_settings.' props{p} '.Enable = curprop.Enable;']);
                    end
                    if any(strcmp(curpropprops, 'Visible'))
                        eval(['PSGpower_settings.' props{p} '.Visible = curprop.Visible;']);
                    end
                    if ~isempty(strfind(props{p}, 'Listbox'))
                        if any(strcmp(curpropprops, 'Items'))
                            eval(['PSGpower_settings.' props{p} '.Items = {curprop.Items};']);
                        end
                    end
                    if ~isempty(strfind(props{p}, 'TabGroup'))
                        if any(strcmp(curpropprops, 'SelectedTab'))
                            eval(['PSGpower_settings.' props{p} '.SelectedTab = curprop.SelectedTab;']);
                        end
                    end
                    if ~isempty(strfind(props{p}, 'ButtonGroup'))
                        eval(['PSGpower_settings.' props{p} '.Buttons.Value = [curprop.Buttons.Value];']);
                        eval(['PSGpower_settings.' props{p} '.Buttons.Text = {curprop.Buttons.Text};']);
                        eval(['PSGpower_settings.' props{p} '.SelectedObject.Value = [curprop.SelectedObject.Value];']);
                        eval(['PSGpower_settings.' props{p} '.SelectedObject.Text = {curprop.SelectedObject.Text};']);
                    end
                    if isempty(curpropprops)
                        eval(['PSGpower_settings.' props{p} ' = curprop;']);
                    end
                end
                
                if isanalyze == 0
                    save(strcat(path, '\PSGpower Parameter Export'), 'PSGpower_settings');
                else
                    save(strcat(path, '\PSGpower Parameter Export_lastrun'), 'PSGpower_settings');
                end
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: AnalyzeButton
        function AnalyzeButtonPushed(app, event)
            app.AnalyzeButton.FontSize = 12;
            app.AnalyzeButton.Text = 'Analyzing (see command window output for status)....';
            
            % Start the diary log
            global logdir;
            logdir = [app.eegrootfolder 'EEG_GroupOutput/logs/'];
            if exist(logdir,'dir') ~= 7
                mkdir(logdir);
            end
            
            if strcmp(app.AnalysisModuleselectoneDropDown.Value, 'Envelope Viewer')
                diary([logdir 'EnvViewer_log_' datestr(now, 'yyyy-mm-dd_HH-MM-SS') '.txt']);
            else
                diary([logdir 'PSGpower_log_' datestr(now, 'yyyy-mm-dd_HH-MM-SS') '.txt']);
            end
            
            try
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%% PSGPOWER SOFTWARE HOUSEKEEPING
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                global isanalyze;
                isanalyze = 1;
                ExportPSGpowerParameterSettingsMenuSelected(app);
                
                % Output GUI settings to command window (and log) for record - ABF 2022-04-11
                ReportPSGpowerGUISettings(app);
                
                figure(app.UIFigure); % Refocus GUI as main window
                
                % Get dipfit version
                if exist(strrep(which('eeglab'), 'eeglab.m', 'plugins/dipfit2.3'))
                    dipfitstr = 'dipfit2.3';
                elseif exist(strrep(which('eeglab'), 'eeglab.m', 'plugins/dipfit3.6'))
                    dipfitstr = 'dipfit3.6';
                end
                
                % Find PSGpower folders
                psgpowfp = mfilename('fullpath');
                psgpowfp = regexprep(psgpowfp, [mfilename '$'], '');
                modfp = [psgpowfp '/modules/'];
                extfp = [psgpowfp '/externals/'];
                if exist('pow_gettags') ~= 2
                    addpath([modfp]);
                end
                
                % Load MATLAB File Exchange functions
                if exist('distinguishable_colors') ~= 2
                    %Tim Holy (2022). Generate maximally perceptually-distinct colors
                    %(https://www.mathworks.com/matlabcentral/fileexchange/29702-generate-maximally-perceptually-distinct-colors),
                    %MATLAB Central File Exchange.
                    addpath([extfp 'distinguishable_colors']);
                end
                if exist('imwrite2tif') ~= 2
                    %Zhang Jiang (2022). Export image to TIF or TIFF file of selected data type
                    %(https://www.mathworks.com/matlabcentral/fileexchange/30519-export-image-to-tif-or-tiff-file-of-selected-data-type),
                    %MATLAB Central File Exchange.
                    addpath([extfp 'imwrite2tif']);
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%% Translate GUI parameters into legacy/user-friendly variable names
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                
                %%%STEP 1
                chooseexp = app.ExperimentnameDropDown.Value; %Could rename this to expname to simplify briefcase packing later - ABF 2022-04-27 %Note: 'chooseexp' is called in Preproc_Settings.txt, and so should be left with that name. - ABF 2022-05-23
                subsearch = app.IncludesubdirectoriesCheckBox.Value;
                usemontagekey = app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Value;
                if strcmp(usemontagekey, 'Yes')
                    disp(['Loading ' app.eegrootfolder 'PID_Condition_Montage_Key.csv...']);
                    [~,~,montagekey] = xlsread([app.eegrootfolder 'PID_Condition_Montage_Key.csv']);
                end
                
                stgmethod = app.WhatsoftwarewasusedforsleepstagenotationDropDown.Value;
                switch stgmethod
                    case 'SleepSMG/Hume'
                        stgmethod = 'sleepsmg';
                    case 'TWin'
                        stgmethod = 'twin';
                    case 'REMlogic'
                        stgmethod = 'remlogic';
                    case 'None (Experimental)'
                        stgmethod = '';
                end
                
                thinkfs = str2num(app.EEGSamplingFrequencyHzEditField.Value);
                
                %%%STEP 3 (STEP 2 is below, after STEP 4)
                % Determine which bands have been selected
                bands = {'subdelta', 'delta', 'theta', 'alpha', 'sigma', 'beta', 'lowgamma', 'fullband', 'sleepband'};
                userselected_bands = logical([app.SubdeltaCheckBox.Value, ...
                    app.DeltaCheckBox.Value, ...
                    app.ThetaCheckBox.Value, ...
                    app.AlphaCheckBox.Value, ...
                    app.SigmaCheckBox.Value, ...
                    app.BetaCheckBox.Value, ...
                    app.GammalowCheckBox.Value, ...
                    app.FullbandCheckBox.Value, ...
                    app.SleepbandCheckBox.Value]);
                bands(~userselected_bands) = [];
                
                % Use userselected bands to determine bandfreqs
                bandfreqs = {[app.SubdeltaLowLimFreq.Value app.SubdeltaHighLimFreq.Value],...
                    [app.DeltaLowLimFreq.Value app.DeltaHighLimFreq.Value],...
                    [app.ThetaLowLimFreq.Value app.ThetaHighLimFreq.Value],...
                    [app.AlphaLowLimFreq.Value app.AlphaHighLimFreq.Value],...
                    [app.SigmaLowLimFreq.Value app.SigmaHighLimFreq.Value],...
                    [app.BetaLowLimFreq.Value app.BetaHighLimFreq.Value],...
                    [app.GammalowLowLimFreq.Value app.GammalowHighLimFreq.Value],...
                    [app.FullbandLowLimFreq.Value app.FullbandHighLimFreq.Value],...
                    [app.SleepbandLowLimFreq.Value app.SleepbandHighLimFreq.Value]};
                bandfreqs(~userselected_bands) = [];
                fullbw = [app.FullbandLowLimFreq.Value app.FullbandHighLimFreq.Value];
                
                % Use userselected bands to determine bandstgs
                knowntags = {'Stage - No Stage', 'Stage - W', 'Stage - R', 'Stage - N1', 'Stage - N2', 'Stage - N3', 'Stage - N4'};
                tags_id = [2:7];
                Subdelta_tags = tags_id(logical([app.SubdeltaW.Value app.SubdeltaR.Value app.SubdeltaN1.Value app.SubdeltaN2.Value app.SubdeltaN3.Value app.SubdeltaN4.Value])); if isempty(Subdelta_tags); Subdelta_tags = [1]; end
                Delta_tags = tags_id(logical([app.DeltaW.Value app.DeltaR.Value app.DeltaN1.Value app.DeltaN2.Value app.DeltaN3.Value app.DeltaN4.Value]));if isempty(Delta_tags); Delta_tags = [1]; end
                Theta_tags = tags_id(logical([app.ThetaW.Value app.ThetaR.Value app.ThetaN1.Value app.ThetaN2.Value app.ThetaN3.Value app.ThetaN4.Value]));if isempty(Theta_tags); Theta_tags = [1]; end
                Alpha_tags = tags_id(logical([app.AlphaW.Value app.AlphaR.Value app.AlphaN1.Value app.AlphaN2.Value app.AlphaN3.Value app.AlphaN4.Value]));if isempty(Alpha_tags); Alpha_tags = [1]; end
                Sigma_tags = tags_id(logical([app.SigmaW.Value app.SigmaR.Value app.SigmaN1.Value app.SigmaN2.Value app.SigmaN3.Value app.SigmaN4.Value]));if isempty(Sigma_tags); Sigma_tags = [1]; end
                Beta_tags = tags_id(logical([app.BetaW.Value app.BetaR.Value app.BetaN1.Value app.BetaN2.Value app.BetaN3.Value app.BetaN4.Value]));if isempty(Beta_tags); Beta_tags = [1]; end
                Gammalow_tags = tags_id(logical([app.GammalowW.Value app.GammalowR.Value app.GammalowN1.Value app.GammalowN2.Value app.GammalowN3.Value app.GammalowN4.Value]));if isempty(Gammalow_tags); Gammalow_tags = [1]; end
                Fullband_tags = tags_id(logical([app.FullbandW.Value app.FullbandR.Value app.FullbandN1.Value app.FullbandN2.Value app.FullbandN3.Value app.FullbandN4.Value]));if isempty(Fullband_tags); Fullband_tags = [1]; end
                Sleepband_tags = tags_id(logical([app.SleepbandW.Value app.SleepbandR.Value app.SleepbandN1.Value app.SleepbandN2.Value app.SleepbandN3.Value app.SleepbandN4.Value]));if isempty(Sleepband_tags); Sleepband_tags = [1]; end
                
                bandstgs = {Subdelta_tags, Delta_tags, Theta_tags, Alpha_tags, Sigma_tags, Beta_tags, Gammalow_tags, Fullband_tags, Sleepband_tags};
                bandstgs(~userselected_bands) = []; % removes bands that the user did not select from GUI
                
                % Use GUI parameters for band-specific artifact detection thresholds
                sdelta_arthresh = app.SubdeltaArtifact.Value;
                delta_arthresh = app.DeltaArtifact.Value;
                theta_arthresh = app.ThetaArtifact.Value;
                alpha_arthresh = app.AlphaArtifact.Value;
                sigma_arthresh = app.SigmaArtifact.Value;
                beta_arthresh = app.BetaArtifact.Value;
                lowgamma_arthresh = app.GammalowArtifact.Value;
                fullband_arthresh = app.FullbandArtifact.Value;
                sleepband_arthresh = app.SleepbandArtifact.Value;
                
                %%%STEP 4
                rerefmode = app.RereferenceEEGDatatoButtonGroup.SelectedObject.Text;
                runaddlocs = 1; %Initializing these three settings should probably happen elsewhere - ABF 2022-04-27
                runexppreproc = 1;
                runreref = 1;
                
                imgmode = lower(app.ImageModeButtonGroup.SelectedObject.Text);
                
                remakeeegset = app.ForcerecreationofEEGLABsetfilesCheckBox.Value;
                
                doica = app.RunandsaveICAdecompositionsCheckBox.Value;
                if doica == 1
                    rundoica = 1;
                end
                
                bcimode = app.InterpolatemanuallyidentifiedbadchannelsCheckBox.Value;
                if bcimode == 1
                    bcimode = 'Yes';
                    runbci = 1;
                else
                    bcimode = 'No';
                end
                
                usethetabcs = app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Value;
                if usethetabcs == 1
                    usethetabcs = 'Yes';
                else
                    usethetabcs = 'No';
                end
                
                dodownsample = app.DownsampletoHzCheckBox.Value;
                ARBCI_Settings = app.arbci_settings;
                PreProc_Settings = app.preproc_settings;
                
                %%%STEP 2
                module = app.AnalysisModuleselectoneDropDown.Value;
                
                %Translate module-specific GUI parameters
                switch module
                    case 'Hypnogram'
                        hyp_raster = app.HypnogramRasterPlotCheckbox.Value;
                        if hyp_raster == 1 % Change to match legacy expectation
                            hyp_raster = 'Yes';
                        else
                            hyp_raster = 'No';
                        end
                        hyp_shown4 = 'No';
                        
                    case 'Spectra (EEGLAB)'
                        specfreqs = [app.PlotFreqROIHzMinimumEditField.Value app.PlotFreqROIHzMaximumEditField.Value];
                        spec60filt = app.Apply60HznotchfilterbeforegeneratingspectraCheckBox.Value;
                        
                        if strcmp(app.TimeintervalforspectraButtonGroup.SelectedObject.Text, 'Use all data in selected stages')
                            spectime = {'all'};
                        else
                            spectime = [app.CustomTimeIntervalStart.Value app.CustomTimeIntervalEnd.Value];
                        end
                        
                    case 'Spectra (FieldTrip)'
                        ftspecplotstyle = app.SpectraplotunitsDropDown.Value; %eeglab, abspower, logpower
                        %choosebs = app.FullbandCheckBox.Value;
                        specfreqs = [app.PlotFreqROIMinimumEditField_FT.Value app.PlotFreqROIMaximumEditField_FT.Value];
                        spec60filt = app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT.Value;
                        fts_winlength = app.WindowlengthsecEditField_FT.Value;
                        fts_winoverlap = app.WindowoverlapproportionEditField_FT.Value;
                        
                        if strcmp(app.TimeintervalforspectraButtonGroup_FT.SelectedObject.Text, 'Use all data in selected stages')
                            spectime = {'all'};
                        else
                            spectime = [app.CustomTimeIntervalStart_FT.Value app.CustomTimeIntervalEnd_FT.Value];
                        end
                        
                        % Warning if ttest2 or stats toolbox isn't present. -
                        % Needs to be a popup message dialogue after checking if
                        % ttest2 exists (RTM)
                        ttest2_present = exist('ttest2');
                        if length(ttest2_present) <1
                            msgbox('Note: Spectra (FieldTrip) cluster-based testing requires the ttest2 function from the MATLAB statistics toolbox, which is not found on your path. The Spectra (FieldTrip) module will crash if you attempt to run cluster-based permutation analyses.', 'Missing ttest2 function!');
                        end
                        
                    case 'Spectra (newtimef)'
                        specfreqs = [app.PlotFreqROIMinimumEditField_ntf.Value app.PlotFreqROIMaximumEditField_ntf.Value];
                        spec60filt = app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf.Value;
                        
                        if strcmp(app.TimeintervalforspectraButtonGroup_ntf.SelectedObject.Text, 'Use all data in selected stages')
                            spectime = {'all'};
                        else
                            spectime = [app.CustomTimeIntervalStart_ntf.Value app.CustomTimeIntervalEnd_ntf.Value];
                        end
                        
                    case 'Power (Hilbert)'
                        if app.CreatenewenvelopefilesButton.Value == 1
                            makeenvelopes = 1;
                            dohilblp = app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Value;
                        else
                            makeenvelopes = 0;
                        end
                        choosefirord = app.FiniteImpulseResponseFIRorderButtonGroup.SelectedObject.Text;
                        switch choosefirord
                            case 'Hardcoded Default'
                                choosefirord = 'Hardcoded';
                            case "Cohen's Algorithm"
                                choosefirord = 'Algorithm';
                        end
                        
                        if any(strcmp(bands, 'theta'))
                            thetamode = lower(app.ThetaFilterModeDropDown.Value);
                        else
                            thetamode = 'none';
                        end
                        
                    case 'Power (newtimef)'
                        perfar = app.RejectartifactsfirstCheckBox.Value;
                        ntfnfreqs = app.ofFrequencies5shortrecommended50mid999longEditField.Value;
                        ntftbs = app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField.Value;
                        
                    case 'Spindle Detection (Ferrarelli)'
                        doresampling = app.Resampleto128HzCheckBox.Value;
                        bldrlowpass = app.Lowpasssigmaenvelopeat2HzCheckBox.Value;
                        visualizedata = app.DrawstagesofwaveformabstractionforFerrarellimethodCheckBox.Value;
                        lower_thresh_ratio = app.FerrarelliThresholdLow.Value;
                        upper_thresh_ratio = app.FerrarelliThresholdHigh.Value;
                        
                        uiwait(msgbox({'If you use this module for any academic purpose, please be sure to cite the following papers in your work:';...
                            '';'Ferrarelli, F., Huber, R., Peterson, M. J., Massimini, M., Murphy, M., Riedner, B. A., Watson, A., Bria, P., & Tononi, G. (2007). Reduced sleep spindle activity in schizophrenia patients. The American Journal of Psychiatry, 164(3), 483–492. https://doi.org/10.1176/ajp.2007.164.3.483';...
                            '';'McClain, I. J., Lustenberger, C., Achermann, P., Lassonde, J. M., Kurth, S., & LeBourgeois, M. K. (2016). Developmental changes in sleep spindle characteristics and sigma power across early childhood. Neural Plasticity, 2016, 3670951. https://doi.org/10.1155/2016/3670951'},...
                            'Citations required','modal'));
                        
                    case 'PAC (Muehlroth)'
                        %%Pull/translate any Muehlroth-specific GUI settings here - ABF 2022-02-23
                        
                    case 'TMRtistry (WIP)'
                        TMRtistry_Settings = app.tmrtistry_settings;
                        TMRtistry_Script = app.tmrtistry_script;
                                    
                    case 'Envelope Viewer'
                        % Establish stagelist for Envelope Viewer code
                        stagelist = {'W', 'R', 'N1', 'N2', 'N3'};
                        
                        blchoice = app.BaselineRemovalChoiceCheckBox.Value;
                        if blchoice == 1
                            blchoice = 'Yes';
                        else
                            blchoice = 'No';
                        end
                        blremwind = app.BaselineRemovalWindowLengthNumericEditField.Value;
                        
                        gblchoice = app.GlobalBaslineRemovalChoiceCheckBox.Value;
                        if gblchoice == 1
                            gblchoice = 'Yes';
                        else
                            gblchoice = 'No';
                        end
                        
                        archoice = app.ArtifactNaNChoiceCheckBox.Value;
                        if archoice == 1
                            archoice = 'Yes';
                        else
                            archoice = 'No';
                        end
                        
                        omitempties = app.OmitEmptyEnvelopesCheckBox.Value;
                        if omitempties == 1
                            omitempties = 'yes'; % match the original penviewer code
                        else
                            omitempties = 'no';
                        end
                        
                        clnmeth = app.ArtifactChoiceDropdown.Value;
                        medsmoothwind = app.MedianSmoothWindowNumericEditField.Value;
                        
                        avgacross = app.AverageenvelopesacrossButtonGroup.SelectedObject.Text;
                        if strcmp(avgacross, 'chans')
                            statsmethod = app.QuantifyenvelopesButtonGroup.SelectedObject.Text;
                        elseif strcmp(avgacross, 'time')
                            statsmethod = 'kurth';
                        end
                        truemeasure = app.WhatenvelopetypeButtonGroup.SelectedObject.Text;
                        collatenew = app.CollateorloadenvelopesButtonGroup.SelectedObject.Text;
                        temporalroi = [app.EnvViewerTempROILowNumericEditField.Value app.EnvViewerTempROIHighNumericEditField.Value];
                        if any(temporalroi == 999)
                            temporalroi = 'all';
                        end
                        
                        srate = str2num(app.EEGSamplingFrequencyHzEditField.Value);
                        
                        if any(strcmp(bands, 'theta'))
                            thetamode = lower(app.ThetaFilterModeDropDown_EnvViewer.Value);
                        else
                            thetamode = 'none';
                        end
                        
                    case 'Spectrogram Viewer'
                        data_nfreqs = app.HowmanyfrequenciesEditField.Value;
                        data_elec = app.WhatelectrodeEditField.Value;
                        
                        %Should pop up a message at least saying that only the first selected band will be used (or enable multiband processing, or restrict GUI selection to one band) - ABF 2022-02-16
                        if length(bands) == 1
                            data_band = bands{1};
                        else
                            error('ERROR: Spectrogram Viewer only supports a single band selection. Please return to the GUI, select only a single band, and try again.');
                        end
                        
                        if app.SavetifsCheckBox.Value == 1
                            savetifs = 'yes';
                        elseif app.SavetifsCheckBox.Value == 0
                            savetifs = 'no';
                        end
                        if app.SavetifmetasCheckBox.Value == 1
                            savetifmetas = 'yes';
                        elseif app.SavetifmetasCheckBox.Value == 0
                            savetifmetas = 'no';
                        end
                end
                
                %Initialize settings specific to spectral vs. non-spectral modules
                if strfind(lower(module), 'spectra')
                    if length(bands) == 1
                        eval(['curband_tags = ', upper(bands{1}(1)), lower(bands{1}(2:end)), '_tags;'])
                    else
                        error('ERROR: Spectra methods only support a single band selection. Somehow you are trying to run a spectra method with more than one band selected; please return to the GUI, select only a single band, and try again.');
                    end
                    spectimestg = strrep(knowntags([1 curband_tags]),' ', '');
                elseif isempty(strfind(lower(module), 'spectra'))
                    % Band-specific staging
                    for b = 1:length(bands)
                        eval([bands{b} 'stages = bandstgs{b};']);
                        eval([bands{b} 'stages = strrep(knowntags(' bands{b} 'stages),'' '', '''');']);
                    end
                    clear b;
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%% Experiment-specific setup
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                switch app.ExperimentnameDropDown.Value
                    case 'ADHD_SE_ABF'
                        % Night key Experiment-specific switch case
                        [~,~,nightkey] = xlsread([app.eegrootfolder 'PID-Night_Key.csv']);
                        nightkey(2:end,3) = cellfun(@num2str, nightkey(2:end, 3), 'UniformOutput', 0);
                        nightkey(2:end,5) = cellfun(@num2str, nightkey(2:end, 5), 'UniformOutput', 0);
                        for r = 1:size(nightkey,1)
                            if length(nightkey{r,3}) == 5
                                nightkey{r,3} = ['0' nightkey{r,3}];
                            end
                            if length(nightkey{r,5}) == 5
                                nightkey{r,5} = ['0' nightkey{r,5}];
                            end
                        end
                    otherwise
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%% Run ARBCI_Settings file
                %%%%%%%%%%%%%%%%%%%%%%%%%%%
                if ~isempty(ARBCI_Settings)
                    eval(ARBCI_Settings)
                else
                    if strcmp(bcimode, 'Yes')
                        warning('Bad channel information was not found. Please use the "BCI Settings: Import" button in the GUI to select the text file containing bad channel information.')
                        waitfor(msgbox('Bad channel information was not found. Please use the "BCI Settings: Import" button in the GUI to select the text file containing bad channel information.'))
                        return
                    end
                    pidbcichans = [];
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%% MAIN PROCESSING ROUTINE
                %%%%%%%%%%%%%%%%%%%%%%%%%%%
                otic = tic; %Start processing timer
                errs = []; %Init error catching variable
                figure(app.UIFigure); % Refocus GUI as main window
                
                %This conditional differentiates between modules that process data and modules that view previously processed data. - ABF 2022-02-23
                if ~any(strcmp(module, {'Envelope Viewer', 'Spectrogram Viewer'}))
                    
                    %%%%%%%%%%%%%%%%%%%%%%%%%%
                    %%% LOOP OVER PARTICIPANTS
                    %%%%%%%%%%%%%%%%%%%%%%%%%%
                    for sub = 1:length(app.eegfiles)
                        
                        %Adjust eegfp and eegfn to account for whether EEG file is in a subfolder - ABF 2019-03-27
                        if any(strfind(app.eegfiles{sub}, '/'))
                            eegfileparts = strsplit(app.eegfiles{sub}, '/');
                            eegfp = [strjoin(eegfileparts(1:length(eegfileparts)-1), '/'), '/'];
                            eegfn = eegfileparts{length(eegfileparts)};
                        else
                            eegfp = app.eegrootfolder;
                            eegfn = app.eegfiles{sub};
                        end
                        
                        %Load current participant settings from montage key if present
                        if exist('montagekey')
                            mkpidparts = strsplit(eegfn, '_');
                            mkpidparts = [mkpidparts(1:length(mkpidparts)-1), strsplit(mkpidparts{length(mkpidparts)}, '.')];
                            mkpidcol = find(strcmp(montagekey(1,:), 'PID'));
                            mkscorcol = find(strcmp(montagekey(1,:), 'Scoring'));
                            mkcondcols = find(~strcmp(montagekey(1,:), 'PID') & ~strcmp(montagekey(1,:), 'Scoring'));
                            
                            mkcurrow = find(strcmp(montagekey(:,mkpidcol), mkpidparts{1}));
                            mkcurcol = find(strcmp(montagekey(1,:), mkpidparts{2}));
                            
                            stgmethod = lower(montagekey{mkcurrow, mkscorcol});
                            montageused = lower(montagekey{mkcurrow, mkcurcol});
                        end
                        
                        setfp = [eegfp 'SETs/'];
                        if ~exist(setfp,'dir')
                            mkdir(setfp);
                        end
                        
                        ptic = tic;
                        pid = regexprep(eegfn, '\.edf|\.EDF|\.vhdr', '');
                        
                        %Identify which staging file to use, skip participant if none exists
                        if ~strcmp(stgmethod, '') %Allow hidden option of running without staging info - ABF 2020-07-01
                            curstgidx = find(~cellfun(@isempty, strfind(app.stgfiles, [pid '.'])));
                            if isempty(curstgidx)
                                curstgidx = find(~cellfun(@isempty, strfind(app.stgfiles, [pid '_Notations.'])));
                                if isempty(curstgidx)
                                    disp(['ERROR: No notation file found for ' eegfn '! Skipping data file...']);
                                    continue
                                end
                            end
                            if length(curstgidx) > 1
                                whichstg = listdlg('PromptString', sprintf('The following stage notation files were found. Which of these do you want to use?'),...
                                    'SelectionMode', 'multiple', 'Name', 'Which EEG files?', 'ListSize', [500 300], 'ListString', app.stgfiles(curstgidx));
                                curstgidx = curstgidx(whichstg);
                            end
                        end
                        
                        %Import or load EEG data
                        if remakeeegset == 1 || exist([setfp pid '.set']) ~= 2 %Start from scratch
                            %Reset EEGLAB and ERPLAB data structures
                            ALLEEG = [];
                            ALLERP = [];
                            EEG = [];
                            ERP = [];
                            STUDY = [];
                            CURRENTSET = 0;
                            CURRENTERP = 0;
                            CURRENTSTUDY = 0;
                            ALLCOM = {};
                            ALLERPCOM = {};
                            
                            %Import EEG data to EEGLAB
                            %app.AnalyzeButton.Text = 'Loading EEG data...';
                            progfig = uifigure; progdlg = uiprogressdlg(progfig, 'Title', ['Importing ' eegfn '...'], 'Indeterminate', 'On');
                            if regexp(lower(eegfn), '\.edf$')
                                EEG = pop_biosig([eegfp eegfn], 'importevent', 'off');
                                [ALLEEG EEG CURRENTSET] = pop_newset(ALLEEG, EEG, 0,'setname',eegfn,'gui','off');
                            elseif regexp(lower(eegfn), '\.vhdr$')
                                EEG = pop_loadbv(eegfp, eegfn);
                                [ALLEEG EEG CURRENTSET] = pop_newset(ALLEEG, EEG, 0,'setname',eegfn,'gui','off');
                            end
                            %app.AnalyzeButton.Text = 'EEG data loaded!';
                            close(progfig);
                            srate_orig = EEG.srate;
                            srate = srate_orig;
                            
                            %Downsample high srate data if requested
                            if dodownsample == 1
                                %app.AnalyzeButton.Text = 'Downsampling EEG...';
                                disp(['Downsampling EEG data to ' num2str(app.DownsampledFrequencyNumericEditField.Value) ' Hz...']);
                                progfig = uifigure; progdlg = uiprogressdlg(progfig, 'Title', ['Downsampling ' eegfn ' from ' num2str(thinkfs) ' to ' num2str(app.DownsampledFrequencyNumericEditField.Value) ' Hz...'], 'Indeterminate', 'On');
                                EEG = pop_resample(EEG, app.DownsampledFrequencyNumericEditField.Value);
                                [ALLEEG EEG CURRENTSET] = pop_newset(ALLEEG, EEG, 1,'overwrite','on','gui','off');
                                srate_ds = app.DownsampledFrequencyNumericEditField.Value;
                                srate = srate_ds;
                                close(progfig);
                            else
                                srate_ds = [];
                            end
                            
                            %%%Load tag info
                            %Fill briefcase for pow_gettags
                            tagpow.stgmethod = stgmethod;
                            tagpow.stgfiles = app.stgfiles;
                            tagpow.curstgidx = curstgidx;
                            tagpow.eegfp = eegfp;
                            tagpow.eegfn = eegfn;
                            tagpow.dodownsample = dodownsample;
                            tagpow.srate_orig = srate_orig;
                            tagpow.srate_ds = srate_ds;
                            tagpow.extfp = extfp;
                            tagpow.knowntags = knowntags;
                            
                            tags = pow_gettags(tagpow);
                            
                            %Add in TMR cue events if present
                            if ~strcmp(stgmethod, '')
                                cuetagtypes = {''};
                                if ~exist('module') || strcmp(module, 'TMRtistry (WIP)')
                                    if length(TMRtistry_Settings) > 0
                                        eval(TMRtistry_Settings)
                                    else
                                        warning('TMRtistry_Settings file was not found. Please use the "Import... --> TMRtistry Settings" GUI button to select the appropriate text file.')
                                    end
                                end
                            end
                            
                            % Write tag information into EEGLAB .set
                            if ~strcmp(stgmethod, '')
                                %Write processed stage notations out to a temporary text file for
                                %importing as EEG events.
                                outfid = fopen([eegfp 'temp.txt'], 'w+');
                                fprintf(outfid, '%s\t%s\n', 'latency', 'type');
                                for row = 1:size(tags,1)
                                    fprintf(outfid, '%s\t%s\n', num2str(tags{row,2}),  strrep(tags{row,1}, ' ', ''));
                                end
                                fclose(outfid);
                                
                                %Import temporary stage notation text file as EEG events.
                                EEG = pop_importevent( EEG, 'event',[eegfp 'temp.txt'],'fields',{'latency' 'type'},'skipline',1,'timeunit',NaN);
                                [ALLEEG EEG] = eeg_store(ALLEEG, EEG, CURRENTSET);
                                delete([eegfp 'temp.txt']);
                            end
                            
                            %Save EEGLAB format .set/.fdt files
                            EEG = pop_saveset( EEG, 'filename', [pid '.set'], 'filepath', setfp);
                            
                        else %Load a saved preprocessed dataset
                            %Clear preprocessing step run flags
                            runaddlocs = 0;
                            runexppreproc = 0;
                            runreref = 0;
                            rundoica = 0;
                            runbci = 0;
                            if dodownsample == 1
                                srate_ds = app.DownsampledFrequencyNumericEditField.Value;
                            else
                                srate_ds = [];
                            end
                            
                            %Determine which file to load
                            procstring = '';
                            if exist([setfp pid procstring '_reref.set']) == 2
                                procstring = [procstring '_reref'];
                                if doica == 1
                                    if exist([setfp pid procstring '_ica.set']) == 2
                                        procstring = [procstring '_ica'];
                                    else
                                        rundoica = 1;
                                    end
                                end
                                if strcmp(bcimode, 'Yes') && ~isempty(find(strcmp(pid, pidbcichans(:,1))))
                                    if exist([setfp pid procstring '_bci.set']) == 2
                                        procstring = [procstring '_bci'];
                                    else
                                        runbci = 1;
                                    end
                                end
                            else
                                runaddlocs = 1;
                                runexppreproc = 1;
                                runreref = 1;
                            end
                            
                            %Load appropriate EEG file
                            disp(['Loading EEG file ' setfp pid procstring '.set...' ]);
                            ALLEEG = [];
                            EEG = [];
                            CURRENTSET = [];
                            ALLCOM = [];
                            EEG = pop_loadset('filename',[pid procstring '.set'],'filepath',setfp);
                            
                            %Check whether requested reference was used. If not, redo preprocessing.
                            %Find mastoids
                            leftmast = find(strcmp({EEG.chanlocs.labels}, 'M1'));
                            rightmast = find(strcmp({EEG.chanlocs.labels}, 'M2'));
                            if isempty(leftmast)
                                leftmast = find(strcmp({EEG.chanlocs.labels}, 'A1'));
                            end
                            if isempty(rightmast)
                                rightmast = find(strcmp({EEG.chanlocs.labels}, 'A2'));
                            end
                            
                            disp('Calculating likelihood of averaged mastoid reference...');
                            probavgmast = sum(round(EEG.data(leftmast,:),4) == -round(EEG.data(rightmast,:),4)) / EEG.pnts;
                            disp(['Left mastoid is the perfect inverse of right mastoid ' num2str(probavgmast * 100) '% of the time (EEG rounded to 4 sig figs)']);
                            runscratchload = 0;
                            if probavgmast >= 0.75
                                if strcmp(app.RereferenceEEGDatatoButtonGroup.SelectedObject.Text, 'AvgMast')
                                    disp('Assuming high inverse correlation of left/right mastoids means loaded data have averaged mastoid reference as requested, continuing...');
                                else
                                    disp(['High inverse correlation of mastoid channels in loaded data is suspicious for requested reference ' rerefmode '. Loading un-rereferenced dataset and re-doing preprocessing.']);
                                    runscratchload = 1;
                                end
                            else
                                if strcmp(app.RereferenceEEGDatatoButtonGroup.SelectedObject.Text, 'AvgMast')
                                    disp('Inverse correlation of left/right mastoids is too low in loaded data for averaged mastoid reference. Reperforming preprocessing...')
                                    runscratchload = 1;
                                end
                            end
                            
                            if runscratchload == 1
                                ALLEEG = [];
                                EEG = [];
                                CURRENTSET = [];
                                ALLCOM = [];
                                EEG = pop_loadset('filename',[pid '.set'],'filepath',setfp);
                                
                                procstring = '';
                                runaddlocs = 1;
                                runexppreproc = 1;
                                runreref = 1;
                                if doica == 1
                                    rundoica = 1;
                                end
                                if strcmp(bcimode, 'Yes') && ~isempty(find(strcmp(pid, pidbcichans(:,1))))
                                    runbci = 1;
                                end
                            end
                            srate_orig = EEG.srate;
                            srate = srate_orig;
                            
                            %%%Load tag info
                            %Fill briefcase for pow_gettags
                            tagpow.stgmethod = stgmethod;
                            tagpow.stgfiles = app.stgfiles;
                            tagpow.curstgidx = curstgidx;
                            tagpow.eegfp = eegfp;
                            tagpow.eegfn = eegfn;
                            tagpow.dodownsample = dodownsample;
                            tagpow.srate_orig = srate_orig;
                            tagpow.srate_ds = srate_ds;
                            tagpow.extfp = extfp;
                            tagpow.knowntags = knowntags;
                            
                            tags = pow_gettags(tagpow);
                            
                            %Load TMRtistry settings if appropriate
                            if ~exist('cuetagtypes')
                                cuetagtypes = {''};
                                if ~exist('module') || strcmp(module, 'TMRtistry (WIP)')
                                    if length(TMRtistry_Settings) > 0
                                        eval(TMRtistry_Settings)
                                    else
                                        warning('TMRtistry_Settings file was not found. Please use the "Import... --> TMRtistry Settings" GUI button to select the appropriate text file.')
                                    end
                                end
                            end
                        end
                        
                        if runaddlocs == 1 && isempty(EEG.chanlocs)
                            %Create temporary copy of data to use for channel location lookup
                            forlocs = EEG;
                            if any(strfind(lower(eegfn), '.edf'))
                                %Split channel names from reference channel names (NOTE: THIS IS
                                %DESIGNED AROUND TWIN CHANNEL NAMING CONVENTIONS AND NEEDS TO BE
                                %UPDATED FOR COMPATIBILITY WITH BV SAVED .EDFs)
                                for l = 1:length(forlocs.chanlocs)
                                    forlocs.chanlocs(l).labels = strsplit(forlocs.chanlocs(l).labels, '-');
                                    forlocs.chanlocs(l).labels = forlocs.chanlocs(l).labels{1};
                                end
                            elseif any(strfind(lower(eegfn), '.vhdr'))
                                %
                            end
                            %Lookup channel locations based on channel names
                            forlocs=pop_chanedit(forlocs, 'lookup',strrep(which('eeglab'), 'eeglab.m', ['plugins/', dipfitstr, '/standard_BESA/standard-10-5-cap385.elp']),...
                                'save',[setfp, pid, '.ced']);
                            %Port identified channel locations back to main EEG data
                            for l = 1:length(EEG.chanlocs)
                                EEG.chanlocs(l).ref= forlocs.chanlocs(l).ref;
                                EEG.chanlocs(l).theta= forlocs.chanlocs(l).theta;
                                EEG.chanlocs(l).radius= forlocs.chanlocs(l).radius;
                                EEG.chanlocs(l).X= forlocs.chanlocs(l).X;
                                EEG.chanlocs(l).Y= forlocs.chanlocs(l).Y;
                                EEG.chanlocs(l).Z= forlocs.chanlocs(l).Z;
                                EEG.chanlocs(l).sph_theta= forlocs.chanlocs(l).sph_theta;
                                EEG.chanlocs(l).sph_phi= forlocs.chanlocs(l).sph_phi;
                                EEG.chanlocs(l).sph_radius= forlocs.chanlocs(l).sph_radius;
                                EEG.chanlocs(l).type= forlocs.chanlocs(l).type;
                                EEG.chanlocs(l).urchan= forlocs.chanlocs(l).urchan;
                            end
                            clear forlocs
                        end
                        
                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        %%% Run PreProc_Settings file (custom preprocessing)
                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        stepout = 0;
                        if (runexppreproc == 1)
                            % Update user on current progress
                            app.AnalyzeButton.FontSize = 12;
                            app.AnalyzeButton.Text = 'Running custom preprocessing...';
                            
                            montisknown = 0;
                            
                            if length(PreProc_Settings) > 1
                                eval(PreProc_Settings)
                            else
                                warning('Custom preprocessing settings were not found. Please use the "Preprocessing Settings: Import" button to select the appropriate text file.')
                                waitfor(msgbox('Custom preprocessing settings were not found. Please use the "Preprocessing Settings: Import" button to select the appropriate text file.'));
                                stepout = 1;
                            end
                        end
                        
                        if stepout == 1 % replaced all continues with assigning stepout as 1. issues with using continue command in eval(txtfile). -RTM
                            continue
                        end
                        
                        %%%Perform experiment-agnostic preprocessing
                        %Double-check sampling rate
                        if srate ~= EEG.srate
                            error(['ERROR: Provided sample rate (' num2str(srate) ' Hz) is different from actual sample rate (' num2str(EEG.srate) ' Hz). Run again using the correct sampling rate.']);
                        end
                        
                        %Check electrode montage against other recordings in dataset
                        if ~exist('checkchannum')
                            checkchannum = EEG.nbchan;
                        end
                        if ~exist('checkchanlist')
                            checkchanlist = {EEG.chanlocs.labels};
                        end
                        if EEG.nbchan == checkchannum
                            if ~all(strcmp(checkchanlist, {EEG.chanlocs.labels}))
                                warnstring = ['Recording ' eegfn ' does not have the same electrode montage as the first recording in this dataset, which means re-referencing and other steps in this program may behave in unexpected ways. CHECK YOUR DATA MANUALLY to find out what is going on! - ABF'];
                                warning(warnstring);
                                uiwait(msgbox(warnstring));
                            end
                        else
                            warnstring = ['Recording ' eegfn ' does not have the same number of electrodes as the first recording in this dataset, which means re-referencing and other steps in this program may behave in unexpected ways. CHECK YOUR DATA MANUALLY to find out what is going on! - ABF'];
                            warning(warnstring);
                            uiwait(msgbox(warnstring));
                        end
                        
                        %Find mastoids
                        leftmast = find(strcmp({EEG.chanlocs.labels}, 'M1'));
                        rightmast = find(strcmp({EEG.chanlocs.labels}, 'M2'));
                        if isempty(leftmast)
                            leftmast = find(strcmp({EEG.chanlocs.labels}, 'A1'));
                        end
                        if isempty(rightmast)
                            rightmast = find(strcmp({EEG.chanlocs.labels}, 'A2'));
                        end
                        
                        %%%RE-REFERENCING
                        if runreref == 1
                            %Implement chosen re-referencing scheme
                            if strcmp(rerefmode, 'AvgMast')
                                refstring = ['(ch' num2str(leftmast) ' + ch' num2str(rightmast) ')'];
                                numrefchans = 2;
                                %Write re-referencing equations out to temporary text file for use by pop_eegchanoperator.
                                outfid = fopen([eegfp 'tempreref.txt'], 'w+');
                                for row = 1:EEG.nbchan
                                    fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ( ' refstring '/' num2str(numrefchans) ' ) Label ' EEG.chanlocs(row).labels]);
                                end
                                fclose(outfid);
                            elseif strcmp(rerefmode, 'ContraMast')
                                warning('Contralateral mastoid re-referencing selected. This program will extract the number (or z) from EEG electrode labels, then use that to determine whether the left or right mastoid is contralateral. For midline electrodes, it alternates between left/right mastoids. EMG and EOG electrodes are not re-referenced using this setting. - ABF 2019-06-25')
                                chlist = {EEG.chanlocs.labels};
                                chlist_suf = cellfun(@(x) x(length(x)), chlist, 'UniformOutput', 0);
                                noneeg = [find(~cellfun(@isempty, strfind(lower(chlist), 'eog'))) find(~cellfun(@isempty, strfind(lower(chlist), 'chin')))];
                                lefthem_list = find(ismember(lower(chlist_suf), {'1', '3', '5', '7', '9', '11', '13', '15', '17', '19'}));
                                lefthem_list = setdiff(lefthem_list, [leftmast noneeg]);
                                righthem_list = find(ismember(lower(chlist_suf), {'2', '4', '6', '8', '10', '12', '14', '16', '18', '20'}));
                                righthem_list = setdiff(righthem_list, [rightmast noneeg]);
                                midline_list = find(strcmpi(chlist_suf, 'z'));
                                
                                %Write re-referencing equations out to temporary text file for use by pop_eegchanoperator.
                                outfid = fopen([eegfp 'tempreref.txt'], 'w+');
                                zcount = 0;
                                for row = 1:EEG.nbchan
                                    if any(row == lefthem_list)
                                        fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ch' num2str(leftmast) ' Label ' EEG.chanlocs(row).labels]);
                                    elseif any(row == righthem_list)
                                        fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ch' num2str(rightmast) ' Label ' EEG.chanlocs(row).labels]);
                                    elseif any(row == midline_list)
                                        zcount = zcount + 1;
                                        if mod(zcount, 2) == 0
                                            fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ch' num2str(leftmast) ' Label ' EEG.chanlocs(row).labels]);
                                        elseif mod(zcount, 2) == 1
                                            fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ch' num2str(rightmast) ' Label ' EEG.chanlocs(row).labels]);
                                        end
                                    else
                                        fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' Label ' EEG.chanlocs(row).labels]);
                                    end
                                end
                                fclose(outfid);
                            elseif strcmp(rerefmode, 'Custom')
                                %Let user select as many electrodes as she/he wants, then
                                %note the labels and the number of channels. Build a ref string
                                %similar to avg mast above, and divide by numrefchans.
                                %Make sure to only have this run for the first participant. Maybe implement
                                %some sort of global tracker to notify user if different participants have
                                %different montages. - ABF 2019-06-05
                                if custrefexist == 0
                                    refchans = listdlg('PromptString', 'Choose your reference channel(s):', 'SelectionMode', 'multiple',...
                                        'ListString', {EEG.chanlocs.labels}, 'Name', 'Custom reference', 'ListSize', [250 300]);
                                    refchans = {EEG.chanlocs(refchans).labels};
                                    numrefchans = length(refchans);
                                    custrefexist = 1;
                                end
                                %Find reference electrode indices for current file, set reference string
                                refindices = find(ismember({EEG.chanlocs.labels}, refchans));
                                refstring = ['(ch' num2str(refindices(1))];
                                if numrefchans > 1
                                    for chan = 2:numrefchans
                                        refstring = [refstring ' + ch' num2str(refindices(chan))];
                                    end
                                end
                                refstring = [refstring ')'];
                                %Write re-referencing equations out to temporary text file for use by pop_eegchanoperator.
                                outfid = fopen([eegfp 'tempreref.txt'], 'w+');
                                for row = 1:EEG.nbchan
                                    fprintf(outfid, '%s\n', ['nch' num2str(row) ' = ch' num2str(row) ' - ( ' refstring '/' num2str(numrefchans) ' ) Label ' EEG.chanlocs(row).labels]);
                                end
                                fclose(outfid);
                            end
                            
                            %Re-reference EEG data
                            app.AnalyzeButton.Text = 'Re-referencing data';
                            EEG = pop_eegchanoperator( EEG, [eegfp 'tempreref.txt'], 'ErrorMsg', 'popup', 'Warning', 'on' ); %<-- Takes an excessively long time. Alternate faster approaches? Any reason not to manually re-reference?- ABF 2022-04-21
                            delete([eegfp 'tempreref.txt']);
                            %Re-add channel locations after re-referencing
                            EEG=pop_chanedit(EEG, 'lookup',[fileparts(which('eeglab')) '/plugins/' dipfitstr '/standard_BESA/standard-10-5-cap385.elp']);
                            
                            %Save tag-added, re-referenced dataset to disk for quality control review #2
                            procstring = '_reref';
                            EEG = pop_saveset( EEG, 'filename', [pid procstring '.set'], 'filepath', setfp);
                        end
                        
                        %Perform ICA decomposition if requested, save dataset with weights
                        if doica == 1
                            if rundoica == 1
                                procstring = [procstring '_ica'];
                                EEG = pop_runica(EEG, 'extended',1,'interupt','on');
                                EEG = pop_saveset( EEG, 'filename', [pid procstring '.set'], 'filepath', setfp);
                            end
                        end
                        
                        %Perform bad channel interpolation if requested, save BCI-applied dataset
                        if strcmp(bcimode, 'Yes')
                            if runbci == 1
                                pidbcirow = find(strcmp(pid, pidbcichans(:,1)));
                                if ~isempty(pidbcirow)
                                    %Find data matrix positions of bad channels
                                    chanstobci = {strsplit(pidbcichans{pidbcirow,2}, '|')};
                                    curbci = [];
                                    for tobci = 1:length(chanstobci{1})
                                        curbci = [curbci find(strcmp(lower({EEG.chanlocs.labels}), lower(chanstobci{1}{tobci})))];
                                    end
                                    
                                    disp(['Interpolating bad channels ' strjoin(chanstobci{1}, ', ') ' for ' pid '...']);
                                    app.AnalyzeButton.Text = 'Running BCI...';
                                    
                                    %Perform interpolation of bad channels
                                    EEG = pop_interp(EEG, curbci, 'spherical');
                                    
                                    %Save tag-added, re-referenced, bad-channel interpolated dataset to disk
                                    procstring = [procstring '_bci'];
                                    EEG = pop_saveset( EEG, 'filename', [pid procstring '.set'], 'filepath', setfp);
                                    app.AnalyzeButton.Text = 'BCI complete!';
                                end
                            end
                        end
                        
                        if subsearch == 1
                            app.cursubdir = strsplit(EEG.filepath, filesep);
                            if length(app.cursubdir) == 1
                                app.cursubdir = strsplit(EEG.filepath, '/');
                            end
                            app.cursubdir = app.cursubdir{end-1};
                            pidstring = [app.cursubdir '-' strrep(EEG.filename, '.set', '')];
                        else
                            pidstring = strrep(EEG.filename, '.set', '');
                        end
                        
                        %%%%%%%%%%%%%%%%%%%%%%%%
                        %%% EEGLAB-BASED MODULES
                        %%%%%%%%%%%%%%%%%%%%%%%%
                        unexcised = EEG;
                        if ~any(strcmp(module,{'Spindle Detection (Ferrarelli)','PAC (Muehlroth)'}))
                            clear tfo;
                            
                            %Extract spectral power using EEGLAB
                            for b = 1:length(bands)
                                try
                                    if strcmp(bands{b}, 'theta') && strcmp(module, 'Power (Hilbert)')
                                        thetamodesuf = thetamode;
                                    else
                                        thetamodesuf = '';
                                    end
                                    
                                    %Reset EEG to full recording (all sleep stages)
                                    EEG = unexcised;
                                    
                                    if ~isempty(strfind(lower(module), 'spectra'))
                                        if ~strcmp(stgmethod, '')
                                            keepstages = spectimestg;
                                        else
                                            keepstages = {'NoStageInfo'};
                                            spectimestg = 'NoStageInfo';
                                        end
                                    else
                                        if ~strcmp(stgmethod, '')
                                            eval(['keepstages = ' bands{b} 'stages;'])
                                        else
                                            keepstages = {'NoStageInfo'};
                                        end
                                        %TODO: THINK ABOUT FREQUENCY BAND SPECIFIC WINDOWING OF THE
                                        %HILBERT ENVELOPE TRANSFORMATION. - ABF 2018-09-12
                                        if strcmp(bands{b}, 'subdelta')
                                            filtorder = 2;
                                            arthresh = sdelta_arthresh;
                                            filtdesign = 'butter';
                                            remdc = 'off';
                                        elseif strcmp(bands{b}, 'delta')
                                            filtorder = 2; %Note: this results in reduced passband gain, but higher orders are not recommended for such low highpasses...
                                            arthresh = delta_arthresh;
                                            filtdesign = 'butter';
                                            remdc = 'off';
                                        elseif strcmp(bands{b}, 'theta')
                                            if strcmp(choosefirord, 'Hardcoded')
                                                filtorder = 164;
                                            elseif strcmp(choosefirord, 'Algorithm')
                                                filtorder = 3*(EEG.srate/bandfreqs{b}(1));
                                            end
                                            arthresh = theta_arthresh;
                                            filtdesign = 'fir';
                                            remdc = 'on';
                                        elseif strcmp(bands{b}, 'alpha')
                                            if strcmp(choosefirord, 'Hardcoded')
                                                filtorder = 164;
                                            elseif strcmp(choosefirord, 'Algorithm')
                                                filtorder = 3*(EEG.srate/bandfreqs{b}(1));
                                            end
                                            arthresh = alpha_arthresh;
                                            filtdesign = 'fir';
                                            remdc = 'on';
                                        elseif strcmp(bands{b}, 'sigma')
                                            if strcmp(choosefirord, 'Hardcoded')
                                                filtorder = 164;
                                            elseif strcmp(choosefirord, 'Algorithm')
                                                filtorder = 3*(EEG.srate/bandfreqs{b}(1));
                                            end
                                            arthresh = sigma_arthresh;
                                            filtdesign = 'fir';
                                            remdc = 'on';
                                        elseif strcmp(bands{b}, 'beta')
                                            filtorder = 3*(EEG.srate/bandfreqs{b}(1));
                                            arthresh = beta_arthresh;
                                            filtdesign = 'fir';
                                            remdc = 'on';
                                        elseif strcmp(bands{b}, 'lowgamma')
                                            filtorder = 3*(EEG.srate/bandfreqs{b}(1));
                                            arthresh = lowgamma_arthresh;
                                            filtdesign = 'fir';
                                            remdc = 'on';
                                        elseif strcmp(bands{b}, 'sleepband')
                                            filtorder = 2;
                                            arthresh = sleepband_arthresh;
                                            filtdesign = 'butter';
                                            remdc = 'off';
                                        elseif strcmp(bands{b}, 'fullband')
                                            filtorder = 2;
                                            arthresh = fullband_arthresh;
                                            filtdesign = 'butter';
                                            remdc = 'off';
                                        end
                                        
                                        %Ensure even FIR filter order
                                        if strcmp(filtdesign, 'fir') && mod(filtorder,2) == 1
                                            filtorder = filtorder + 1;
                                        end
                                    end
                                    
                                    if ~strcmp(stgmethod, '')
                                        %Isolate appropriate sleep stage(s) part 1: identify chosen stages
                                        app.AnalyzeButton.Text = ['Identifying requested sleep stages ' strjoin(keepstages, ', ') ' for ' pid ' (ignoring cue related tags ' strjoin(cuetagtypes, ', ') ')...'];
                                        boundpad = 5;
                                        evs = {EEG.event.type};
                                        hypnochanges = 0;
                                        hcbounds = zeros(1,2);
                                        for ev = 1:length(evs)
                                            if any(strcmp(evs{ev}, keepstages))
                                                if hcbounds(size(hcbounds,1),2) < EEG.event(ev).latency
                                                    hypnochanges = hypnochanges + 1;
                                                    hcbounds(hypnochanges,1) = EEG.event(ev).latency;
                                                    ticker = 1;
                                                    while hcbounds(hypnochanges,2) == 0
                                                        if ev == length(evs) || ev+ticker == length(evs)
                                                            hcbounds(hypnochanges,2) = EEG.pnts-boundpad;
                                                        elseif ~any(strcmp(evs{ev+ticker}, [keepstages cuetagtypes]))
                                                            hcbounds(hypnochanges,2) = EEG.event(ev+ticker).latency;
                                                        else
                                                            ticker = ticker + 1;
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    else
                                        hypnochanges = 1;
                                    end
                                    
                                    %If any chosen stages were identified...
                                    if hypnochanges > 0
                                        if ~strcmp(stgmethod, '')
                                            %Isolate appropriate sleep stage(s) part 2: excise unwanted stages
                                            app.AnalyzeButton.Text = ['Excising EEG from unrequested sleep stages ' strjoin(setdiff(evs, [keepstages cuetagtypes], 'stable'), ', ') ' for ' pid '...'];
                                            if hcbounds(size(hcbounds,1),2)+boundpad < EEG.pnts-1
                                                EEG = pop_select( EEG,'notime',([hcbounds(size(hcbounds,1),2)+boundpad, EEG.pnts-1] ./ EEG.srate));
                                            end
                                            for s2 = size(hcbounds,1):-1:1
                                                if s2 == 1
                                                    if hcbounds(s2,1) <= boundpad
                                                        curexcise = [0, 0];
                                                    else
                                                        curexcise = [0, hcbounds(s2,1)-boundpad];
                                                    end
                                                else
                                                    curexcise = [hcbounds(s2-1,2)+boundpad, hcbounds(s2,1)-boundpad];
                                                end
                                                disp(['Excising data from ' num2str(curexcise(1)./ EEG.srate) ' to ' num2str(curexcise(2)./ EEG.srate) ' seconds...']);
                                                EEG = pop_select( EEG,'notime',(curexcise ./ EEG.srate) );
                                            end
                                        end
                                        
                                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                        % Run per-participant, per-band main module code
                                        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                                        if strcmp(module, 'Hypnogram')
                                            %Load pow structure to carry all needed vars to HYP_PlotHypnograms function
                                            pow = [];
                                            pow.pidstring = pidstring;
                                            pow.EEG = EEG;
                                            pow.hyp_raster = hyp_raster;
                                            pow.hyp_shown4 = hyp_shown4;
                                            pow.eegrootfolder = app.eegrootfolder;
                                            pow.imgmode = imgmode;
                                            
                                            HYP_PlotHypnograms(pow);
                                            
                                        elseif ~isempty(strfind(lower(module), 'spectra'))
                                            if strcmp(module, 'Spectra (newtimef)')
                                                switch app.ExperimentnameDropDown.Value
                                                    case 'EmoPhys'
                                                        EEG = pop_select( EEG,'channel',{'F3' 'F4'});
                                                        EEG = pop_eegchanoperator( EEG, {  'ch3 = (ch1 + ch2) / 2 label F3F4AVG'} ,...
                                                            'ErrorMsg', 'popup', 'Warning', 'on' ); % GUI: 25-Jan-2019 10:21:49
                                                        %figure;
                                                        [curersp{sub}, ~, ~, curtimes{sub}, curfreqs{sub}] = newtimef(EEG.data(3,:), EEG.pnts,...
                                                            [EEG.xmin EEG.xmax].*1000, EEG.srate, [3 0.5],...
                                                            'baseline', [NaN], 'freqs', [0.1 25], 'nfreqs', 2500, 'plotitc' , 'off',...
                                                            'plotphase', 'off', 'ntimesout', 50, 'padratio', 1);
                                                        %figure; plot(curfreqs{sub}, mean(curersp{sub}, 2))
                                                    otherwise
                                                        disp(['Method ' module ' is not defined for experiment ' app.ExperimentnameDropDown.Value '. See Ahren to set up this processing stream.']);
                                                end
                                            else
                                                %%%Run preprocessing code common to EEGLAB and Fieldtrip Spectra methods
                                                %Subset by time
                                                if strcmp(spectime, 'all')
                                                    timelbms = 0;
                                                    timeubms = EEG.pnts*(1000/EEG.srate);
                                                else
                                                    timelbms = (spectime(1) * 60 * 1000);
                                                    timeubms = (spectime(2) * 60 * 1000);
                                                end
                                                
                                                %Optionally apply 60 Hz notch filter
                                                if spec60filt == 1
                                                    EEG  = pop_basicfilter( EEG,  1:EEG.nbchan , 'Boundary', 'boundary', 'Cutoff',  60,...
                                                        'Design', 'notch', 'Filter', 'PMnotch', 'Order',  180, 'RemoveDC', 'on' ); % GUI: 22-Apr-2019 09:44:39
                                                    specfiltflag = '60HzNotch_';
                                                else
                                                    specfiltflag = '';
                                                end
                                                
                                                %Condense ROIs into a string for titles and filenames
                                                if isnumeric(spectime)
                                                    roistring = [regexprep(num2str(spectime), ' .', '-') 'min'];
                                                else
                                                    roistring = [spectime{1} 'min'];
                                                end
                                                roistring = [specfiltflag bcimode 'BCI_' strjoin(strrep(keepstages,'Stage-', ''), '-') '_' roistring];
                                                
                                                %Choose channels for averaged spectra plot
                                                if ~exist('specchans')
                                                    specchans = listdlg('PromptString', 'Calculate avg spectra over which channels?', 'SelectionMode', 'multiple',...
                                                        'ListString', {EEG.chanlocs.labels}, 'Name', 'Avg spectra chans', 'ListSize', [300 300]);
                                                    specchans = {EEG.chanlocs(specchans).labels};
                                                end
                                                
                                                if strcmp(module, 'Spectra (EEGLAB)')
                                                    %Load pow structure to carry all needed vars to SEL_GenerateSpectra function
                                                    pow = [];
                                                    pow.pid = pid;
                                                    pow.EEG = EEG;
                                                    pow.timelbms = timelbms;
                                                    pow.timeubms = timeubms;
                                                    pow.specchans = specchans;
                                                    pow.spectime = spectime;
                                                    pow.specfreqs = specfreqs;
                                                    pow.spec60filt = spec60filt;
                                                    pow.spectimestg = spectimestg;
                                                    pow.procstring = procstring;
                                                    pow.pidbcichans = pidbcichans;
                                                    pow.roistring = roistring;
                                                    pow.eegrootfolder = app.eegrootfolder;
                                                    pow.bcimode = bcimode;
                                                    pow.setfp = setfp;
                                                    pow.imgmode = imgmode;
                                                    if exist('ss_group')
                                                        pow.ss_group = ss_group;
                                                    end
                                                    
                                                    [ss_group, ss_freqs, ssfigpath] = SEL_GenerateSpectra(pow);
                                                    
                                                elseif strcmp(module, 'Spectra (FieldTrip)')
                                                    %Load pow structure to carry all needed vars to SFT_GenerateSpectra function
                                                    pow = [];
                                                    pow.pid = pid;
                                                    pow.EEG = EEG;
                                                    pow.timelbms = timelbms;
                                                    pow.timeubms = timeubms;
                                                    pow.specchans = specchans;
                                                    pow.specfreqs = specfreqs;
                                                    pow.spectime = spectime;
                                                    pow.spec60filt = spec60filt;
                                                    pow.spectimestg = spectimestg;
                                                    pow.fts_winlength = fts_winlength;
                                                    pow.fts_winoverlap = fts_winoverlap;
                                                    pow.ftspecplotstyle = ftspecplotstyle;
                                                    pow.roistring = roistring;
                                                    pow.eegrootfolder = app.eegrootfolder;
                                                    pow.bcimode = bcimode;
                                                    pow.pidbcichans = pidbcichans;
                                                    pow.setfp = setfp;
                                                    pow.procstring = procstring;
                                                    pow.imgmode = imgmode;
                                                    if exist('fts_group')
                                                        pow.fts_group = fts_group;
                                                    end
                                                    
                                                    [fts_group, ftsfigpath] = SFT_GenerateSpectra(pow);
                                                    
                                                end
                                            end
                                        elseif strcmp(module, 'Power (Hilbert)')
                                            %Load pow structure to carry all needed vars to PWH_GenerateEnvelopes function
                                            pow = [];
                                            pow.pid = pid;
                                            pow.ALLEEG = ALLEEG;
                                            pow.EEG = EEG;
                                            pow.eegfn = eegfn;
                                            pow.eegfp = eegfp;
                                            pow.setfp = setfp;
                                            pow.makeenvelopes = makeenvelopes;
                                            pow.dohilblp = dohilblp;
                                            pow.thetamode = thetamode;
                                            pow.thetamodesuf = thetamodesuf;
                                            pow.procstring = procstring;
                                            pow.bands = bands;
                                            pow.b = b;
                                            pow.bandfreqs = bandfreqs;
                                            pow.filtdesign = filtdesign;
                                            pow.filtorder = filtorder;
                                            pow.remdc = remdc;
                                            pow.arthresh = arthresh;
                                            
                                            PWH_GenerateEnvelopes(pow, app);
                                            
                                        elseif strcmp(module, 'Power (newtimef)')
                                            %Load pow structure to carry all needed vars to PWN_CalcPower function
                                            pow = [];
                                            pow.pid = pid; %9
                                            pow.EEG = EEG; %6
                                            pow.tags = tags;
                                            pow.fullbw = fullbw; %7
                                            pow.eegfn = eegfn; %5
                                            pow.eegfp = eegfp; %1
                                            pow.ntfnfreqs = ntfnfreqs; %2
                                            pow.ntftbs = ntftbs; %16
                                            pow.bands = bands; %3
                                            pow.b = b; %4
                                            pow.bandfreqs = bandfreqs; %12
                                            pow.arthresh = arthresh; %11
                                            pow.perfar = perfar; %13
                                            pow.otic = otic; %14
                                            pow.ptic = ptic; %15
                                            pow.imgmode = imgmode;
                                            if exist('tfo')
                                                pow.tfo = tfo; %8
                                            end
                                            if exist('ntfplotchans')
                                                pow.ntfplotchans = ntfplotchans; %10
                                            end
                                            if exist('errs')
                                                pow.errs = errs; %17
                                            end
                                            
                                            [tfo, ntfplotchans, errs] = PWN_CalcPower(pow, app);
                                            
                                        elseif strcmp(module, 'TMRtistry (WIP)')
                                            if strcmp(app.ExperimentnameDropDown.Value, 'Cuing')
                                                if length(TMRtistry_Script) > 1
                                                    eval(TMRtistry_Script)
                                                else
                                                    msgbox('Cuing TMRtistry processing settings were not found. Please use the file menu "Import... --> TMRtistry Script" to select the text file to be implemented (i.e. Cuing_TMRtistry_Script.txt)')
                                                    warning('Cuing TMRtistry processing settings were not found. Please use the file menu "Import... --> TMRtistry Script" to select the text file to be implemented (i.e. Cuing_TMRtistry_Script.txt)')
                                                end
                                                % Cuing-experiment specific code (Cuing_TMRtistry_Script contents) used to live here. -ABF 2022-01-12
                                            else
                                                if length(TMRtistry_Script) > 1
                                                    eval(TMRtistry_Script)
                                                else
                                                    msgbox('TMRtistry processing settings were not found. Please use the file menu "Import... --> TMRtistry Script" to select the text file to be implemented (e.g. **_TMRtistry_Script.txt)')
                                                    warning('TMRtistry processing settings were not found. Please use the file menu "Import... --> TMRtistry Script" to select the text file to be implemented (e.g. **_TMRtistry_Script.txt)')
                                                end
                                            end
                                        end
                                    else
                                        app.AnalyzeButton.Text = ['None of the requested ' thetamodesuf bands{b} ' sleep stages (' strjoin(keepstages, ', ') ') found for ' pid '! Moving on to next frequency band...'];
                                    end %End "if hypnochanges > 0" conditional
                                    
                                catch bnderr
                                    errs = [errs bnderr];
                                    
                                end %End try/catch loop
                                
                            end %End loop over bands
                            
                        elseif strcmp(module, 'Spindle Detection (Ferrarelli)')
                            disp('Starting spindle detection module based on Ferrarelli et al. 2007 Am J Psychiatry (https://doi.org/10.1176/ajp.2007.164.3.483) and McClain et al. 2016 Neural Plast (https://doi.org/10.1155/2016/3670951). Please cite appropriately!');
                            
                            %Load pow briefcase structure to carry all needed vars to module
                            pow = [];
                            pow.EEG = EEG;
                            pow.lower_thresh_ratio = lower_thresh_ratio;
                            pow.upper_thresh_ratio = upper_thresh_ratio;
                            pow.doresampling = doresampling;
                            pow.tags = tags;
                            pow.knowntags = knowntags;
                            pow.eegfn = eegfn;
                            pow.eegfp = eegfp;
                            pow.bldrlowpass = bldrlowpass; %Is including this option advisable? Or should it be nixed?
                            pow.visualizedata = visualizedata;
                            pow.imgmode = imgmode;
                            
                            SPND_Ferrarelli(pow);
                            
                        elseif strcmp(module, 'PAC (Muehlroth)')
                            %Add code here...
                            disp('Starting WIP PAC algorithm based on Muehlroth (2019)...');
                            
                            %%%Build a briefcase...
                            pow = [];
                            pow.EEG = EEG;
                            pow.eegfp = eegfp;
                            pow.pid = pid;
                            
                            %%%Send it out...
                            PAC_A_PSG_preprocessing(pow);
                        end
                    end %End of loop over participants
                elseif strcmp(module, 'Envelope Viewer') %fka _penvviewer.m
                    
                    %Load briefcase for ENVW_CollateOrLoadEnvelopes
                    pow = [];
                    pow.eegfns = app.eegfiles;
                    pow.eegrootfolder = app.eegrootfolder;
                    pow.expname = app.ExperimentnameDropDown.Value;
                    pow.collatenew = collatenew;
                    pow.bands = bands;
                    pow.thetamode = thetamode;
                    pow.avgacross = avgacross;
                    pow.truemeasure = truemeasure;
                    pow.knowntags = knowntags;
                    pow.bandstgs = bandstgs;
                    pow.temporalroi = temporalroi;
                    if exist('chans') == 1
                        pow.chans = chans;
                    end
                    if exist('nightkey') == 1
                        pow.nightkey = nightkey;
                    end
                    
                    %Run ENVW_CollateOrLoadEnvelopes
                    tic;
                    [toview, chans, thetamodesuf, bandnums, envoutsuffix] = ENVW_CollateOrLoadEnvelopes(pow);
                    toc
                    
                elseif strcmp(module, 'Spectrogram Viewer') %fka CZ2000fr_tfadder.m & TFRstatistics.m
                    disp('Add Spectrogram Viewer code here...');
                    
                    %Load pow briefcase structure to carry all needed vars to module
                    pow = [];
                    pow.curexpname = app.ExperimentnameDropDown.Value;
                    pow.edfdir = app.eegrootfolder;
                    pow.eegfiles = app.eegfiles;
                    pow.stgfiles = app.stgfiles;
                    pow.stgmethod = stgmethod;
                    pow.thinkfs = thinkfs;
                    pow.extfp = extfp;
                    pow.knowntags = knowntags;
                    pow.data_nfreqs = data_nfreqs;
                    pow.data_elec = data_elec;
                    pow.data_band = data_band;
                    pow.savetifs = savetifs;
                    pow.savetifmetas = savetifmetas;
                    
                    pow = SpectrogramViewer(pow); %This function still WIP... - ABF 2022-02-14
                    
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % Group/grand average processing and plotting
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                if strcmp(module, 'Spectra (EEGLAB)')
                    %Load pow structure to carry all needed vars to SEL_PlotGroupAverages function
                    pow = [];
                    pow.ssfigpath = ssfigpath;
                    pow.roistring = roistring;
                    pow.ss_freqs = ss_freqs;
                    pow.ss_group = ss_group;
                    pow.pidbcichans = pidbcichans;
                    pow.rerefmode = rerefmode;
                    pow.specchans = specchans;
                    pow.specfreqs = specfreqs;
                    
                    SEL_PlotGroupAverages(pow);
                    
                elseif strcmp(module, 'Spectra (FieldTrip)')
                    %Load pow structure to carry all needed vars to SFT_PlotGroupAverages function
                    pow = [];
                    pow.ftsfigpath = ftsfigpath;
                    pow.fts_group = fts_group;
                    pow.roistring = roistring;
                    pow.specchans = specchans;
                    pow.dipfitstr = dipfitstr;
                    pow.ftspecplotstyle = ftspecplotstyle;
                    pow.imgmode = imgmode;
                    
                    SFT_PlotGroupAverages(pow);
                    
                elseif strcmp(module, 'Spectra (newtimef)')
                    if strcmp(expname, 'EmoPhys')
                        specs = cellfun(@(x) mean(x,2), curersp, 'UniformOutput', 0);
                        for s = 1:length(curersp)
                            figure; plot(curfreqs{s}, specs{s}); title([app.eegfiles{s} fullbandstages]);
                            %print(gcf, '-dpdf', [eegfp 'Output' filesep 'spectra' filesep strtok(app.eegfiles{s},'.') '_spec.pdf']);
                        end
                        specsmat = cell2mat(specs)';
                        gavspec = mean(specsmat,1);
                        figure; plot(curfreqs{1}, gavspec); title(['GAVspectra_' datestr(now, 'yyyy-mm-dd') fullbandstages]);
                        print(gcf, '-dpng', [eegfp 'Output' filesep 'spectra' filesep 'GAV_spec.png']);
                    end
                    
                elseif strcmp(module, 'Envelope Viewer')
                    
                    %Need to ensure 'distinguishable_colors' is a function on the path. - ABF 2022-03-07
                    
                    %Load briefcase for ENVW_PlotAndQuantify
                    pow = [];
                    pow.eegrootfolder = app.eegrootfolder;
                    pow.expname = app.ExperimentnameDropDown.Value;
                    pow.toview = toview;
                    pow.chans = chans;
                    pow.srate_guess = srate;
                    pow.bands = bands;
                    pow.bandnums = bandnums;
                    pow.thetamodesuf = thetamodesuf;
                    pow.avgacross = avgacross;
                    pow.truemeasure = truemeasure;
                    pow.omitempties = omitempties;
                    pow.archoice = archoice;
                    pow.clnmeth = clnmeth;
                    pow.medsmoothwind = medsmoothwind;
                    pow.blchoice = blchoice;
                    pow.blremwind = blremwind;
                    pow.gblchoice = gblchoice;
                    pow.statsmethod = statsmethod;
                    pow.stagelist = stagelist;
                    pow.envoutsuffix = envoutsuffix;
                    pow.dipfitstr = dipfitstr;
                    
                    %Run ENVW_PlotAndQuantify
                    tic;
                    ENVW_PlotAndQuantify(pow);
                    toc
                    
                elseif strcmp(module, 'PAC (Muehlroth)')
                    
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    %PAC (Muehlroth) code that runs over all participants
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    
                    %Add code that works on the full dataset here - ABF 2022-03-02
                end
                
                isanalyze = 0;
                diary off;
                
                app.AnalyzeButton.FontSize = 12;
                app.AnalyzeButton.Text = 'Analyze';
                figure(app.UIFigure); % Refocus GUI as main window
                
            catch anbutton_exc
                isanalyze = 0;
                disp(getReport(anbutton_exc))
                warning(['Analyze button process crashed at ' datestr(now) ', closing diary log...']);
                diary off;
                
                app.AnalyzeButton.FontSize = 12;
                app.AnalyzeButton.Text = 'Analyze';
                figure(app.UIFigure); % Refocus GUI as main window
            end
        end

        % Button pushed function: ARBCISettingsButton
        function ARBCISettingsButtonPush(app, event)
            app.arbci_settings = '';
            
            if ismac == 0
                [filename, path] = uigetfile('title', 'Select file containing Bad Channel Interpolation settings','*_ARBCI_Settings.txt');
            else
                [filename, path] = uigetfile('*.*', 'Select *_ARBCI_Settings.txt file containing Bad Channel Interpolation settings');
            end
            
            if filename ~= 0
                app.arbci_settings = fileread(strcat(path, filename));
            end
            
            if ~isempty(app.arbci_settings)
                app.ARBCISettingsLamp.Color = 'g';
            else
                app.ARBCISettingsLamp.Color = 'r';
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
            
        end

        % Button pushed function: TMRtistrySettingsButton
        function TMRtistrySettingsButtonPush(app, event)
            app.tmrtistry_settings = '';
            
            if ismac == 0
                [filename, path] = uigetfile('title', 'Select file containing TMRtistry settings','*_TMRtistry_Settings.txt');
            else
                [filename, path] = uigetfile('*.*', 'Select *_TMRtistry_Settings.txt file containing TMRtistry settings');
            end
            
            if filename ~= 0
                app.tmrtistry_settings = fileread(strcat(path, filename));
            end
            
            if ~isempty(app.tmrtistry_settings)
                app.TMRtistrySettingsLamp.Color = 'g';
            else
                app.TMRtistrySettingsLamp.Color = 'r';
            end
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: PreprocessingSettingsButton
        function PreprocessingSettingsButtonPush(app, event)
            app.preproc_settings = '';
            
            if ismac == 0
                [filename, path] = uigetfile('title', 'Select file containing custom preprocessing code','*_Preproc_Settings.txt');
            else
                [filename, path] = uigetfile('*.*', 'Select *_Preproc_Settings.txt file containing custom preprocessing code');
            end
            
            if filename ~= 0
                app.preproc_settings = fileread(strcat(path, filename));
            end
            
            if ~isempty(app.preproc_settings)
                app.PreProcessingSettingsLamp.Color = 'g';
            else
                app.PreProcessingSettingsLamp.Color = 'r';
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Button pushed function: TMRtistryScriptImportButton
        function TMRtistryScriptButtonPush(app, event)
            app.tmrtistry_script = '';
            
            if ismac == 0
                [filename, path] = uigetfile('title', 'Select file containing script to run TMRtistry','*_TMRtistry_Script.txt');
            else
                [filename, path] = uigetfile('*.*', 'Select *_TMRtistry_Script.txt file containing script to run TMRtistry');
            end
            
            if filename ~= 0
                app.tmrtistry_script = fileread(strcat(path, filename));
            end
            
            if ~isempty(app.tmrtistry_script)
                app.TMRtistryCustomScriptLamp.Color = 'g';
            else
                app.TMRtistryCustomScriptLamp.Color = 'r';
            end
            
            figure(app.UIFigure); % Refocus GUI as main window
        end

        % Value changed function: ArtifactChoiceDropdown
        function ArtifactChoiceDropdownValueChanged(app, event)
            value = app.ArtifactChoiceDropdown.Value;
            
            if strcmp(value, 'smoothed')
                app.MedianSmoothWindowNumericEditField.Visible = 'on';
                app.MedianSmoothWindowNumericEditFieldLabel.Visible = 'on';
            else
                app.MedianSmoothWindowNumericEditField.Visible = 'off';
                app.MedianSmoothWindowNumericEditFieldLabel.Visible = 'off';
            end
        end

        % Selection changed function: 
        % CollateorloadenvelopesButtonGroup
        function CollateorloadenvelopesButtonGroupSelectionChanged(app, event)
            
            AverageenvelopesacrossButtonGroupSelectionChanged(app, event)
            
        end

        % Selection changed function: 
        % AverageenvelopesacrossButtonGroup
        function AverageenvelopesacrossButtonGroupSelectionChanged(app, event)
            
            if strcmp(app.CollateorloadenvelopesButtonGroup.SelectedObject.Text, 'Collate')
                if strcmp(app.AverageenvelopesacrossButtonGroup.SelectedObject.Text, 'chans')
                    app = setStep3Bands(app, {'delta', 'theta', 'sigma'}, 'othersOn', 1, 1, 1, 0, 0, 0);
                    
                    app.EnvViewerTempROILowNumericEditField.Visible = 'off';
                    app.EnvViewerTempROILowNumericEditFieldLabel.Visible = 'off';
                    app.EnvViewerTempROIHighNumericEditField.Visible = 'off';
                    app.EnvViewerTempROIHighNumericEditFieldLabel.Visible = 'off';
                elseif strcmp(app.AverageenvelopesacrossButtonGroup.SelectedObject.Text, 'time')
                    app = setStep3Bands(app, {'delta', 'theta', 'sigma'}, 'othersOn', 1, 2, 1, 0, 1, 0);
                    
                    app.DeltaCheckBox.Value = 1; app.ThetaCheckBox.Value = 1; app.SigmaCheckBox.Value = 1;
                    app.DeltaN2.Value = 1; app.ThetaN2.Value = 1; app.SigmaN2.Value = 1;
                    app.DeltaN3.Value = 1; app.ThetaN3.Value = 1; app.SigmaN3.Value = 1;
                    
                    app.AllBandsButton.Enable = 'on';
                    app.AllStagesButton.Enable = 'on';
                    
                    app.EnvViewerTempROILowNumericEditField.Visible = 'on';
                    app.EnvViewerTempROILowNumericEditFieldLabel.Visible = 'on';
                    app.EnvViewerTempROIHighNumericEditField.Visible = 'on';
                    app.EnvViewerTempROIHighNumericEditFieldLabel.Visible = 'on';
                end
                
            else %Load
                app = setStep3Bands(app, {''}, 'othersOff', 1, 1, 1, 1, 1, 1);
                
                app.EnvViewerTempROILowNumericEditField.Visible = 'off';
                app.EnvViewerTempROILowNumericEditFieldLabel.Visible = 'off';
                app.EnvViewerTempROIHighNumericEditField.Visible = 'off';
                app.EnvViewerTempROIHighNumericEditFieldLabel.Visible = 'off';
            end
            
            if strcmp(app.CollateorloadenvelopesButtonGroup.SelectedObject.Text, 'Collate') && app.ThetaCheckBox.Value == 1
                app.ThetaFilterModeDropDown_EnvViewer.Visible = 'on';
                app.ThetaFilterModeDropDown_EnvViewerLabel.Visible = 'on';
            else
                app.ThetaFilterModeDropDown_EnvViewer.Visible = 'off';
                app.ThetaFilterModeDropDown_EnvViewerLabel.Visible = 'off';
                app.ThetaFilterModeDropDown_EnvViewer.Value = 'none';
            end
            
        end

        % Value changed function: BaselineRemovalChoiceCheckBox
        function BaselineRemovalChoiceCheckBoxValueChanged(app, event)
            value = app.BaselineRemovalChoiceCheckBox.Value;
            
            if value == 1
                app.BaselineRemovalWindowLengthNumericEditField.Visible = 'on';
                app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.Visible = 'on';
            else
                app.BaselineRemovalWindowLengthNumericEditField.Visible = 'off';
                app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.Visible = 'off';
                app.BaselineRemovalWindowLengthNumericEditField.Value = 0;
            end
            
        end

        % Value changed function: CustomTimeIntervalEnd, 
        % CustomTimeIntervalEnd_FT, CustomTimeIntervalEnd_ntf, 
        % CustomTimeIntervalStart, CustomTimeIntervalStart_FT, 
        % CustomTimeIntervalStart_ntf
        function SpectimeInputValueChanged(app, event)
            switch app.AnalysisModuleselectoneDropDown.Value
                case 'Spectra (EEGLAB)'
                    app.TimeintervalforspectraButtonGroup.SelectedObject = app.CustomtimerangeminStartButton;
                case 'Spectra (FieldTrip)'
                    app.TimeintervalforspectraButtonGroup_FT.SelectedObject = app.CustomtimerangeminStartButton_FT;
                case 'Spectra (newtimef)'
                    app.TimeintervalforspectraButtonGroup_ntf.SelectedObject = app.CustomtimerangeminStartButton_ntf;
            end
            
        end
    end

    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure
            app.UIFigure = uifigure;
            app.UIFigure.Position = [100 100 1133 726];
            app.UIFigure.Name = 'MATLAB App';

            % Create PSGpowerLabel
            app.PSGpowerLabel = uilabel(app.UIFigure);
            app.PSGpowerLabel.FontSize = 20;
            app.PSGpowerLabel.FontWeight = 'bold';
            app.PSGpowerLabel.FontAngle = 'italic';
            app.PSGpowerLabel.Position = [14 699 107 25];
            app.PSGpowerLabel.Text = 'PSGpower';

            % Create PSGpowerVersionLabel
            app.PSGpowerVersionLabel = uilabel(app.UIFigure);
            app.PSGpowerVersionLabel.FontSize = 10;
            app.PSGpowerVersionLabel.Position = [120 696 25 22];
            app.PSGpowerVersionLabel.Text = 'v1.0';

            % Create Step1SelectfiledirectoryPanel
            app.Step1SelectfiledirectoryPanel = uipanel(app.UIFigure);
            app.Step1SelectfiledirectoryPanel.Title = 'Step 1: Select file directory';
            app.Step1SelectfiledirectoryPanel.FontWeight = 'bold';
            app.Step1SelectfiledirectoryPanel.FontSize = 15;
            app.Step1SelectfiledirectoryPanel.Position = [11 365 600 331];

            % Create FileSelectListbox
            app.FileSelectListbox = uilistbox(app.Step1SelectfiledirectoryPanel);
            app.FileSelectListbox.Items = {'Selected files will show up here'};
            app.FileSelectListbox.Multiselect = 'on';
            app.FileSelectListbox.Enable = 'off';
            app.FileSelectListbox.Position = [11 7 580 190];
            app.FileSelectListbox.Value = {'Selected files will show up here'};

            % Create AddDirectoryforAnalysisButton
            app.AddDirectoryforAnalysisButton = uibutton(app.Step1SelectfiledirectoryPanel, 'push');
            app.AddDirectoryforAnalysisButton.ButtonPushedFcn = createCallbackFcn(app, @AddDirectoryforAnalysisButtonPushed, true);
            app.AddDirectoryforAnalysisButton.Position = [10 282 154 22];
            app.AddDirectoryforAnalysisButton.Text = 'Add Directory for Analysis';

            % Create IncludesubdirectoriesCheckBox
            app.IncludesubdirectoriesCheckBox = uicheckbox(app.Step1SelectfiledirectoryPanel);
            app.IncludesubdirectoriesCheckBox.Text = 'Include subdirectories';
            app.IncludesubdirectoriesCheckBox.Position = [169 282 139 22];

            % Create SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel = uilabel(app.Step1SelectfiledirectoryPanel);
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.FontAngle = 'italic';
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Position = [130 204 324 22];
            app.SelectfilestobeanalyzedwhileholdingCtrlthenclickLabel.Text = 'Select files to be analyzed while holding Ctrl, then click ==>';

            % Create ChooseSubsetButton
            app.ChooseSubsetButton = uibutton(app.Step1SelectfiledirectoryPanel, 'state');
            app.ChooseSubsetButton.ValueChangedFcn = createCallbackFcn(app, @ChooseSubsetButtonValueChanged, true);
            app.ChooseSubsetButton.Text = 'Choose Subset';
            app.ChooseSubsetButton.Position = [15 204 100 22];

            % Create SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel = uilabel(app.Step1SelectfiledirectoryPanel);
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel.FontSize = 10;
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel.Position = [319 282 183 22];
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitchLabel.Text = {'Session info .csv found. '; 'Use to determine montage and scoring?'};

            % Create SessioninfocsvfoundUsetodeterminemontageandscoringSwitch
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch = uiswitch(app.Step1SelectfiledirectoryPanel, 'slider');
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Items = {'Yes', 'No'};
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.FontSize = 10;
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Position = [521 282 45 20];
            app.SessioninfocsvfoundUsetodeterminemontageandscoringSwitch.Value = 'No';

            % Create UpdateFileListButton
            app.UpdateFileListButton = uibutton(app.Step1SelectfiledirectoryPanel, 'push');
            app.UpdateFileListButton.ButtonPushedFcn = createCallbackFcn(app, @UpdateFileListButtonPushed, true);
            app.UpdateFileListButton.Position = [488 204 100 22];
            app.UpdateFileListButton.Text = 'Update File List';

            % Create DirectoryConfirmationLabel
            app.DirectoryConfirmationLabel = uilabel(app.Step1SelectfiledirectoryPanel);
            app.DirectoryConfirmationLabel.FontAngle = 'italic';
            app.DirectoryConfirmationLabel.Position = [11 255 543 22];
            app.DirectoryConfirmationLabel.Text = 'Directory added. All files shown in the box below (after choosing staging software) will be analyzed.';

            % Create WhatsoftwarewasusedforsleepstagenotationDropDownLabel
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel = uilabel(app.Step1SelectfiledirectoryPanel);
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.FontSize = 11;
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.FontWeight = 'bold';
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.Position = [12 229 270 22];
            app.WhatsoftwarewasusedforsleepstagenotationDropDownLabel.Text = 'What software was used for sleep stage notation?';

            % Create WhatsoftwarewasusedforsleepstagenotationDropDown
            app.WhatsoftwarewasusedforsleepstagenotationDropDown = uidropdown(app.Step1SelectfiledirectoryPanel);
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.Items = {' ', 'SleepSMG/Hume', 'TWin', 'REMlogic', 'None (Experimental)'};
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.ValueChangedFcn = createCallbackFcn(app, @WhatsoftwarewasusedforsleepstagenotationDropDownValueChanged, true);
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.Position = [279 229 100 22];
            app.WhatsoftwarewasusedforsleepstagenotationDropDown.Value = ' ';

            % Create EEGSamplingFrequencyHzEditFieldLabel
            app.EEGSamplingFrequencyHzEditFieldLabel = uilabel(app.Step1SelectfiledirectoryPanel);
            app.EEGSamplingFrequencyHzEditFieldLabel.HorizontalAlignment = 'right';
            app.EEGSamplingFrequencyHzEditFieldLabel.FontSize = 11;
            app.EEGSamplingFrequencyHzEditFieldLabel.FontWeight = 'bold';
            app.EEGSamplingFrequencyHzEditFieldLabel.Position = [443 228 96 27];
            app.EEGSamplingFrequencyHzEditFieldLabel.Text = {'EEG Sampling'; 'Frequency (Hz):'};

            % Create EEGSamplingFrequencyHzEditField
            app.EEGSamplingFrequencyHzEditField = uieditfield(app.Step1SelectfiledirectoryPanel, 'text');
            app.EEGSamplingFrequencyHzEditField.ValueChangedFcn = createCallbackFcn(app, @EEGSamplingFrequencyHzEditFieldValueChanged, true);
            app.EEGSamplingFrequencyHzEditField.FontSize = 11;
            app.EEGSamplingFrequencyHzEditField.Position = [549 230 38 22];
            app.EEGSamplingFrequencyHzEditField.Value = '0';

            % Create Step2SelectsignalprocessingapproachPanel
            app.Step2SelectsignalprocessingapproachPanel = uipanel(app.UIFigure);
            app.Step2SelectsignalprocessingapproachPanel.Title = 'Step 2: Select signal processing approach';
            app.Step2SelectsignalprocessingapproachPanel.FontWeight = 'bold';
            app.Step2SelectsignalprocessingapproachPanel.FontSize = 15;
            app.Step2SelectsignalprocessingapproachPanel.Position = [621 365 504 331];

            % Create TabGroup
            app.TabGroup = uitabgroup(app.Step2SelectsignalprocessingapproachPanel);
            app.TabGroup.SelectionChangedFcn = createCallbackFcn(app, @TabGroupSelectionChanged, true);
            app.TabGroup.Position = [6 6 492 256];

            % Create HypnogramTab
            app.HypnogramTab = uitab(app.TabGroup);
            app.HypnogramTab.Title = 'Hypnogram';

            % Create HypnogramRasterPlotCheckbox
            app.HypnogramRasterPlotCheckbox = uicheckbox(app.HypnogramTab);
            app.HypnogramRasterPlotCheckbox.Text = 'Include raster plot of sleep stages?';
            app.HypnogramRasterPlotCheckbox.Position = [12 199 209 22];
            app.HypnogramRasterPlotCheckbox.Value = true;

            % Create SpectraEEGLABTab
            app.SpectraEEGLABTab = uitab(app.TabGroup);
            app.SpectraEEGLABTab.Title = 'Spectra (EEGLAB)';

            % Create Apply60HznotchfilterbeforegeneratingspectraCheckBox
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox = uicheckbox(app.SpectraEEGLABTab);
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox.Text = 'Apply 60 Hz notch filter before generating spectra?';
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox.Position = [11 60 296 22];

            % Create FrequencyrangeofinterestHzLabel_2
            app.FrequencyrangeofinterestHzLabel_2 = uilabel(app.SpectraEEGLABTab);
            app.FrequencyrangeofinterestHzLabel_2.Position = [11 171 208 22];
            app.FrequencyrangeofinterestHzLabel_2.Text = 'Frequency range of interest (Hz):';

            % Create PlotFreqROIHzMinimumEditField
            app.PlotFreqROIHzMinimumEditField = uieditfield(app.SpectraEEGLABTab, 'numeric');
            app.PlotFreqROIHzMinimumEditField.Limits = [0 Inf];
            app.PlotFreqROIHzMinimumEditField.Position = [233 171 34 22];

            % Create toEditFieldLabel
            app.toEditFieldLabel = uilabel(app.SpectraEEGLABTab);
            app.toEditFieldLabel.Position = [279 171 25 22];
            app.toEditFieldLabel.Text = 'to';

            % Create PlotFreqROIHzMaximumEditField
            app.PlotFreqROIHzMaximumEditField = uieditfield(app.SpectraEEGLABTab, 'numeric');
            app.PlotFreqROIHzMaximumEditField.Limits = [0 Inf];
            app.PlotFreqROIHzMaximumEditField.Position = [301 171 36 22];
            app.PlotFreqROIHzMaximumEditField.Value = 25;

            % Create TimeintervalforspectraButtonGroup
            app.TimeintervalforspectraButtonGroup = uibuttongroup(app.SpectraEEGLABTab);
            app.TimeintervalforspectraButtonGroup.Title = 'Time interval for spectra';
            app.TimeintervalforspectraButtonGroup.Position = [11 88 344 79];

            % Create UsealldatainselectedstagesButton
            app.UsealldatainselectedstagesButton = uiradiobutton(app.TimeintervalforspectraButtonGroup);
            app.UsealldatainselectedstagesButton.Text = 'Use all data in selected stages';
            app.UsealldatainselectedstagesButton.Position = [11 33 185 22];
            app.UsealldatainselectedstagesButton.Value = true;

            % Create CustomtimerangeminStartButton
            app.CustomtimerangeminStartButton = uiradiobutton(app.TimeintervalforspectraButtonGroup);
            app.CustomtimerangeminStartButton.Text = 'Custom time range (min)     Start';
            app.CustomtimerangeminStartButton.Position = [11 11 199 22];

            % Create CustomTimeIntervalStart
            app.CustomTimeIntervalStart = uieditfield(app.TimeintervalforspectraButtonGroup, 'numeric');
            app.CustomTimeIntervalStart.Limits = [0 Inf];
            app.CustomTimeIntervalStart.RoundFractionalValues = 'on';
            app.CustomTimeIntervalStart.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalStart.Position = [212 11 36 22];

            % Create CustomTimeIntervalEnd
            app.CustomTimeIntervalEnd = uieditfield(app.TimeintervalforspectraButtonGroup, 'numeric');
            app.CustomTimeIntervalEnd.Limits = [0 Inf];
            app.CustomTimeIntervalEnd.RoundFractionalValues = 'on';
            app.CustomTimeIntervalEnd.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalEnd.Position = [296 11 36 22];

            % Create EndLabel
            app.EndLabel = uilabel(app.TimeintervalforspectraButtonGroup);
            app.EndLabel.Position = [266 11 27 22];
            app.EndLabel.Text = 'End';

            % Create Label_6
            app.Label_6 = uilabel(app.SpectraEEGLABTab);
            app.Label_6.FontSize = 10;
            app.Label_6.FontWeight = 'bold';
            app.Label_6.FontAngle = 'italic';
            app.Label_6.Position = [252 6 231 22];
            app.Label_6.Text = {'Note: Data will be subset to the stages chosen '; 'in Step 3 before being truncated to X min.'};

            % Create SpectraFieldTripTab
            app.SpectraFieldTripTab = uitab(app.TabGroup);
            app.SpectraFieldTripTab.Title = 'Spectra (FieldTrip)';

            % Create SpectraplotunitsDropDownLabel
            app.SpectraplotunitsDropDownLabel = uilabel(app.SpectraFieldTripTab);
            app.SpectraplotunitsDropDownLabel.Position = [11 199 102 22];
            app.SpectraplotunitsDropDownLabel.Text = 'Spectra plot units:';

            % Create SpectraplotunitsDropDown
            app.SpectraplotunitsDropDown = uidropdown(app.SpectraFieldTripTab);
            app.SpectraplotunitsDropDown.Items = {'logpower', 'eeglab', 'abspower'};
            app.SpectraplotunitsDropDown.Position = [145 199 100 22];
            app.SpectraplotunitsDropDown.Value = 'logpower';

            % Create TimeintervalforspectraButtonGroup_FT
            app.TimeintervalforspectraButtonGroup_FT = uibuttongroup(app.SpectraFieldTripTab);
            app.TimeintervalforspectraButtonGroup_FT.Title = 'Time interval for spectra';
            app.TimeintervalforspectraButtonGroup_FT.Position = [11 88 343 79];

            % Create UsealldatainselectedstagesButton_FT
            app.UsealldatainselectedstagesButton_FT = uiradiobutton(app.TimeintervalforspectraButtonGroup_FT);
            app.UsealldatainselectedstagesButton_FT.Text = 'Use all data in selected stages';
            app.UsealldatainselectedstagesButton_FT.Position = [11 33 185 22];
            app.UsealldatainselectedstagesButton_FT.Value = true;

            % Create CustomtimerangeminStartButton_FT
            app.CustomtimerangeminStartButton_FT = uiradiobutton(app.TimeintervalforspectraButtonGroup_FT);
            app.CustomtimerangeminStartButton_FT.Text = 'Custom time range (min)     Start';
            app.CustomtimerangeminStartButton_FT.Position = [11 11 199 22];

            % Create CustomTimeIntervalStart_FT
            app.CustomTimeIntervalStart_FT = uieditfield(app.TimeintervalforspectraButtonGroup_FT, 'numeric');
            app.CustomTimeIntervalStart_FT.Limits = [0 Inf];
            app.CustomTimeIntervalStart_FT.RoundFractionalValues = 'on';
            app.CustomTimeIntervalStart_FT.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalStart_FT.Position = [212 11 36 22];

            % Create CustomTimeIntervalEnd_FT
            app.CustomTimeIntervalEnd_FT = uieditfield(app.TimeintervalforspectraButtonGroup_FT, 'numeric');
            app.CustomTimeIntervalEnd_FT.Limits = [0 Inf];
            app.CustomTimeIntervalEnd_FT.RoundFractionalValues = 'on';
            app.CustomTimeIntervalEnd_FT.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalEnd_FT.Position = [296 11 36 22];

            % Create EndLabel_FT
            app.EndLabel_FT = uilabel(app.TimeintervalforspectraButtonGroup_FT);
            app.EndLabel_FT.Position = [266 11 27 22];
            app.EndLabel_FT.Text = 'End';

            % Create FrequencyrangeofinterestHzLabel
            app.FrequencyrangeofinterestHzLabel = uilabel(app.SpectraFieldTripTab);
            app.FrequencyrangeofinterestHzLabel.Position = [11 171 208 22];
            app.FrequencyrangeofinterestHzLabel.Text = 'Frequency range of interest (Hz):';

            % Create PlotFreqROIMinimumEditField_FT
            app.PlotFreqROIMinimumEditField_FT = uieditfield(app.SpectraFieldTripTab, 'numeric');
            app.PlotFreqROIMinimumEditField_FT.Limits = [0 Inf];
            app.PlotFreqROIMinimumEditField_FT.Position = [233 171 34 22];

            % Create toEditField_2Label_2
            app.toEditField_2Label_2 = uilabel(app.SpectraFieldTripTab);
            app.toEditField_2Label_2.Position = [279 171 25 22];
            app.toEditField_2Label_2.Text = 'to';

            % Create PlotFreqROIMaximumEditField_FT
            app.PlotFreqROIMaximumEditField_FT = uieditfield(app.SpectraFieldTripTab, 'numeric');
            app.PlotFreqROIMaximumEditField_FT.Limits = [0 Inf];
            app.PlotFreqROIMaximumEditField_FT.Position = [301 171 36 22];
            app.PlotFreqROIMaximumEditField_FT.Value = 25;

            % Create Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT = uicheckbox(app.SpectraFieldTripTab);
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT.Text = 'Apply 60 Hz notch filter before generating spectra?';
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_FT.Position = [11 60 296 22];

            % Create WindowlengthsecEditFieldLabel
            app.WindowlengthsecEditFieldLabel = uilabel(app.SpectraFieldTripTab);
            app.WindowlengthsecEditFieldLabel.Position = [12 33 114 22];
            app.WindowlengthsecEditFieldLabel.Text = 'Window length (sec)';

            % Create WindowlengthsecEditField_FT
            app.WindowlengthsecEditField_FT = uieditfield(app.SpectraFieldTripTab, 'numeric');
            app.WindowlengthsecEditField_FT.Position = [140 33 43 22];
            app.WindowlengthsecEditField_FT.Value = 10;

            % Create WindowoverlapproportionEditFieldLabel_2
            app.WindowoverlapproportionEditFieldLabel_2 = uilabel(app.SpectraFieldTripTab);
            app.WindowoverlapproportionEditFieldLabel_2.Position = [11 6 156 22];
            app.WindowoverlapproportionEditFieldLabel_2.Text = 'Window overlap (proportion)';

            % Create WindowoverlapproportionEditField_FT
            app.WindowoverlapproportionEditField_FT = uieditfield(app.SpectraFieldTripTab, 'numeric');
            app.WindowoverlapproportionEditField_FT.Limits = [0 1];
            app.WindowoverlapproportionEditField_FT.Position = [173 6 43 22];
            app.WindowoverlapproportionEditField_FT.Value = 0.75;

            % Create NoteLabelSpectra_FT
            app.NoteLabelSpectra_FT = uilabel(app.SpectraFieldTripTab);
            app.NoteLabelSpectra_FT.FontSize = 10;
            app.NoteLabelSpectra_FT.FontWeight = 'bold';
            app.NoteLabelSpectra_FT.FontAngle = 'italic';
            app.NoteLabelSpectra_FT.Position = [252 6 231 22];
            app.NoteLabelSpectra_FT.Text = {'Note: Data will be subset to the stages chosen '; 'in Step 3 before being truncated to X min.'};

            % Create SpectranewtimefTab
            app.SpectranewtimefTab = uitab(app.TabGroup);
            app.SpectranewtimefTab.Title = 'Spectra (newtimef)';

            % Create TimeintervalforspectraButtonGroup_ntf
            app.TimeintervalforspectraButtonGroup_ntf = uibuttongroup(app.SpectranewtimefTab);
            app.TimeintervalforspectraButtonGroup_ntf.Title = 'Time interval for spectra';
            app.TimeintervalforspectraButtonGroup_ntf.Position = [11 88 343 79];

            % Create UsealldatainselectedstagesButton_ntf
            app.UsealldatainselectedstagesButton_ntf = uiradiobutton(app.TimeintervalforspectraButtonGroup_ntf);
            app.UsealldatainselectedstagesButton_ntf.Text = 'Use all data in selected stages';
            app.UsealldatainselectedstagesButton_ntf.Position = [11 33 185 22];
            app.UsealldatainselectedstagesButton_ntf.Value = true;

            % Create CustomtimerangeminStartButton_ntf
            app.CustomtimerangeminStartButton_ntf = uiradiobutton(app.TimeintervalforspectraButtonGroup_ntf);
            app.CustomtimerangeminStartButton_ntf.Text = 'Custom time range (min)     Start';
            app.CustomtimerangeminStartButton_ntf.Position = [11 11 199 22];

            % Create CustomTimeIntervalStart_ntf
            app.CustomTimeIntervalStart_ntf = uieditfield(app.TimeintervalforspectraButtonGroup_ntf, 'numeric');
            app.CustomTimeIntervalStart_ntf.Limits = [0 Inf];
            app.CustomTimeIntervalStart_ntf.RoundFractionalValues = 'on';
            app.CustomTimeIntervalStart_ntf.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalStart_ntf.Position = [212 11 36 22];

            % Create CustomTimeIntervalEnd_ntf
            app.CustomTimeIntervalEnd_ntf = uieditfield(app.TimeintervalforspectraButtonGroup_ntf, 'numeric');
            app.CustomTimeIntervalEnd_ntf.Limits = [0 Inf];
            app.CustomTimeIntervalEnd_ntf.RoundFractionalValues = 'on';
            app.CustomTimeIntervalEnd_ntf.ValueChangedFcn = createCallbackFcn(app, @SpectimeInputValueChanged, true);
            app.CustomTimeIntervalEnd_ntf.Position = [296 11 36 22];

            % Create EndLabel_ntf
            app.EndLabel_ntf = uilabel(app.TimeintervalforspectraButtonGroup_ntf);
            app.EndLabel_ntf.Position = [266 11 27 22];
            app.EndLabel_ntf.Text = 'End';

            % Create toEditField_2Label_ntf
            app.toEditField_2Label_ntf = uilabel(app.SpectranewtimefTab);
            app.toEditField_2Label_ntf.Position = [279 171 25 22];
            app.toEditField_2Label_ntf.Text = 'to';

            % Create PlotFreqROIMaximumEditField_ntf
            app.PlotFreqROIMaximumEditField_ntf = uieditfield(app.SpectranewtimefTab, 'numeric');
            app.PlotFreqROIMaximumEditField_ntf.Limits = [0 Inf];
            app.PlotFreqROIMaximumEditField_ntf.Position = [301 171 36 22];
            app.PlotFreqROIMaximumEditField_ntf.Value = 25;

            % Create Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf = uicheckbox(app.SpectranewtimefTab);
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf.Text = 'Apply 60 Hz notch filter before generating spectra?';
            app.Apply60HznotchfilterbeforegeneratingspectraCheckBox_ntf.Position = [11 60 296 22];

            % Create NoteLabelSpectra_ntf
            app.NoteLabelSpectra_ntf = uilabel(app.SpectranewtimefTab);
            app.NoteLabelSpectra_ntf.FontSize = 10;
            app.NoteLabelSpectra_ntf.FontWeight = 'bold';
            app.NoteLabelSpectra_ntf.FontAngle = 'italic';
            app.NoteLabelSpectra_ntf.Position = [252 6 231 22];
            app.NoteLabelSpectra_ntf.Text = {'Note: Data will be subset to the stages chosen '; 'in Step 3 before being truncated to X min.'};

            % Create FrequencyrangeofinterestHzLabel_3
            app.FrequencyrangeofinterestHzLabel_3 = uilabel(app.SpectranewtimefTab);
            app.FrequencyrangeofinterestHzLabel_3.Position = [11 171 208 22];
            app.FrequencyrangeofinterestHzLabel_3.Text = 'Frequency range of interest (Hz):';

            % Create PlotFreqROIMinimumEditField_ntf
            app.PlotFreqROIMinimumEditField_ntf = uieditfield(app.SpectranewtimefTab, 'numeric');
            app.PlotFreqROIMinimumEditField_ntf.Limits = [0 Inf];
            app.PlotFreqROIMinimumEditField_ntf.Position = [233 171 34 22];

            % Create PowerHilbertTab
            app.PowerHilbertTab = uitab(app.TabGroup);
            app.PowerHilbertTab.Title = 'Power (Hilbert)';

            % Create FiniteImpulseResponseFIRorderButtonGroup
            app.FiniteImpulseResponseFIRorderButtonGroup = uibuttongroup(app.PowerHilbertTab);
            app.FiniteImpulseResponseFIRorderButtonGroup.Title = 'Finite Impulse Response (FIR) order';
            app.FiniteImpulseResponseFIRorderButtonGroup.FontWeight = 'bold';
            app.FiniteImpulseResponseFIRorderButtonGroup.Position = [265 156 217 69];

            % Create HardcodedDefaultButton
            app.HardcodedDefaultButton = uiradiobutton(app.FiniteImpulseResponseFIRorderButtonGroup);
            app.HardcodedDefaultButton.Text = 'Hardcoded Default';
            app.HardcodedDefaultButton.Position = [11 23 122 22];
            app.HardcodedDefaultButton.Value = true;

            % Create CohensAlgorithmButton
            app.CohensAlgorithmButton = uiradiobutton(app.FiniteImpulseResponseFIRorderButtonGroup);
            app.CohensAlgorithmButton.Text = 'Cohen''s Algorithm';
            app.CohensAlgorithmButton.Position = [11 1 119 22];

            % Create ThetaFilterModeDropDownLabel
            app.ThetaFilterModeDropDownLabel = uilabel(app.PowerHilbertTab);
            app.ThetaFilterModeDropDownLabel.HorizontalAlignment = 'right';
            app.ThetaFilterModeDropDownLabel.FontWeight = 'bold';
            app.ThetaFilterModeDropDownLabel.Position = [265 36 105 22];
            app.ThetaFilterModeDropDownLabel.Text = 'Theta Filter Mode';

            % Create ThetaFilterModeDropDown
            app.ThetaFilterModeDropDown = uidropdown(app.PowerHilbertTab);
            app.ThetaFilterModeDropDown.Items = {'FIR', 'cheby1', 'cheby2', 'none'};
            app.ThetaFilterModeDropDown.ValueChangedFcn = createCallbackFcn(app, @ThetaFilterModeDropDownValueChanged, true);
            app.ThetaFilterModeDropDown.Position = [385 36 100 22];
            app.ThetaFilterModeDropDown.Value = 'cheby2';

            % Create HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel = uilabel(app.PowerHilbertTab);
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.FontWeight = 'bold';
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.Position = [8 86 220 27];
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDownLabel.Text = {'10 Hz Lowpass Amplitude'; 'Envelope (not usually recommended)'};

            % Create HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown = uidropdown(app.PowerHilbertTab);
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Items = {'No lowpass', 'Lowpass'};
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Position = [8 63 100 22];
            app.HzLowpassAmplitudeEnvelopenotusuallyrecommendedDropDown.Value = 'No lowpass';

            % Create HilbertEnvelopesButtonGroup
            app.HilbertEnvelopesButtonGroup = uibuttongroup(app.PowerHilbertTab);
            app.HilbertEnvelopesButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @HilbertEnvelopesButtonGroupSelectionChanged, true);
            app.HilbertEnvelopesButtonGroup.Title = 'Hilbert Envelopes';
            app.HilbertEnvelopesButtonGroup.Position = [10 155 182 71];

            % Create CreatenewenvelopefilesButton
            app.CreatenewenvelopefilesButton = uiradiobutton(app.HilbertEnvelopesButtonGroup);
            app.CreatenewenvelopefilesButton.Text = 'Create new envelope files';
            app.CreatenewenvelopefilesButton.Position = [11 25 160 22];
            app.CreatenewenvelopefilesButton.Value = true;

            % Create LoadexistingenvelopefilesButton
            app.LoadexistingenvelopefilesButton = uiradiobutton(app.HilbertEnvelopesButtonGroup);
            app.LoadexistingenvelopefilesButton.Text = 'Load existing envelope files';
            app.LoadexistingenvelopefilesButton.Position = [11 3 169 22];

            % Create PowernewtimefTab
            app.PowernewtimefTab = uitab(app.TabGroup);
            app.PowernewtimefTab.Title = 'Power (newtimef)';

            % Create RejectartifactsfirstCheckBox
            app.RejectartifactsfirstCheckBox = uicheckbox(app.PowernewtimefTab);
            app.RejectartifactsfirstCheckBox.Text = {'Reject artifacts within frequency band of interest '; '(on a per-channel basis) before running newtimef?'};
            app.RejectartifactsfirstCheckBox.Position = [8 193 300 28];

            % Create ofFrequencies5shortrecommended50mid999longEditFieldLabel
            app.ofFrequencies5shortrecommended50mid999longEditFieldLabel = uilabel(app.PowernewtimefTab);
            app.ofFrequencies5shortrecommended50mid999longEditFieldLabel.Position = [8 141 253 41];
            app.ofFrequencies5shortrecommended50mid999longEditFieldLabel.Text = {'How many frequency steps to use in newtimef?'; '(long is 50, short is 5, 999 for padratio)'};

            % Create ofFrequencies5shortrecommended50mid999longEditField
            app.ofFrequencies5shortrecommended50mid999longEditField = uieditfield(app.PowernewtimefTab, 'numeric');
            app.ofFrequencies5shortrecommended50mid999longEditField.HorizontalAlignment = 'left';
            app.ofFrequencies5shortrecommended50mid999longEditField.Position = [279 151 30 26];
            app.ofFrequencies5shortrecommended50mid999longEditField.Value = 5;

            % Create WhatsizetemporalwindowshouldbeusedfornewtimefsecEditFieldLabel
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditFieldLabel = uilabel(app.PowernewtimefTab);
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditFieldLabel.Position = [8 117 347 22];
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditFieldLabel.Text = 'What size temporal window should be used for newtimef (sec)?';

            % Create WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField = uieditfield(app.PowernewtimefTab, 'numeric');
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField.Position = [354 117 20 22];
            app.WhatsizetemporalwindowshouldbeusedfornewtimefsecEditField.Value = 5;

            % Create SpindleDetectionFerrarelliTab
            app.SpindleDetectionFerrarelliTab = uitab(app.TabGroup);
            app.SpindleDetectionFerrarelliTab.Title = 'Spindle Detection (Ferrarelli)';

            % Create Resampleto128HzCheckBox
            app.Resampleto128HzCheckBox = uicheckbox(app.SpindleDetectionFerrarelliTab);
            app.Resampleto128HzCheckBox.Text = 'Should Ferrarelli method resample to 128 Hz?';
            app.Resampleto128HzCheckBox.FontWeight = 'bold';
            app.Resampleto128HzCheckBox.Position = [6 139 286 22];

            % Create Lowpasssigmaenvelopeat2HzCheckBox
            app.Lowpasssigmaenvelopeat2HzCheckBox = uicheckbox(app.SpindleDetectionFerrarelliTab);
            app.Lowpasssigmaenvelopeat2HzCheckBox.Text = 'Should Ferrarelli method lowpass sigma "Envelope" at 2 Hz? ';
            app.Lowpasssigmaenvelopeat2HzCheckBox.FontWeight = 'bold';
            app.Lowpasssigmaenvelopeat2HzCheckBox.Position = [6 71 379 22];

            % Create DrawstagesofwaveformabstractionforFerrarellimethodCheckBox
            app.DrawstagesofwaveformabstractionforFerrarellimethodCheckBox = uicheckbox(app.SpindleDetectionFerrarelliTab);
            app.DrawstagesofwaveformabstractionforFerrarellimethodCheckBox.Text = 'Draw stages of waveform abstraction for Ferrarelli method?';
            app.DrawstagesofwaveformabstractionforFerrarellimethodCheckBox.FontWeight = 'bold';
            app.DrawstagesofwaveformabstractionforFerrarellimethodCheckBox.Position = [6 102 369 22];

            % Create WhatlowerupperthresholdratiostouseLowerThresholdLabel
            app.WhatlowerupperthresholdratiostouseLowerThresholdLabel = uilabel(app.SpindleDetectionFerrarelliTab);
            app.WhatlowerupperthresholdratiostouseLowerThresholdLabel.Position = [9 201 342 22];
            app.WhatlowerupperthresholdratiostouseLowerThresholdLabel.Text = 'What lower/upper threshold ratios to use?      Lower Threshold';

            % Create FerrarelliThresholdLow
            app.FerrarelliThresholdLow = uieditfield(app.SpindleDetectionFerrarelliTab, 'numeric');
            app.FerrarelliThresholdLow.Position = [353 201 28 22];
            app.FerrarelliThresholdLow.Value = 2;

            % Create UpperThresholdLabel
            app.UpperThresholdLabel = uilabel(app.SpindleDetectionFerrarelliTab);
            app.UpperThresholdLabel.Position = [251 172 95 22];
            app.UpperThresholdLabel.Text = 'Upper Threshold';

            % Create FerrarelliThresholdHigh
            app.FerrarelliThresholdHigh = uieditfield(app.SpindleDetectionFerrarelliTab, 'numeric');
            app.FerrarelliThresholdHigh.Position = [353 172 27 22];
            app.FerrarelliThresholdHigh.Value = 8;

            % Create NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label
            app.NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label = uilabel(app.SpindleDetectionFerrarelliTab);
            app.NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label.FontSize = 10;
            app.NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label.FontAngle = 'italic';
            app.NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label.Position = [22 171 222 33];
            app.NoteFerrarelli2010uses210whileMcClainetalBoulderused26Label.Text = {'Note: Ferrarelli,et al. 2007 used [2 8],'; 'while McClain et al. 2016 used [2 6] for the'; 'lower and upper thresholds..'};

            % Create Label_2
            app.Label_2 = uilabel(app.SpindleDetectionFerrarelliTab);
            app.Label_2.FontSize = 10;
            app.Label_2.FontAngle = 'italic';
            app.Label_2.Position = [48 52 333 22];
            app.Label_2.Text = {'If you are not sure, do not do this.... an explanation of the consequences '; 'and potential risks can be found in the PSGpower manual.'};

            % Create Label_3
            app.Label_3 = uilabel(app.SpindleDetectionFerrarelliTab);
            app.Label_3.FontSize = 10;
            app.Label_3.FontAngle = 'italic';
            app.Label_3.Position = [48 126 246 22];
            app.Label_3.Text = '(needed if you want to mirror McClain et al. approach)';

            % Create Label_4
            app.Label_4 = uilabel(app.SpindleDetectionFerrarelliTab);
            app.Label_4.HorizontalAlignment = 'center';
            app.Label_4.FontSize = 13;
            app.Label_4.FontColor = [0.0745 0.6235 1];
            app.Label_4.Position = [52 5 401 30];
            app.Label_4.Text = {'FYI: The Ferrarelli method uses a minimum-order cheby2 filter '; 'with passband corners 11 and 15, and stopband corners 10 and 16.'};

            % Create EnvelopeViewerTab
            app.EnvelopeViewerTab = uitab(app.TabGroup);
            app.EnvelopeViewerTab.Title = 'Envelope Viewer';

            % Create BaselineRemovalChoiceCheckBox
            app.BaselineRemovalChoiceCheckBox = uicheckbox(app.EnvelopeViewerTab);
            app.BaselineRemovalChoiceCheckBox.ValueChangedFcn = createCallbackFcn(app, @BaselineRemovalChoiceCheckBoxValueChanged, true);
            app.BaselineRemovalChoiceCheckBox.Text = {'Subtract a moving-window (local) baseline from'; 'amplitude envelopes?'};
            app.BaselineRemovalChoiceCheckBox.FontSize = 10;
            app.BaselineRemovalChoiceCheckBox.Position = [9 203 234 22];

            % Create GlobalBaslineRemovalChoiceCheckBox
            app.GlobalBaslineRemovalChoiceCheckBox = uicheckbox(app.EnvelopeViewerTab);
            app.GlobalBaslineRemovalChoiceCheckBox.Text = 'Subtract a global baseline from amplitude envelopes?';
            app.GlobalBaslineRemovalChoiceCheckBox.FontSize = 10;
            app.GlobalBaslineRemovalChoiceCheckBox.Position = [9 176 263 22];

            % Create ArtifactNaNChoiceCheckBox
            app.ArtifactNaNChoiceCheckBox = uicheckbox(app.EnvelopeViewerTab);
            app.ArtifactNaNChoiceCheckBox.Text = 'Mark artifactual samples as NaN?';
            app.ArtifactNaNChoiceCheckBox.FontSize = 10;
            app.ArtifactNaNChoiceCheckBox.Position = [9 150 172 22];

            % Create HowlongofawindowshouldbeusedforlocalbaselinesecLabel
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel = uilabel(app.EnvelopeViewerTab);
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.HorizontalAlignment = 'right';
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.FontSize = 10;
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.Position = [300 203 149 22];
            app.HowlongofawindowshouldbeusedforlocalbaselinesecLabel.Text = {'How long of a window should'; 'be used for local baseline (sec)?'};

            % Create BaselineRemovalWindowLengthNumericEditField
            app.BaselineRemovalWindowLengthNumericEditField = uieditfield(app.EnvelopeViewerTab, 'numeric');
            app.BaselineRemovalWindowLengthNumericEditField.Position = [452 203 24 22];

            % Create WhatartifacthandlingmethodshouldbeusedLabel
            app.WhatartifacthandlingmethodshouldbeusedLabel = uilabel(app.EnvelopeViewerTab);
            app.WhatartifacthandlingmethodshouldbeusedLabel.HorizontalAlignment = 'right';
            app.WhatartifacthandlingmethodshouldbeusedLabel.FontSize = 10;
            app.WhatartifacthandlingmethodshouldbeusedLabel.Position = [4 100 216 22];
            app.WhatartifacthandlingmethodshouldbeusedLabel.Text = 'What artifact handling method should be used?';

            % Create ArtifactChoiceDropdown
            app.ArtifactChoiceDropdown = uidropdown(app.EnvelopeViewerTab);
            app.ArtifactChoiceDropdown.Items = {'none', 'smoothed', 'lowlp'};
            app.ArtifactChoiceDropdown.ValueChangedFcn = createCallbackFcn(app, @ArtifactChoiceDropdownValueChanged, true);
            app.ArtifactChoiceDropdown.FontSize = 10;
            app.ArtifactChoiceDropdown.Position = [224 100 82 22];
            app.ArtifactChoiceDropdown.Value = 'none';

            % Create MedianSmoothWindowNumericEditFieldLabel
            app.MedianSmoothWindowNumericEditFieldLabel = uilabel(app.EnvelopeViewerTab);
            app.MedianSmoothWindowNumericEditFieldLabel.HorizontalAlignment = 'right';
            app.MedianSmoothWindowNumericEditFieldLabel.FontSize = 10;
            app.MedianSmoothWindowNumericEditFieldLabel.Position = [305 96 143 34];
            app.MedianSmoothWindowNumericEditFieldLabel.Text = {'How long of a window should '; 'be used for median smoothing '; '(default is 90 sec)?'};

            % Create MedianSmoothWindowNumericEditField
            app.MedianSmoothWindowNumericEditField = uieditfield(app.EnvelopeViewerTab, 'numeric');
            app.MedianSmoothWindowNumericEditField.FontSize = 10;
            app.MedianSmoothWindowNumericEditField.Position = [452 100 32 22];
            app.MedianSmoothWindowNumericEditField.Value = 90;

            % Create QuantifyenvelopesButtonGroup
            app.QuantifyenvelopesButtonGroup = uibuttongroup(app.EnvelopeViewerTab);
            app.QuantifyenvelopesButtonGroup.Title = 'Quantify envelopes:';
            app.QuantifyenvelopesButtonGroup.FontWeight = 'bold';
            app.QuantifyenvelopesButtonGroup.FontSize = 10;
            app.QuantifyenvelopesButtonGroup.Position = [156 7 126 40];

            % Create ByHourButton
            app.ByHourButton = uiradiobutton(app.QuantifyenvelopesButtonGroup);
            app.ByHourButton.Text = 'ByHour';
            app.ByHourButton.FontSize = 10;
            app.ByHourButton.Position = [6 0 55 22];
            app.ByHourButton.Value = true;

            % Create ByStageButton
            app.ByStageButton = uiradiobutton(app.QuantifyenvelopesButtonGroup);
            app.ByStageButton.Text = 'ByStage';
            app.ByStageButton.FontSize = 10;
            app.ByStageButton.Position = [61 1 60 22];

            % Create AverageenvelopesacrossButtonGroup
            app.AverageenvelopesacrossButtonGroup = uibuttongroup(app.EnvelopeViewerTab);
            app.AverageenvelopesacrossButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @AverageenvelopesacrossButtonGroupSelectionChanged, true);
            app.AverageenvelopesacrossButtonGroup.Title = 'Average envelopes across:';
            app.AverageenvelopesacrossButtonGroup.BackgroundColor = [0.9412 0.9412 0.9412];
            app.AverageenvelopesacrossButtonGroup.FontWeight = 'bold';
            app.AverageenvelopesacrossButtonGroup.FontSize = 10;
            app.AverageenvelopesacrossButtonGroup.Position = [9 53 142 41];

            % Create chansButton
            app.chansButton = uiradiobutton(app.AverageenvelopesacrossButtonGroup);
            app.chansButton.Text = 'chans';
            app.chansButton.FontSize = 10;
            app.chansButton.Position = [11 1 49 22];
            app.chansButton.Value = true;

            % Create timeButton
            app.timeButton = uiradiobutton(app.AverageenvelopesacrossButtonGroup);
            app.timeButton.Text = 'time';
            app.timeButton.FontSize = 10;
            app.timeButton.Position = [77 1 41 22];

            % Create WhatenvelopetypeButtonGroup
            app.WhatenvelopetypeButtonGroup = uibuttongroup(app.EnvelopeViewerTab);
            app.WhatenvelopetypeButtonGroup.Title = 'What envelope type?';
            app.WhatenvelopetypeButtonGroup.FontWeight = 'bold';
            app.WhatenvelopetypeButtonGroup.FontSize = 10;
            app.WhatenvelopetypeButtonGroup.Position = [155 53 126 41];

            % Create amplitudeButton
            app.amplitudeButton = uiradiobutton(app.WhatenvelopetypeButtonGroup);
            app.amplitudeButton.Text = 'amplitude';
            app.amplitudeButton.FontSize = 10;
            app.amplitudeButton.Position = [6 1 67 22];
            app.amplitudeButton.Value = true;

            % Create powerButton
            app.powerButton = uiradiobutton(app.WhatenvelopetypeButtonGroup);
            app.powerButton.Text = 'power';
            app.powerButton.FontSize = 10;
            app.powerButton.Position = [73 1 48 22];

            % Create CollateorloadenvelopesButtonGroup
            app.CollateorloadenvelopesButtonGroup = uibuttongroup(app.EnvelopeViewerTab);
            app.CollateorloadenvelopesButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @CollateorloadenvelopesButtonGroupSelectionChanged, true);
            app.CollateorloadenvelopesButtonGroup.Title = 'Collate or load envelopes?';
            app.CollateorloadenvelopesButtonGroup.FontWeight = 'bold';
            app.CollateorloadenvelopesButtonGroup.FontSize = 10;
            app.CollateorloadenvelopesButtonGroup.Position = [9 6 142 41];

            % Create CollateButton
            app.CollateButton = uiradiobutton(app.CollateorloadenvelopesButtonGroup);
            app.CollateButton.Text = 'Collate';
            app.CollateButton.FontSize = 10;
            app.CollateButton.Position = [11 0 53 22];
            app.CollateButton.Value = true;

            % Create LoadButton
            app.LoadButton = uiradiobutton(app.CollateorloadenvelopesButtonGroup);
            app.LoadButton.Text = 'Load';
            app.LoadButton.FontSize = 10;
            app.LoadButton.Position = [77 0 41 22];

            % Create EnvViewerTempROILowNumericEditFieldLabel
            app.EnvViewerTempROILowNumericEditFieldLabel = uilabel(app.EnvelopeViewerTab);
            app.EnvViewerTempROILowNumericEditFieldLabel.HorizontalAlignment = 'right';
            app.EnvViewerTempROILowNumericEditFieldLabel.FontSize = 10;
            app.EnvViewerTempROILowNumericEditFieldLabel.Position = [284 57 138 34];
            app.EnvViewerTempROILowNumericEditFieldLabel.Text = {'What time interval (min) should'; 'envelopes be averaged over'; '(type 999 in either for all)?'};

            % Create EnvViewerTempROILowNumericEditField
            app.EnvViewerTempROILowNumericEditField = uieditfield(app.EnvelopeViewerTab, 'numeric');
            app.EnvViewerTempROILowNumericEditField.FontSize = 10;
            app.EnvViewerTempROILowNumericEditField.Position = [429 63 21 22];

            % Create EnvViewerTempROIHighNumericEditFieldLabel
            app.EnvViewerTempROIHighNumericEditFieldLabel = uilabel(app.EnvelopeViewerTab);
            app.EnvViewerTempROIHighNumericEditFieldLabel.HorizontalAlignment = 'right';
            app.EnvViewerTempROIHighNumericEditFieldLabel.FontSize = 10;
            app.EnvViewerTempROIHighNumericEditFieldLabel.Position = [436 63 25 22];
            app.EnvViewerTempROIHighNumericEditFieldLabel.Text = 'to';

            % Create EnvViewerTempROIHighNumericEditField
            app.EnvViewerTempROIHighNumericEditField = uieditfield(app.EnvelopeViewerTab, 'numeric');
            app.EnvViewerTempROIHighNumericEditField.FontSize = 10;
            app.EnvViewerTempROIHighNumericEditField.Position = [463 63 21 22];
            app.EnvViewerTempROIHighNumericEditField.Value = 60;

            % Create OmitEmptyEnvelopesCheckBox
            app.OmitEmptyEnvelopesCheckBox = uicheckbox(app.EnvelopeViewerTab);
            app.OmitEmptyEnvelopesCheckBox.Text = 'Omit empty plots for EEG files without envelope files?';
            app.OmitEmptyEnvelopesCheckBox.FontSize = 10;
            app.OmitEmptyEnvelopesCheckBox.Position = [9 124 263 22];

            % Create ThetaFilterModeDropDown_EnvViewerLabel
            app.ThetaFilterModeDropDown_EnvViewerLabel = uilabel(app.EnvelopeViewerTab);
            app.ThetaFilterModeDropDown_EnvViewerLabel.HorizontalAlignment = 'right';
            app.ThetaFilterModeDropDown_EnvViewerLabel.FontSize = 10;
            app.ThetaFilterModeDropDown_EnvViewerLabel.FontWeight = 'bold';
            app.ThetaFilterModeDropDown_EnvViewerLabel.Position = [280 151 88 22];
            app.ThetaFilterModeDropDown_EnvViewerLabel.Text = 'Theta Filter Mode';

            % Create ThetaFilterModeDropDown_EnvViewer
            app.ThetaFilterModeDropDown_EnvViewer = uidropdown(app.EnvelopeViewerTab);
            app.ThetaFilterModeDropDown_EnvViewer.Items = {'FIR', 'cheby1', 'cheby2', 'none'};
            app.ThetaFilterModeDropDown_EnvViewer.FontSize = 10;
            app.ThetaFilterModeDropDown_EnvViewer.Position = [383 151 100 22];
            app.ThetaFilterModeDropDown_EnvViewer.Value = 'none';

            % Create PACMuehlrothTab
            app.PACMuehlrothTab = uitab(app.TabGroup);
            app.PACMuehlrothTab.Title = 'PAC (Muehlroth)';

            % Create WIPLabel
            app.WIPLabel = uilabel(app.PACMuehlrothTab);
            app.WIPLabel.Position = [192 130 28 22];
            app.WIPLabel.Text = 'WIP';

            % Create TMRtistryWIPTab
            app.TMRtistryWIPTab = uitab(app.TabGroup);
            app.TMRtistryWIPTab.Title = 'TMRtistry (WIP)';

            % Create TMRtistrySettingsButton
            app.TMRtistrySettingsButton = uibutton(app.TMRtistryWIPTab, 'push');
            app.TMRtistrySettingsButton.ButtonPushedFcn = createCallbackFcn(app, @TMRtistrySettingsButtonPush, true);
            app.TMRtistrySettingsButton.Position = [402 50 54 22];
            app.TMRtistrySettingsButton.Text = 'Import';

            % Create TMRtistrySettingsLampLabel
            app.TMRtistrySettingsLampLabel = uilabel(app.TMRtistryWIPTab);
            app.TMRtistrySettingsLampLabel.HorizontalAlignment = 'right';
            app.TMRtistrySettingsLampLabel.Position = [293 50 103 22];
            app.TMRtistrySettingsLampLabel.Text = 'TMRtistry Settings';

            % Create TMRtistrySettingsLamp
            app.TMRtistrySettingsLamp = uilamp(app.TMRtistryWIPTab);
            app.TMRtistrySettingsLamp.Position = [466 54 13 13];
            app.TMRtistrySettingsLamp.Color = [1 0 0];

            % Create TMRtistryScriptImportButton
            app.TMRtistryScriptImportButton = uibutton(app.TMRtistryWIPTab, 'push');
            app.TMRtistryScriptImportButton.ButtonPushedFcn = createCallbackFcn(app, @TMRtistryScriptButtonPush, true);
            app.TMRtistryScriptImportButton.Position = [402 20 54 22];
            app.TMRtistryScriptImportButton.Text = 'Import';

            % Create TMRtistryCustomScriptLampLabel
            app.TMRtistryCustomScriptLampLabel = uilabel(app.TMRtistryWIPTab);
            app.TMRtistryCustomScriptLampLabel.HorizontalAlignment = 'right';
            app.TMRtistryCustomScriptLampLabel.Position = [261 20 135 22];
            app.TMRtistryCustomScriptLampLabel.Text = 'TMRtistry Custom Script';

            % Create TMRtistryCustomScriptLamp
            app.TMRtistryCustomScriptLamp = uilamp(app.TMRtistryWIPTab);
            app.TMRtistryCustomScriptLamp.Position = [466 24 13 13];
            app.TMRtistryCustomScriptLamp.Color = [1 0 0];

            % Create SpectrogramViewerTab
            app.SpectrogramViewerTab = uitab(app.TabGroup);
            app.SpectrogramViewerTab.Title = 'Spectrogram Viewer';

            % Create UnderconstructionGaugeLabel
            app.UnderconstructionGaugeLabel = uilabel(app.SpectrogramViewerTab);
            app.UnderconstructionGaugeLabel.HorizontalAlignment = 'center';
            app.UnderconstructionGaugeLabel.Position = [354 18 116 22];
            app.UnderconstructionGaugeLabel.Text = 'Under construction...';

            % Create UnderconstructionGauge
            app.UnderconstructionGauge = uigauge(app.SpectrogramViewerTab, 'linear');
            app.UnderconstructionGauge.Position = [351 55 119 40];

            % Create HowmanyfrequenciesLabel
            app.HowmanyfrequenciesLabel = uilabel(app.SpectrogramViewerTab);
            app.HowmanyfrequenciesLabel.HorizontalAlignment = 'right';
            app.HowmanyfrequenciesLabel.Position = [5 190 134 22];
            app.HowmanyfrequenciesLabel.Text = 'How many frequencies?';

            % Create HowmanyfrequenciesEditField
            app.HowmanyfrequenciesEditField = uieditfield(app.SpectrogramViewerTab, 'text');
            app.HowmanyfrequenciesEditField.Position = [154 190 100 22];

            % Create WhatelectrodeLabel
            app.WhatelectrodeLabel = uilabel(app.SpectrogramViewerTab);
            app.WhatelectrodeLabel.HorizontalAlignment = 'right';
            app.WhatelectrodeLabel.Position = [46 148 93 22];
            app.WhatelectrodeLabel.Text = 'What electrode?';

            % Create WhatelectrodeEditField
            app.WhatelectrodeEditField = uieditfield(app.SpectrogramViewerTab, 'text');
            app.WhatelectrodeEditField.Position = [154 148 100 22];

            % Create SavetifsCheckBox
            app.SavetifsCheckBox = uicheckbox(app.SpectrogramViewerTab);
            app.SavetifsCheckBox.Text = 'Save .tifs?';
            app.SavetifsCheckBox.Position = [321 190 78 22];

            % Create SavetifmetasCheckBox
            app.SavetifmetasCheckBox = uicheckbox(app.SpectrogramViewerTab);
            app.SavetifmetasCheckBox.Text = 'Save .tif metas?';
            app.SavetifmetasCheckBox.Position = [321 148 108 22];

            % Create ModulespecificParametersLabel
            app.ModulespecificParametersLabel = uilabel(app.Step2SelectsignalprocessingapproachPanel);
            app.ModulespecificParametersLabel.FontAngle = 'italic';
            app.ModulespecificParametersLabel.Position = [7 260 160 22];
            app.ModulespecificParametersLabel.Text = 'Module-specific Parameters';

            % Create AnalysisModuleselectoneDropDownLabel
            app.AnalysisModuleselectoneDropDownLabel = uilabel(app.Step2SelectsignalprocessingapproachPanel);
            app.AnalysisModuleselectoneDropDownLabel.FontWeight = 'bold';
            app.AnalysisModuleselectoneDropDownLabel.Position = [7 281 170 22];
            app.AnalysisModuleselectoneDropDownLabel.Text = 'Analysis Module (select one)';

            % Create AnalysisModuleselectoneDropDown
            app.AnalysisModuleselectoneDropDown = uidropdown(app.Step2SelectsignalprocessingapproachPanel);
            app.AnalysisModuleselectoneDropDown.Items = {' ', 'Hypnogram', 'Spectra (EEGLAB)', 'Spectra (FieldTrip)', 'Spectra (newtimef)', 'Power (Hilbert)', 'Power (newtimef)', 'Spindle Detection (Ferrarelli)', 'Envelope Viewer', 'TMRtistry (WIP)', 'PAC (Muehlroth)', 'Spectrogram Viewer'};
            app.AnalysisModuleselectoneDropDown.ValueChangedFcn = createCallbackFcn(app, @AnalysisModuleselectoneDropDownValueChanged, true);
            app.AnalysisModuleselectoneDropDown.FontName = 'Arial';
            app.AnalysisModuleselectoneDropDown.Position = [209 281 173 22];
            app.AnalysisModuleselectoneDropDown.Value = ' ';

            % Create Step3InitializeFrequencyBandsPanel
            app.Step3InitializeFrequencyBandsPanel = uipanel(app.UIFigure);
            app.Step3InitializeFrequencyBandsPanel.Title = 'Step 3: Initialize Frequency Bands';
            app.Step3InitializeFrequencyBandsPanel.SizeChangedFcn = createCallbackFcn(app, @SubdeltaCheckBoxValueChanged, true);
            app.Step3InitializeFrequencyBandsPanel.FontWeight = 'bold';
            app.Step3InitializeFrequencyBandsPanel.FontSize = 15;
            app.Step3InitializeFrequencyBandsPanel.Position = [11 10 600 347];

            % Create SubdeltaCheckBox
            app.SubdeltaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaCheckBox.ValueChangedFcn = createCallbackFcn(app, @SubdeltaCheckBoxValueChanged, true);
            app.SubdeltaCheckBox.Enable = 'off';
            app.SubdeltaCheckBox.Text = 'Subdelta';
            app.SubdeltaCheckBox.Position = [10 261 69 22];

            % Create DeltaCheckBox
            app.DeltaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaCheckBox.ValueChangedFcn = createCallbackFcn(app, @DeltaCheckBoxValueChanged, true);
            app.DeltaCheckBox.Enable = 'off';
            app.DeltaCheckBox.Text = 'Delta';
            app.DeltaCheckBox.Position = [10 234 50 22];

            % Create ThetaCheckBox
            app.ThetaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaCheckBox.ValueChangedFcn = createCallbackFcn(app, @ThetaCheckBoxValueChanged, true);
            app.ThetaCheckBox.Enable = 'off';
            app.ThetaCheckBox.Text = 'Theta';
            app.ThetaCheckBox.Position = [10 207 53 22];

            % Create AlphaCheckBox
            app.AlphaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaCheckBox.ValueChangedFcn = createCallbackFcn(app, @AlphaCheckBoxValueChanged, true);
            app.AlphaCheckBox.Enable = 'off';
            app.AlphaCheckBox.Text = 'Alpha';
            app.AlphaCheckBox.Position = [10 180 53 22];

            % Create SigmaCheckBox
            app.SigmaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaCheckBox.ValueChangedFcn = createCallbackFcn(app, @SigmaCheckBoxValueChanged, true);
            app.SigmaCheckBox.Enable = 'off';
            app.SigmaCheckBox.Text = 'Sigma';
            app.SigmaCheckBox.Position = [10 153 56 22];

            % Create BetaCheckBox
            app.BetaCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaCheckBox.ValueChangedFcn = createCallbackFcn(app, @BetaCheckBoxValueChanged, true);
            app.BetaCheckBox.Enable = 'off';
            app.BetaCheckBox.Text = 'Beta';
            app.BetaCheckBox.Position = [10 126 47 22];

            % Create GammalowCheckBox
            app.GammalowCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowCheckBox.ValueChangedFcn = createCallbackFcn(app, @GammalowCheckBoxValueChanged, true);
            app.GammalowCheckBox.Enable = 'off';
            app.GammalowCheckBox.Text = 'Gamma (low)';
            app.GammalowCheckBox.Position = [10 99 94 22];

            % Create FullbandCheckBox
            app.FullbandCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandCheckBox.ValueChangedFcn = createCallbackFcn(app, @FullbandCheckBoxValueChanged, true);
            app.FullbandCheckBox.Enable = 'off';
            app.FullbandCheckBox.Text = 'Full Band';
            app.FullbandCheckBox.Position = [10 30 73 22];

            % Create EEGBandsLabel
            app.EEGBandsLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.EEGBandsLabel.FontWeight = 'bold';
            app.EEGBandsLabel.Position = [13 301 71 22];
            app.EEGBandsLabel.Text = 'EEG Bands';

            % Create FrequencyBandwidthLabel
            app.FrequencyBandwidthLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.FrequencyBandwidthLabel.FontWeight = 'bold';
            app.FrequencyBandwidthLabel.Position = [109 301 131 22];
            app.FrequencyBandwidthLabel.Text = 'Frequency Bandwidth';

            % Create SleepStagesLabel
            app.SleepStagesLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.SleepStagesLabel.FontWeight = 'bold';
            app.SleepStagesLabel.Position = [293 301 80 22];
            app.SleepStagesLabel.Text = 'Sleep Stages';

            % Create SubdeltaLowLimFreq
            app.SubdeltaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SubdeltaLowLimFreq.HorizontalAlignment = 'center';
            app.SubdeltaLowLimFreq.Enable = 'off';
            app.SubdeltaLowLimFreq.Position = [116 261 33 22];
            app.SubdeltaLowLimFreq.Value = 0.1;

            % Create DeltaLowLimFreq
            app.DeltaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.DeltaLowLimFreq.HorizontalAlignment = 'center';
            app.DeltaLowLimFreq.Enable = 'off';
            app.DeltaLowLimFreq.Position = [116 234 33 22];
            app.DeltaLowLimFreq.Value = 0.5;

            % Create ThetaLowLimFreq
            app.ThetaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.ThetaLowLimFreq.HorizontalAlignment = 'center';
            app.ThetaLowLimFreq.Enable = 'off';
            app.ThetaLowLimFreq.Position = [116 207 33 22];
            app.ThetaLowLimFreq.Value = 4;

            % Create AlphaLowLimFreq
            app.AlphaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.AlphaLowLimFreq.HorizontalAlignment = 'center';
            app.AlphaLowLimFreq.Enable = 'off';
            app.AlphaLowLimFreq.Position = [116 180 33 22];
            app.AlphaLowLimFreq.Value = 8;

            % Create SigmaLowLimFreq
            app.SigmaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SigmaLowLimFreq.HorizontalAlignment = 'center';
            app.SigmaLowLimFreq.Enable = 'off';
            app.SigmaLowLimFreq.Position = [116 153 33 22];
            app.SigmaLowLimFreq.Value = 12;

            % Create BetaLowLimFreq
            app.BetaLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.BetaLowLimFreq.HorizontalAlignment = 'center';
            app.BetaLowLimFreq.Enable = 'off';
            app.BetaLowLimFreq.Position = [116 126 33 22];
            app.BetaLowLimFreq.Value = 16;

            % Create GammalowLowLimFreq
            app.GammalowLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.GammalowLowLimFreq.HorizontalAlignment = 'center';
            app.GammalowLowLimFreq.Enable = 'off';
            app.GammalowLowLimFreq.Position = [116 99 33 22];
            app.GammalowLowLimFreq.Value = 30;

            % Create FullbandLowLimFreq
            app.FullbandLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.FullbandLowLimFreq.RoundFractionalValues = 'on';
            app.FullbandLowLimFreq.HorizontalAlignment = 'center';
            app.FullbandLowLimFreq.Enable = 'off';
            app.FullbandLowLimFreq.Position = [116 30 33 22];

            % Create SubdeltatoLabel
            app.SubdeltatoLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltatoLabel.Position = [158 264 12 17];
            app.SubdeltatoLabel.Text = 'to';

            % Create DeltatoLabel_2
            app.DeltatoLabel_2 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.DeltatoLabel_2.Position = [158 237 12 17];
            app.DeltatoLabel_2.Text = 'to';

            % Create ThetatoLabel_3
            app.ThetatoLabel_3 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.ThetatoLabel_3.Position = [158 210 12 17];
            app.ThetatoLabel_3.Text = 'to';

            % Create AlphatoLabel_4
            app.AlphatoLabel_4 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.AlphatoLabel_4.Position = [158 183 12 17];
            app.AlphatoLabel_4.Text = 'to';

            % Create SigmatoLabel_5
            app.SigmatoLabel_5 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.SigmatoLabel_5.Position = [158 156 12 17];
            app.SigmatoLabel_5.Text = 'to';

            % Create BetatoLabel_6
            app.BetatoLabel_6 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.BetatoLabel_6.Position = [158 129 12 17];
            app.BetatoLabel_6.Text = 'to';

            % Create GammalowtoLabel_7
            app.GammalowtoLabel_7 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowtoLabel_7.Position = [158 102 12 17];
            app.GammalowtoLabel_7.Text = 'to';

            % Create FullbandtoLabel
            app.FullbandtoLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandtoLabel.Position = [158 33 12 17];
            app.FullbandtoLabel.Text = 'to';

            % Create SubdeltaHighLimFreq
            app.SubdeltaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SubdeltaHighLimFreq.HorizontalAlignment = 'center';
            app.SubdeltaHighLimFreq.Enable = 'off';
            app.SubdeltaHighLimFreq.Position = [178 261 33 22];
            app.SubdeltaHighLimFreq.Value = 0.5;

            % Create DeltaHighLimFreq
            app.DeltaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.DeltaHighLimFreq.HorizontalAlignment = 'center';
            app.DeltaHighLimFreq.Enable = 'off';
            app.DeltaHighLimFreq.Position = [178 234 33 22];
            app.DeltaHighLimFreq.Value = 4;

            % Create ThetaHighLimFreq
            app.ThetaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.ThetaHighLimFreq.HorizontalAlignment = 'center';
            app.ThetaHighLimFreq.Enable = 'off';
            app.ThetaHighLimFreq.Position = [178 207 33 22];
            app.ThetaHighLimFreq.Value = 8;

            % Create AlphaHighLimFreq
            app.AlphaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.AlphaHighLimFreq.HorizontalAlignment = 'center';
            app.AlphaHighLimFreq.Enable = 'off';
            app.AlphaHighLimFreq.Position = [178 180 33 22];
            app.AlphaHighLimFreq.Value = 12;

            % Create SigmaHighLimFreq
            app.SigmaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SigmaHighLimFreq.HorizontalAlignment = 'center';
            app.SigmaHighLimFreq.Enable = 'off';
            app.SigmaHighLimFreq.Position = [178 153 33 22];
            app.SigmaHighLimFreq.Value = 16;

            % Create BetaHighLimFreq
            app.BetaHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.BetaHighLimFreq.HorizontalAlignment = 'center';
            app.BetaHighLimFreq.Enable = 'off';
            app.BetaHighLimFreq.Position = [178 126 33 22];
            app.BetaHighLimFreq.Value = 30;

            % Create GammalowHighLimFreq
            app.GammalowHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.GammalowHighLimFreq.HorizontalAlignment = 'center';
            app.GammalowHighLimFreq.Enable = 'off';
            app.GammalowHighLimFreq.Position = [178 99 33 22];
            app.GammalowHighLimFreq.Value = 50;

            % Create FullbandHighLimFreq
            app.FullbandHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.FullbandHighLimFreq.HorizontalAlignment = 'center';
            app.FullbandHighLimFreq.Enable = 'off';
            app.FullbandHighLimFreq.Position = [178 30 33 22];
            app.FullbandHighLimFreq.Value = 80;

            % Create HzLabel
            app.HzLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel.Position = [223 261 25 22];
            app.HzLabel.Text = 'Hz';

            % Create HzLabel_2
            app.HzLabel_2 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_2.Position = [223 234 25 22];
            app.HzLabel_2.Text = 'Hz';

            % Create HzLabel_3
            app.HzLabel_3 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_3.Position = [223 207 25 22];
            app.HzLabel_3.Text = 'Hz';

            % Create HzLabel_4
            app.HzLabel_4 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_4.Position = [223 180 25 22];
            app.HzLabel_4.Text = 'Hz';

            % Create HzLabel_5
            app.HzLabel_5 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_5.Position = [223 153 25 22];
            app.HzLabel_5.Text = 'Hz';

            % Create HzLabel_6
            app.HzLabel_6 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_6.Position = [223 126 25 22];
            app.HzLabel_6.Text = 'Hz';

            % Create HzLabel_7
            app.HzLabel_7 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_7.Position = [223 99 25 22];
            app.HzLabel_7.Text = 'Hz';

            % Create HzLabel_9
            app.HzLabel_9 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_9.Position = [223 30 25 22];
            app.HzLabel_9.Text = 'Hz';

            % Create SubdeltaN1
            app.SubdeltaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaN1.Enable = 'off';
            app.SubdeltaN1.Text = '';
            app.SubdeltaN1.Position = [273 261 14 22];

            % Create DeltaN1
            app.DeltaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaN1.Enable = 'off';
            app.DeltaN1.Text = '';
            app.DeltaN1.Position = [273 234 14 22];

            % Create ThetaN1
            app.ThetaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaN1.Enable = 'off';
            app.ThetaN1.Text = '';
            app.ThetaN1.Position = [273 207 14 22];

            % Create AlphaN1
            app.AlphaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaN1.Enable = 'off';
            app.AlphaN1.Text = '';
            app.AlphaN1.Position = [273 180 14 22];

            % Create SigmaN1
            app.SigmaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaN1.Enable = 'off';
            app.SigmaN1.Text = '';
            app.SigmaN1.Position = [273 153 14 22];

            % Create BetaN1
            app.BetaN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaN1.Enable = 'off';
            app.BetaN1.Text = '';
            app.BetaN1.Position = [273 126 14 22];

            % Create GammalowN1
            app.GammalowN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowN1.Enable = 'off';
            app.GammalowN1.Text = '';
            app.GammalowN1.Position = [273 99 14 22];

            % Create FullbandN1
            app.FullbandN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandN1.Enable = 'off';
            app.FullbandN1.Text = '';
            app.FullbandN1.Position = [273 30 14 22];

            % Create N1Label
            app.N1Label = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.N1Label.HorizontalAlignment = 'center';
            app.N1Label.Position = [267 281 25 22];
            app.N1Label.Text = 'N1';

            % Create SubdeltaN2
            app.SubdeltaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaN2.Enable = 'off';
            app.SubdeltaN2.Text = '';
            app.SubdeltaN2.Position = [295 261 14 22];

            % Create DeltaN2
            app.DeltaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaN2.Enable = 'off';
            app.DeltaN2.Text = '';
            app.DeltaN2.Position = [295 234 14 22];

            % Create ThetaN2
            app.ThetaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaN2.Enable = 'off';
            app.ThetaN2.Text = '';
            app.ThetaN2.Position = [295 207 14 22];

            % Create AlphaN2
            app.AlphaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaN2.Enable = 'off';
            app.AlphaN2.Text = '';
            app.AlphaN2.Position = [295 180 14 22];

            % Create SigmaN2
            app.SigmaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaN2.Enable = 'off';
            app.SigmaN2.Text = '';
            app.SigmaN2.Position = [295 153 14 22];

            % Create BetaN2
            app.BetaN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaN2.Enable = 'off';
            app.BetaN2.Text = '';
            app.BetaN2.Position = [295 126 14 22];

            % Create GammalowN2
            app.GammalowN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowN2.Enable = 'off';
            app.GammalowN2.Text = '';
            app.GammalowN2.Position = [295 99 14 22];

            % Create FullbandN2
            app.FullbandN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandN2.Enable = 'off';
            app.FullbandN2.Text = '';
            app.FullbandN2.Position = [295 30 14 22];

            % Create N2Label
            app.N2Label = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.N2Label.HorizontalAlignment = 'center';
            app.N2Label.Position = [289 281 25 22];
            app.N2Label.Text = 'N2';

            % Create SubdeltaN3
            app.SubdeltaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaN3.Enable = 'off';
            app.SubdeltaN3.Text = '';
            app.SubdeltaN3.Position = [317 261 14 22];

            % Create DeltaN3
            app.DeltaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaN3.Enable = 'off';
            app.DeltaN3.Text = '';
            app.DeltaN3.Position = [317 234 14 22];

            % Create ThetaN3
            app.ThetaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaN3.Enable = 'off';
            app.ThetaN3.Text = '';
            app.ThetaN3.Position = [317 207 14 22];

            % Create AlphaN3
            app.AlphaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaN3.Enable = 'off';
            app.AlphaN3.Text = '';
            app.AlphaN3.Position = [317 180 14 22];

            % Create SigmaN3
            app.SigmaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaN3.Enable = 'off';
            app.SigmaN3.Text = '';
            app.SigmaN3.Position = [317 153 14 22];

            % Create BetaN3
            app.BetaN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaN3.Enable = 'off';
            app.BetaN3.Text = '';
            app.BetaN3.Position = [317 126 14 22];

            % Create GammalowN3
            app.GammalowN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowN3.Enable = 'off';
            app.GammalowN3.Text = '';
            app.GammalowN3.Position = [317 99 14 22];

            % Create FullbandN3
            app.FullbandN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandN3.Enable = 'off';
            app.FullbandN3.Text = '';
            app.FullbandN3.Position = [317 30 14 22];

            % Create N3Label
            app.N3Label = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.N3Label.HorizontalAlignment = 'center';
            app.N3Label.Position = [311 281 25 22];
            app.N3Label.Text = 'N3';

            % Create SubdeltaR
            app.SubdeltaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaR.Enable = 'off';
            app.SubdeltaR.Text = '';
            app.SubdeltaR.Position = [361 261 14 22];

            % Create DeltaR
            app.DeltaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaR.Enable = 'off';
            app.DeltaR.Text = '';
            app.DeltaR.Position = [361 234 14 22];

            % Create ThetaR
            app.ThetaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaR.Enable = 'off';
            app.ThetaR.Text = '';
            app.ThetaR.Position = [361 207 14 22];

            % Create AlphaR
            app.AlphaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaR.Enable = 'off';
            app.AlphaR.Text = '';
            app.AlphaR.Position = [361 180 14 22];

            % Create SigmaR
            app.SigmaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaR.Enable = 'off';
            app.SigmaR.Text = '';
            app.SigmaR.Position = [361 153 14 22];

            % Create BetaR
            app.BetaR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaR.Enable = 'off';
            app.BetaR.Text = '';
            app.BetaR.Position = [361 126 14 22];

            % Create GammalowR
            app.GammalowR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowR.Enable = 'off';
            app.GammalowR.Text = '';
            app.GammalowR.Position = [361 99 14 22];

            % Create FullbandR
            app.FullbandR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandR.Enable = 'off';
            app.FullbandR.Text = '';
            app.FullbandR.Position = [361 30 14 22];

            % Create RLabel
            app.RLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.RLabel.HorizontalAlignment = 'center';
            app.RLabel.Position = [355 281 25 22];
            app.RLabel.Text = 'R';

            % Create SubdeltaW
            app.SubdeltaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaW.Enable = 'off';
            app.SubdeltaW.Text = '';
            app.SubdeltaW.Position = [383 261 14 22];

            % Create DeltaW
            app.DeltaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaW.Enable = 'off';
            app.DeltaW.Text = '';
            app.DeltaW.Position = [383 234 14 22];

            % Create ThetaW
            app.ThetaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaW.Enable = 'off';
            app.ThetaW.Text = '';
            app.ThetaW.Position = [383 207 14 22];

            % Create AlphaW
            app.AlphaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaW.Enable = 'off';
            app.AlphaW.Text = '';
            app.AlphaW.Position = [383 180 14 22];

            % Create SigmaW
            app.SigmaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaW.Enable = 'off';
            app.SigmaW.Text = '';
            app.SigmaW.Position = [383 153 14 22];

            % Create BetaW
            app.BetaW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaW.Enable = 'off';
            app.BetaW.Text = '';
            app.BetaW.Position = [383 126 14 22];

            % Create GammalowW
            app.GammalowW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowW.Enable = 'off';
            app.GammalowW.Text = '';
            app.GammalowW.Position = [383 99 14 22];

            % Create FullbandW
            app.FullbandW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandW.Enable = 'off';
            app.FullbandW.Text = '';
            app.FullbandW.Position = [383 30 14 22];

            % Create WLabel
            app.WLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.WLabel.HorizontalAlignment = 'center';
            app.WLabel.Position = [377 281 25 22];
            app.WLabel.Text = 'W';

            % Create SubdeltaN4
            app.SubdeltaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SubdeltaN4.Enable = 'off';
            app.SubdeltaN4.Text = '';
            app.SubdeltaN4.Position = [339 261 14 22];

            % Create DeltaN4
            app.DeltaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.DeltaN4.Enable = 'off';
            app.DeltaN4.Text = '';
            app.DeltaN4.Position = [339 234 14 22];

            % Create ThetaN4
            app.ThetaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.ThetaN4.Enable = 'off';
            app.ThetaN4.Text = '';
            app.ThetaN4.Position = [339 207 14 22];

            % Create AlphaN4
            app.AlphaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.AlphaN4.Enable = 'off';
            app.AlphaN4.Text = '';
            app.AlphaN4.Position = [339 180 14 22];

            % Create SigmaN4
            app.SigmaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SigmaN4.Enable = 'off';
            app.SigmaN4.Text = '';
            app.SigmaN4.Position = [339 153 14 22];

            % Create BetaN4
            app.BetaN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.BetaN4.Enable = 'off';
            app.BetaN4.Text = '';
            app.BetaN4.Position = [339 126 14 22];

            % Create GammalowN4
            app.GammalowN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.GammalowN4.Enable = 'off';
            app.GammalowN4.Text = '';
            app.GammalowN4.Position = [339 99 14 22];

            % Create FullbandN4
            app.FullbandN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.FullbandN4.Enable = 'off';
            app.FullbandN4.Text = '';
            app.FullbandN4.Position = [339 30 14 22];

            % Create N4Label
            app.N4Label = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.N4Label.HorizontalAlignment = 'center';
            app.N4Label.Position = [333 281 25 22];
            app.N4Label.Text = 'N4';

            % Create ArtifactThresholdLabel
            app.ArtifactThresholdLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.ArtifactThresholdLabel.FontWeight = 'bold';
            app.ArtifactThresholdLabel.Position = [422 301 109 22];
            app.ArtifactThresholdLabel.Text = 'Artifact Threshold';

            % Create SubdeltaArtifact
            app.SubdeltaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SubdeltaArtifact.HorizontalAlignment = 'center';
            app.SubdeltaArtifact.Enable = 'off';
            app.SubdeltaArtifact.Position = [460 261 33 22];
            app.SubdeltaArtifact.Value = 250;

            % Create DeltaArtifact
            app.DeltaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.DeltaArtifact.HorizontalAlignment = 'center';
            app.DeltaArtifact.Enable = 'off';
            app.DeltaArtifact.Position = [460 234 33 22];
            app.DeltaArtifact.Value = 250;

            % Create ThetaArtifact
            app.ThetaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.ThetaArtifact.HorizontalAlignment = 'center';
            app.ThetaArtifact.Enable = 'off';
            app.ThetaArtifact.Position = [460 207 33 22];
            app.ThetaArtifact.Value = 150;

            % Create AlphaArtifact
            app.AlphaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.AlphaArtifact.HorizontalAlignment = 'center';
            app.AlphaArtifact.Enable = 'off';
            app.AlphaArtifact.Position = [460 180 33 22];
            app.AlphaArtifact.Value = 100;

            % Create SigmaArtifact
            app.SigmaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SigmaArtifact.ValueChangedFcn = createCallbackFcn(app, @SigmaCheckBoxValueChanged, true);
            app.SigmaArtifact.HorizontalAlignment = 'center';
            app.SigmaArtifact.Enable = 'off';
            app.SigmaArtifact.Position = [460 153 33 22];
            app.SigmaArtifact.Value = 75;

            % Create BetaArtifact
            app.BetaArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.BetaArtifact.HorizontalAlignment = 'center';
            app.BetaArtifact.Enable = 'off';
            app.BetaArtifact.Position = [460 126 33 22];
            app.BetaArtifact.Value = 75;

            % Create GammalowArtifact
            app.GammalowArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.GammalowArtifact.HorizontalAlignment = 'center';
            app.GammalowArtifact.Enable = 'off';
            app.GammalowArtifact.Position = [460 99 33 22];
            app.GammalowArtifact.Value = 75;

            % Create FullbandArtifact
            app.FullbandArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.FullbandArtifact.HorizontalAlignment = 'center';
            app.FullbandArtifact.Enable = 'off';
            app.FullbandArtifact.Position = [460 30 33 22];

            % Create SleepbandCheckBox
            app.SleepbandCheckBox = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandCheckBox.ValueChangedFcn = createCallbackFcn(app, @SleepbandCheckBoxValueChanged, true);
            app.SleepbandCheckBox.Enable = 'off';
            app.SleepbandCheckBox.Text = 'Sleep Band';
            app.SleepbandCheckBox.Position = [10 4 84 22];

            % Create SleepbandLowLimFreq
            app.SleepbandLowLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SleepbandLowLimFreq.HorizontalAlignment = 'center';
            app.SleepbandLowLimFreq.Enable = 'off';
            app.SleepbandLowLimFreq.Position = [116 4 33 22];
            app.SleepbandLowLimFreq.Value = 0.5;

            % Create SleepbandtoLabel
            app.SleepbandtoLabel = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandtoLabel.Position = [158 7 12 17];
            app.SleepbandtoLabel.Text = 'to';

            % Create SleepbandHighLimFreq
            app.SleepbandHighLimFreq = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SleepbandHighLimFreq.HorizontalAlignment = 'center';
            app.SleepbandHighLimFreq.Enable = 'off';
            app.SleepbandHighLimFreq.Position = [178 4 33 22];
            app.SleepbandHighLimFreq.Value = 20;

            % Create HzLabel_10
            app.HzLabel_10 = uilabel(app.Step3InitializeFrequencyBandsPanel);
            app.HzLabel_10.Position = [223 4 25 22];
            app.HzLabel_10.Text = 'Hz';

            % Create SleepbandN1
            app.SleepbandN1 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandN1.Enable = 'off';
            app.SleepbandN1.Text = '';
            app.SleepbandN1.Position = [273 4 14 22];

            % Create SleepbandN2
            app.SleepbandN2 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandN2.Enable = 'off';
            app.SleepbandN2.Text = '';
            app.SleepbandN2.Position = [295 4 14 22];

            % Create SleepbandN3
            app.SleepbandN3 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandN3.Enable = 'off';
            app.SleepbandN3.Text = '';
            app.SleepbandN3.Position = [317 4 14 22];

            % Create SleepbandR
            app.SleepbandR = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandR.Enable = 'off';
            app.SleepbandR.Text = '';
            app.SleepbandR.Position = [361 4 14 22];

            % Create SleepbandW
            app.SleepbandW = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandW.Enable = 'off';
            app.SleepbandW.Text = '';
            app.SleepbandW.Position = [383 4 14 22];

            % Create SleepbandN4
            app.SleepbandN4 = uicheckbox(app.Step3InitializeFrequencyBandsPanel);
            app.SleepbandN4.Enable = 'off';
            app.SleepbandN4.Text = '';
            app.SleepbandN4.Position = [339 4 14 22];

            % Create SleepbandArtifact
            app.SleepbandArtifact = uieditfield(app.Step3InitializeFrequencyBandsPanel, 'numeric');
            app.SleepbandArtifact.HorizontalAlignment = 'center';
            app.SleepbandArtifact.Enable = 'off';
            app.SleepbandArtifact.Position = [460 4 33 22];

            % Create AllStagesButton
            app.AllStagesButton = uibutton(app.Step3InitializeFrequencyBandsPanel, 'push');
            app.AllStagesButton.ButtonPushedFcn = createCallbackFcn(app, @AllStagesButtonPushed, true);
            app.AllStagesButton.Position = [498 4 100 22];
            app.AllStagesButton.Text = 'All Stages';

            % Create AllBandsButton
            app.AllBandsButton = uibutton(app.Step3InitializeFrequencyBandsPanel, 'push');
            app.AllBandsButton.ButtonPushedFcn = createCallbackFcn(app, @AllBandsButtonPushed, true);
            app.AllBandsButton.Position = [498 30 100 22];
            app.AllBandsButton.Text = 'All Bands';

            % Create Step4OptionalSettingsPanel
            app.Step4OptionalSettingsPanel = uipanel(app.UIFigure);
            app.Step4OptionalSettingsPanel.Title = 'Step 4: Optional Settings';
            app.Step4OptionalSettingsPanel.FontWeight = 'bold';
            app.Step4OptionalSettingsPanel.FontSize = 15;
            app.Step4OptionalSettingsPanel.Position = [621 74 504 283];

            % Create ForcerecreationofEEGLABsetfilesCheckBox
            app.ForcerecreationofEEGLABsetfilesCheckBox = uicheckbox(app.Step4OptionalSettingsPanel);
            app.ForcerecreationofEEGLABsetfilesCheckBox.ValueChangedFcn = createCallbackFcn(app, @ForcerecreationofEEGLABsetfilesCheckBoxValueChanged, true);
            app.ForcerecreationofEEGLABsetfilesCheckBox.Text = 'Force recreation of EEGLAB .set files';
            app.ForcerecreationofEEGLABsetfilesCheckBox.FontWeight = 'bold';
            app.ForcerecreationofEEGLABsetfilesCheckBox.Position = [10 122 237 22];
            app.ForcerecreationofEEGLABsetfilesCheckBox.Value = true;

            % Create DownsampletoHzCheckBox
            app.DownsampletoHzCheckBox = uicheckbox(app.Step4OptionalSettingsPanel);
            app.DownsampletoHzCheckBox.Text = 'Downsample to                Hz';
            app.DownsampletoHzCheckBox.Position = [290 101 173 22];

            % Create SampRateisHighLabel
            app.SampRateisHighLabel = uilabel(app.Step4OptionalSettingsPanel);
            app.SampRateisHighLabel.FontSize = 10;
            app.SampRateisHighLabel.FontAngle = 'italic';
            app.SampRateisHighLabel.Position = [290 129 209 33];
            app.SampRateisHighLabel.Text = {'EEG sample rate is high. You may want to'; 'downsample to a lower sampling frequency to'; 'improve compute times.'; ''};

            % Create RereferenceEEGDatatoButtonGroup
            app.RereferenceEEGDatatoButtonGroup = uibuttongroup(app.Step4OptionalSettingsPanel);
            app.RereferenceEEGDatatoButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @RereferenceEEGDatatoButtonGroupSelectionChanged, true);
            app.RereferenceEEGDatatoButtonGroup.Title = 'Re-reference EEG Data to...';
            app.RereferenceEEGDatatoButtonGroup.FontWeight = 'bold';
            app.RereferenceEEGDatatoButtonGroup.Position = [10 153 183 98];

            % Create AvgMastButton
            app.AvgMastButton = uiradiobutton(app.RereferenceEEGDatatoButtonGroup);
            app.AvgMastButton.Text = 'AvgMast';
            app.AvgMastButton.Position = [11 52 68 22];
            app.AvgMastButton.Value = true;

            % Create ContraMastButton
            app.ContraMastButton = uiradiobutton(app.RereferenceEEGDatatoButtonGroup);
            app.ContraMastButton.Text = 'ContraMast';
            app.ContraMastButton.Position = [11 30 84 22];

            % Create CustomRerefButton
            app.CustomRerefButton = uiradiobutton(app.RereferenceEEGDatatoButtonGroup);
            app.CustomRerefButton.Text = 'Custom';
            app.CustomRerefButton.Position = [11 8 65 22];

            % Create CustomRerefEditField
            app.CustomRerefEditField = uieditfield(app.RereferenceEEGDatatoButtonGroup, 'text');
            app.CustomRerefEditField.ValueChangedFcn = createCallbackFcn(app, @ForcerecreationofEEGLABsetfilesCheckBoxValueChanged, true);
            app.CustomRerefEditField.Enable = 'off';
            app.CustomRerefEditField.Position = [94 8 81 22];

            % Create RunandsaveICAdecompositionsCheckBox
            app.RunandsaveICAdecompositionsCheckBox = uicheckbox(app.Step4OptionalSettingsPanel);
            app.RunandsaveICAdecompositionsCheckBox.Text = 'Run and save ICA decompositions?';
            app.RunandsaveICAdecompositionsCheckBox.Position = [10 97 224 22];

            % Create InterpolatemanuallyidentifiedbadchannelsCheckBox
            app.InterpolatemanuallyidentifiedbadchannelsCheckBox = uicheckbox(app.Step4OptionalSettingsPanel);
            app.InterpolatemanuallyidentifiedbadchannelsCheckBox.ValueChangedFcn = createCallbackFcn(app, @InterpolatemanuallyidentifiedbadchannelsCheckBoxValueChanged, true);
            app.InterpolatemanuallyidentifiedbadchannelsCheckBox.Text = 'Interpolate manually identified bad channels?';
            app.InterpolatemanuallyidentifiedbadchannelsCheckBox.Position = [10 72 266 22];

            % Create DownsampledFrequencyNumericEditField
            app.DownsampledFrequencyNumericEditField = uieditfield(app.Step4OptionalSettingsPanel, 'numeric');
            app.DownsampledFrequencyNumericEditField.Position = [400 101 37 22];
            app.DownsampledFrequencyNumericEditField.Value = 500;

            % Create ARBCISettingsLampLabel
            app.ARBCISettingsLampLabel = uilabel(app.Step4OptionalSettingsPanel);
            app.ARBCISettingsLampLabel.HorizontalAlignment = 'right';
            app.ARBCISettingsLampLabel.Position = [330 56 72 22];
            app.ARBCISettingsLampLabel.Text = 'BCI Settings';

            % Create ARBCISettingsLamp
            app.ARBCISettingsLamp = uilamp(app.Step4OptionalSettingsPanel);
            app.ARBCISettingsLamp.Position = [472 60 13 13];
            app.ARBCISettingsLamp.Color = [1 0 0];

            % Create ARBCISettingsButton
            app.ARBCISettingsButton = uibutton(app.Step4OptionalSettingsPanel, 'push');
            app.ARBCISettingsButton.ButtonPushedFcn = createCallbackFcn(app, @ARBCISettingsButtonPush, true);
            app.ARBCISettingsButton.Position = [408 56 54 22];
            app.ARBCISettingsButton.Text = 'Import';

            % Create PreprocessingSettingsButton
            app.PreprocessingSettingsButton = uibutton(app.Step4OptionalSettingsPanel, 'push');
            app.PreprocessingSettingsButton.ButtonPushedFcn = createCallbackFcn(app, @PreprocessingSettingsButtonPush, true);
            app.PreprocessingSettingsButton.Position = [408 24 54 22];
            app.PreprocessingSettingsButton.Text = 'Import';

            % Create PreProcessingSettingsLampLabel
            app.PreProcessingSettingsLampLabel = uilabel(app.Step4OptionalSettingsPanel);
            app.PreProcessingSettingsLampLabel.HorizontalAlignment = 'right';
            app.PreProcessingSettingsLampLabel.Position = [273 24 129 22];
            app.PreProcessingSettingsLampLabel.Text = 'Preprocessing Settings';

            % Create PreProcessingSettingsLamp
            app.PreProcessingSettingsLamp = uilamp(app.Step4OptionalSettingsPanel);
            app.PreProcessingSettingsLamp.Position = [472 28 13 13];
            app.PreProcessingSettingsLamp.Color = [1 0 0];

            % Create InterpolateextrathetabadchannelsMRISRTonlyCheckBox
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox = uicheckbox(app.Step4OptionalSettingsPanel);
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Visible = 'off';
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Text = 'Interpolate extra theta bad channels? (MRI-SRT only)';
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.FontSize = 10;
            app.InterpolateextrathetabadchannelsMRISRTonlyCheckBox.Position = [14 52 262 22];

            % Create ImageModeButtonGroup
            app.ImageModeButtonGroup = uibuttongroup(app.Step4OptionalSettingsPanel);
            app.ImageModeButtonGroup.Title = 'Image Mode';
            app.ImageModeButtonGroup.FontWeight = 'bold';
            app.ImageModeButtonGroup.Position = [201 175 100 76];

            % Create AutocloseButton
            app.AutocloseButton = uiradiobutton(app.ImageModeButtonGroup);
            app.AutocloseButton.Text = 'Autoclose';
            app.AutocloseButton.Position = [11 30 75 22];
            app.AutocloseButton.Value = true;

            % Create PauseButton
            app.PauseButton = uiradiobutton(app.ImageModeButtonGroup);
            app.PauseButton.Text = 'Pause';
            app.PauseButton.Position = [11 8 56 22];

            % Create AnalyzeButton
            app.AnalyzeButton = uibutton(app.UIFigure, 'push');
            app.AnalyzeButton.ButtonPushedFcn = createCallbackFcn(app, @AnalyzeButtonPushed, true);
            app.AnalyzeButton.BackgroundColor = [0.149 0.8706 0.3765];
            app.AnalyzeButton.FontSize = 20;
            app.AnalyzeButton.FontWeight = 'bold';
            app.AnalyzeButton.Enable = 'off';
            app.AnalyzeButton.Position = [621 10 504 55];
            app.AnalyzeButton.Text = 'Analyze';

            % Create ImportPSGpowerParametersButton
            app.ImportPSGpowerParametersButton = uibutton(app.UIFigure, 'push');
            app.ImportPSGpowerParametersButton.ButtonPushedFcn = createCallbackFcn(app, @ImportPSGpowerParameterSettingsMenuSelected, true);
            app.ImportPSGpowerParametersButton.Position = [766 700 176 22];
            app.ImportPSGpowerParametersButton.Text = 'Import PSGpower Parameters';

            % Create ExportPSGpowerParametersButton
            app.ExportPSGpowerParametersButton = uibutton(app.UIFigure, 'push');
            app.ExportPSGpowerParametersButton.ButtonPushedFcn = createCallbackFcn(app, @ExportPSGpowerParameterSettingsMenuSelected, true);
            app.ExportPSGpowerParametersButton.Position = [948 700 177 22];
            app.ExportPSGpowerParametersButton.Text = 'Export PSGpower Parameters';

            % Create ExperimentnameDropDownLabel
            app.ExperimentnameDropDownLabel = uilabel(app.UIFigure);
            app.ExperimentnameDropDownLabel.HorizontalAlignment = 'right';
            app.ExperimentnameDropDownLabel.Position = [352 700 103 22];
            app.ExperimentnameDropDownLabel.Text = 'Experiment name:';

            % Create ExperimentnameDropDown
            app.ExperimentnameDropDown = uidropdown(app.UIFigure);
            app.ExperimentnameDropDown.Items = {'Custom', 'ADHD_SE_ABF', 'Cuing', 'EMO-MRI', 'EmoPhys', 'Emo_Storybook', 'ITNS', 'Maryland', 'MEQ_Spindles', 'Mirror', 'MRI-SRT', 'Recon', 'Storybook', 'SRTOT', 'EmoPreschool'};
            app.ExperimentnameDropDown.ValueChangedFcn = createCallbackFcn(app, @ExperimentnameDropDownValueChanged, true);
            app.ExperimentnameDropDown.Position = [464 700 147 22];
            app.ExperimentnameDropDown.Value = 'Custom';
        end
    end

    methods (Access = public)

        % Construct app
        function app = PSGpower_GUI

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>